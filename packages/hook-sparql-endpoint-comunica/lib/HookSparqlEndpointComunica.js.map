{"version":3,"file":"HookSparqlEndpointComunica.js","sourceRoot":"","sources":["HookSparqlEndpointComunica.ts"],"names":[],"mappings":";;;;;;AAAA,gDAAwB;AAIxB;;GAEG;AACH,MAAa,0BAA0B;IAUrC,YACE,gBAAwB,EACxB,mBAA8C,EAC9C,YAAoB,EACpB,aAAqB,EACrB,UAAkB,EAClB,cAAsB,EACtB,YAAoB,EACpB,SAAiB;QAEjB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;QAC/C,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,kBAAkB,CAAC,OAAqB;QAC7C,OAAO,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,0BAA0B,CAAC,CAAC;IACvF,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,OAAqB,EAAE,uBAAgC;QAC1E,0BAA0B;QAC1B,MAAM,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC;YACtC,GAAG,EAAE,OAAO,CAAC,eAAe,CAAC,IAAI;YACjC,UAAU,EAAE,IAAI,CAAC,gBAAgB;YACjC,cAAc,EAAE,CAAE,IAAI,CAAC,YAAY,CAAE;YACrC,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;YAC3C,SAAS,EAAE;gBACT,aAAa,EAAE,IAAI,CAAC,YAAY;gBAChC,aAAa,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE;gBACrC,UAAU,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE;gBAC/B,SAAS,EAAE,IAAI,CAAC,cAAc;aAC/B;YACD,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,OAAqB,EAAE,OAA2B;;QACnE,OAAO,MAAM,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC;YACjD,aAAa,EAAE,UAAU;YACzB,SAAS,EAAE,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC;YAC3C,mBAAmB,EAAE,IAAI,CAAC,mBAAmB;YAC7C,UAAU,EAAE;gBACV,KAAK,EAAE;oBACL,GAAG,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,aAAa,CAAC,oBAAoB;iBACnF;gBACD,YAAY,EAAE;oBACZ,UAAU,EAAE;wBACV,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,UAAU,EAAE,EAAE;qBACnC;iBACF;gBACD,WAAW,EAAE,MAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,0CAAE,OAAO;aACtC;YACD,WAAW,EAAE,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,8BAA8B,CAAC;YAC9F,aAAa,EAAE,cAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,EAAE,oCAAoC,CAAC;SAC/F,CAAC,CAAC;IACL,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,OAAqB,EAAE,YAA2B;QACnE,IAAI,YAAY,CAAC,MAAM,EAAE;YACvB,MAAM,OAAO,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SAC1D;IACH,CAAC;CACF;AA7ED,gEA6EC","sourcesContent":["import Path from 'path';\nimport type { ITaskContext, DockerResourceConstraints,\n  ProcessHandler, Hook, IHookStartOptions, ICleanTargets } from 'jbr';\n\n/**\n * A hook instance for a Comunica-based SPARQL endpoint.\n */\nexport class HookSparqlEndpointComunica implements Hook {\n  public readonly dockerfileClient: string;\n  public readonly resourceConstraints: DockerResourceConstraints;\n  public readonly configClient: string;\n  public readonly contextClient: string;\n  public readonly clientPort: number;\n  public readonly clientLogLevel: string;\n  public readonly queryTimeout: number;\n  public readonly maxMemory: number;\n\n  public constructor(\n    dockerfileClient: string,\n    resourceConstraints: DockerResourceConstraints,\n    configClient: string,\n    contextClient: string,\n    clientPort: number,\n    clientLogLevel: string,\n    queryTimeout: number,\n    maxMemory: number,\n  ) {\n    this.dockerfileClient = dockerfileClient;\n    this.resourceConstraints = resourceConstraints;\n    this.configClient = configClient;\n    this.contextClient = contextClient;\n    this.clientPort = clientPort;\n    this.clientLogLevel = clientLogLevel;\n    this.queryTimeout = queryTimeout;\n    this.maxMemory = maxMemory;\n  }\n\n  public getDockerImageName(context: ITaskContext): string {\n    return context.docker.imageBuilder.getImageName(context, `sparql-endpoint-comunica`);\n  }\n\n  public async prepare(context: ITaskContext, forceOverwriteGenerated: boolean): Promise<void> {\n    // Build client Dockerfile\n    await context.docker.imageBuilder.build({\n      cwd: context.experimentPaths.root,\n      dockerFile: this.dockerfileClient,\n      auxiliaryFiles: [ this.configClient ],\n      imageName: this.getDockerImageName(context),\n      buildArgs: {\n        CONFIG_CLIENT: this.configClient,\n        QUERY_TIMEOUT: `${this.queryTimeout}`,\n        MAX_MEMORY: `${this.maxMemory}`,\n        LOG_LEVEL: this.clientLogLevel,\n      },\n      logger: context.logger,\n    });\n  }\n\n  public async start(context: ITaskContext, options?: IHookStartOptions): Promise<ProcessHandler> {\n    return await context.docker.containerCreator.start({\n      containerName: 'comunica',\n      imageName: this.getDockerImageName(context),\n      resourceConstraints: this.resourceConstraints,\n      hostConfig: {\n        Binds: [\n          `${Path.join(context.experimentPaths.root, this.contextClient)}:/tmp/context.json`,\n        ],\n        PortBindings: {\n          '3000/tcp': [\n            { HostPort: `${this.clientPort}` },\n          ],\n        },\n        NetworkMode: options?.docker?.network,\n      },\n      logFilePath: Path.join(context.experimentPaths.output, 'logs', 'sparql-endpoint-comunica.txt'),\n      statsFilePath: Path.join(context.experimentPaths.output, 'stats-sparql-endpoint-comunica.csv'),\n    });\n  }\n\n  public async clean(context: ITaskContext, cleanTargets: ICleanTargets): Promise<void> {\n    if (cleanTargets.docker) {\n      await context.docker.containerCreator.remove('comunica');\n    }\n  }\n}\n"]}
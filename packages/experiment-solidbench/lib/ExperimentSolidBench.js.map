{"version":3,"file":"ExperimentSolidBench.js","sourceRoot":"","sources":["ExperimentSolidBench.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as v8 from 'v8';\nimport * as fs from 'fs-extra';\nimport type { Experiment, Hook, ITaskContext,\n  DockerResourceConstraints, ICleanTargets, DockerContainerHandler, DockerNetworkHandler } from 'jbr';\nimport { ProcessHandlerComposite, secureProcessHandler } from 'jbr';\nimport { Generator } from 'solidbench/lib/Generator';\nimport { readQueries, SparqlBenchmarkRunner, writeBenchmarkResults } from 'sparql-benchmark-runner';\n\n/**\n * An experiment instance for the SolidBench social network benchmark.\n */\nexport class ExperimentSolidBench implements Experiment {\n  public readonly scale: string;\n  public readonly configGenerateAux: string;\n  public readonly configFragment: string;\n  public readonly configFragmentAux: string;\n  public readonly configQueries: string;\n  public readonly configServer: string;\n  public readonly validationParamsUrl: string;\n  public readonly configValidation: string;\n  public readonly hadoopMemory: string;\n  public readonly dockerfileServer: string;\n  public readonly hookSparqlEndpoint: Hook;\n  public readonly serverPort: number;\n  public readonly serverLogLevel: string;\n  public readonly serverBaseUrl: string;\n  public readonly serverResourceConstraints: DockerResourceConstraints;\n  public readonly endpointUrl: string;\n  public readonly queryRunnerReplication: number;\n  public readonly queryRunnerWarmupRounds: number;\n  public readonly queryRunnerRecordTimestamps: boolean;\n  public readonly queryRunnerRecordHttpRequests: boolean;\n  public readonly queryRunnerUpQuery: string;\n  public readonly queryRunnerUrlParamsInit: Record<string, any>;\n  public readonly queryRunnerUrlParamsRun: Record<string, any>;\n  public readonly queryTimeoutFallback: number | undefined;\n\n  /**\n   * @param scale\n   * @param configGenerateAux\n   * @param configFragment\n   * @param configFragmentAux\n   * @param configQueries\n   * @param configServer\n   * @param validationParamsUrl\n   * @param configValidation\n   * @param hadoopMemory\n   * @param dockerfileServer\n   * @param hookSparqlEndpoint\n   * @param serverPort\n   * @param serverLogLevel\n   * @param serverBaseUrl\n   * @param serverResourceConstraints\n   * @param endpointUrl\n   * @param queryRunnerReplication\n   * @param queryRunnerWarmupRounds\n   * @param queryRunnerRecordTimestamps\n   * @param queryRunnerRecordHttpRequests\n   * @param queryRunnerUpQuery\n   * @param queryRunnerUrlParamsInit - @range {json}\n   * @param queryRunnerUrlParamsRun - @range {json}\n   * @param queryTimeoutFallback\n   */\n  public constructor(\n    scale: string,\n    configGenerateAux: string,\n    configFragment: string,\n    configFragmentAux: string,\n    configQueries: string,\n    configServer: string,\n    validationParamsUrl: string,\n    configValidation: string,\n    hadoopMemory: string,\n    dockerfileServer: string,\n    hookSparqlEndpoint: Hook,\n    serverPort: number,\n    serverLogLevel: string,\n    serverBaseUrl: string,\n    serverResourceConstraints: DockerResourceConstraints,\n    endpointUrl: string,\n    queryRunnerReplication: number,\n    queryRunnerWarmupRounds: number,\n    queryRunnerRecordTimestamps: boolean,\n    queryRunnerRecordHttpRequests: boolean,\n    queryRunnerUpQuery: string,\n    queryRunnerUrlParamsInit: Record<string, any>,\n    queryRunnerUrlParamsRun: Record<string, any>,\n    queryTimeoutFallback: number | undefined,\n  ) {\n    this.scale = scale;\n    this.configGenerateAux = configGenerateAux;\n    this.configFragment = configFragment;\n    this.configFragmentAux = configFragmentAux;\n    this.configQueries = configQueries;\n    this.configServer = configServer;\n    this.validationParamsUrl = validationParamsUrl;\n    this.configValidation = configValidation;\n    this.hadoopMemory = hadoopMemory;\n    this.dockerfileServer = dockerfileServer;\n    this.hookSparqlEndpoint = hookSparqlEndpoint;\n    this.endpointUrl = endpointUrl;\n    this.serverPort = serverPort;\n    this.serverLogLevel = serverLogLevel;\n    this.serverBaseUrl = serverBaseUrl;\n    this.serverResourceConstraints = serverResourceConstraints;\n    this.queryRunnerReplication = queryRunnerReplication;\n    this.queryRunnerWarmupRounds = queryRunnerWarmupRounds;\n    this.queryRunnerRecordTimestamps = queryRunnerRecordTimestamps;\n    this.queryRunnerRecordHttpRequests = queryRunnerRecordHttpRequests;\n    this.queryRunnerUpQuery = queryRunnerUpQuery;\n    this.queryRunnerUrlParamsInit = queryRunnerUrlParamsInit;\n    this.queryRunnerUrlParamsRun = queryRunnerUrlParamsRun;\n    this.queryTimeoutFallback = queryTimeoutFallback;\n  }\n\n  public getDockerImageName(context: ITaskContext, type: string): string {\n    return context.docker.imageBuilder.getImageName(context, `solidbench-${type}`);\n  }\n\n  public async replaceBaseUrlInDir(path: string): Promise<void> {\n    for (const entry of await fs.readdir(path, { withFileTypes: true })) {\n      if (entry.isFile()) {\n        const file = Path.join(path, entry.name);\n        await fs.writeFile(file, (await fs.readFile(file, 'utf8'))\n          .replace(/localhost:3000/ug, 'solidbench-server:3000'));\n      } else if (entry.isDirectory()) {\n        await this.replaceBaseUrlInDir(Path.join(path, entry.name));\n      }\n    }\n  }\n\n  public async prepare(context: ITaskContext, forceOverwriteGenerated: boolean): Promise<void> {\n    // Validate memory limit\n    const minimumMemory = 8192;\n    // eslint-disable-next-line no-bitwise\n    const currentMemory = v8.getHeapStatistics().heap_size_limit / 1024 / 1024;\n    if (currentMemory < minimumMemory) {\n      context.logger.warn(`SolidBench recommends allocating at least ${minimumMemory} MB of memory, while only ${currentMemory} was allocated.\\nThis can be configured using Node's --max_old_space_size option.`);\n    }\n\n    // Prepare hook\n    await this.hookSparqlEndpoint.prepare(context, forceOverwriteGenerated);\n\n    // Prepare dataset\n    await new Generator({\n      verbose: context.verbose,\n      cwd: context.experimentPaths.generated,\n      overwrite: forceOverwriteGenerated,\n      scale: this.scale,\n      enhancementConfig: Path.resolve(context.cwd, this.configGenerateAux),\n      fragmentConfig: Path.resolve(context.cwd, this.configFragment),\n      enhancementFragmentConfig: Path.resolve(context.cwd, this.configFragmentAux),\n      queryConfig: Path.resolve(context.cwd, this.configQueries),\n      validationParams: this.validationParamsUrl,\n      validationConfig: Path.resolve(context.cwd, this.configValidation),\n      hadoopMemory: this.hadoopMemory,\n    }).generate();\n\n    // Replace prefix URLs to correct base URL in queries directory\n    await this.replaceBaseUrlInDir(Path.resolve(context.experimentPaths.generated, 'out-queries'));\n\n    // Build server Dockerfile\n    await context.docker.imageBuilder.build({\n      cwd: context.experimentPaths.root,\n      dockerFile: this.dockerfileServer,\n      auxiliaryFiles: [ this.configServer ],\n      imageName: this.getDockerImageName(context, 'server'),\n      buildArgs: {\n        CONFIG_SERVER: this.configServer,\n        LOG_LEVEL: this.serverLogLevel,\n        BASE_URL: this.serverBaseUrl,\n      },\n      logger: context.logger,\n    });\n  }\n\n  public async run(context: ITaskContext): Promise<void> {\n    // Start server\n    const [ serverHandler, networkHandler ] = await this.startServer(context);\n\n    // Setup SPARQL endpoint\n    const network = networkHandler.network.id;\n    const endpointProcessHandler = await this.hookSparqlEndpoint.start(context, { docker: { network }});\n\n    const processHandler = new ProcessHandlerComposite([\n      serverHandler,\n      endpointProcessHandler,\n      networkHandler,\n    ]);\n    const closeProcess = secureProcessHandler(processHandler, context);\n\n    // Initiate SPARQL benchmark runner\n    let stopStats: () => void;\n    const results = await new SparqlBenchmarkRunner({\n      endpoint: this.endpointUrl,\n      querySets: await readQueries(Path.join(context.experimentPaths.generated, 'out-queries')),\n      replication: this.queryRunnerReplication,\n      warmup: this.queryRunnerWarmupRounds,\n      timestampsRecording: this.queryRunnerRecordTimestamps,\n      logger: (message: string) => process.stderr.write(message),\n      upQuery: this.queryRunnerUpQuery,\n      additionalUrlParamsInit: new URLSearchParams(this.queryRunnerUrlParamsInit),\n      additionalUrlParamsRun: new URLSearchParams(this.queryRunnerUrlParamsRun),\n      timeout: this.queryTimeoutFallback,\n    }).run({\n      async onStart() {\n        // Collect stats\n        stopStats = await processHandler.startCollectingStats();\n\n        // Breakpoint right before starting queries.\n        if (context.breakpointBarrier) {\n          await context.breakpointBarrier();\n        }\n      },\n      async onStop() {\n        stopStats();\n      },\n    });\n\n    // Write results\n    const resultsOutput = context.experimentPaths.output;\n    if (!await fs.pathExists(resultsOutput)) {\n      await fs.mkdir(resultsOutput);\n    }\n    context.logger.info(`Writing results to ${resultsOutput}\\n`);\n    await writeBenchmarkResults(\n      results,\n      Path.join(resultsOutput, 'query-times.csv'),\n      this.queryRunnerRecordTimestamps,\n      [\n        ...this.queryRunnerRecordHttpRequests ? [ 'httpRequests' ] : [],\n      ],\n    );\n\n    // Close endpoint and server\n    await closeProcess();\n  }\n\n  public async startServer(context: ITaskContext): Promise<[ DockerContainerHandler, DockerNetworkHandler ] > {\n    // Create shared network\n    const networkHandler = await context.docker.networkCreator\n      .create({ Name: this.getDockerImageName(context, 'network') });\n    const network = networkHandler.network.id;\n\n    // Ensure logs directory exists\n    await fs.ensureDir(Path.join(context.experimentPaths.output, 'logs'));\n\n    const filePath = this.serverBaseUrl.replace('://', '/').replace(':', '_');\n    const serverHandler = await context.docker.containerCreator.start({\n      containerName: 'solidbench-server',\n      imageName: this.getDockerImageName(context, 'server'),\n      resourceConstraints: this.serverResourceConstraints,\n      hostConfig: {\n        Binds: [\n          `${Path.join(context.experimentPaths.generated, `out-fragments/${filePath}`)}/:/data`,\n        ],\n        PortBindings: {\n          '3000/tcp': [\n            { HostPort: `${this.serverPort}` },\n          ],\n        },\n        NetworkMode: network,\n      },\n      logFilePath: Path.join(context.experimentPaths.output, 'logs', 'server.txt'),\n      statsFilePath: Path.join(context.experimentPaths.output, 'stats-server.csv'),\n    });\n\n    return [ serverHandler, networkHandler ];\n  }\n\n  public async clean(context: ITaskContext, cleanTargets: ICleanTargets): Promise<void> {\n    await this.hookSparqlEndpoint.clean(context, cleanTargets);\n\n    if (cleanTargets.docker) {\n      await context.docker.networkCreator.remove(this.getDockerImageName(context, 'network'));\n      await context.docker.containerCreator.remove('solidbench-server');\n    }\n  }\n}\n"]}
{"version":3,"file":"TaskSetHook.js","sourceRoot":"","sources":["TaskSetHook.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport { inspect } from 'util';\nimport * as fs from 'fs-extra';\nimport { ErrorHandled } from '../cli/ErrorHandled';\nimport { HookNonConfigured } from '../hook/HookNonConfigured';\nimport type { NpmInstaller } from '../npm/NpmInstaller';\nimport { ExperimentLoader } from './ExperimentLoader';\nimport type { ITaskContext } from './ITaskContext';\nimport { TaskGenerateCombinations } from './TaskGenerateCombinations';\n\n/**\n * Sets a handler for a given experiment's hook\n */\nexport class TaskSetHook {\n  private readonly context: ITaskContext;\n  private readonly hookPathName: string[];\n  private readonly handlerTypeId: string;\n  private readonly npmInstaller: NpmInstaller;\n\n  public constructor(\n    context: ITaskContext,\n    hookPathName: string[],\n    handlerTypeId: string,\n    npmInstaller: NpmInstaller,\n  ) {\n    this.context = context;\n    this.hookPathName = hookPathName;\n    this.handlerTypeId = handlerTypeId;\n    this.npmInstaller = npmInstaller;\n  }\n\n  public async set(): Promise<ITaskSetHookOutput> {\n    // Invoke npm install for hook\n    const hookPackageName = `@jbr-hook/${this.handlerTypeId}`;\n    await this.npmInstaller.install(this.context.experimentPaths.root, [ hookPackageName ], 'jbr-hook');\n\n    // Resolve hook type\n    const experimentLoader = await ExperimentLoader.build(this.context.mainModulePath);\n    const handlerTypes = await experimentLoader.discoverHookHandlers();\n    const handlerTypeWrapped = handlerTypes[this.handlerTypeId];\n    if (!handlerTypeWrapped) {\n      throw new ErrorHandled(`Invalid hook type '${this.handlerTypeId}'. Must be one of '${Object.keys(handlerTypes).join(', ')}'`);\n    }\n    const { handler: handlerType, contexts } = handlerTypeWrapped;\n\n    // Read config file\n    const combinationsExperiment = await ExperimentLoader.isCombinationsExperiment(this.context.experimentPaths.root);\n    const configPath = Path.join(\n      this.context.experimentPaths.root,\n      combinationsExperiment ? ExperimentLoader.CONFIG_TEMPLATE_NAME : ExperimentLoader.CONFIG_NAME,\n    );\n    const config = JSON.parse(await fs.readFile(configPath, 'utf8'));\n    const experimentIri = config['@id'];\n\n    // Prepare sub-hooks\n    const subHookNames = handlerType.getSubHookNames();\n    const subHookEntries = subHookNames.reduce<Record<string, any>>((acc, hookName) => {\n      acc[hookName] = {\n        '@id': `${experimentIri}:${hookName}`,\n        '@type': HookNonConfigured.name,\n      };\n      return acc;\n    }, {});\n\n    // Find hook\n    TaskSetHook.getObjectPath(configPath, config, this.hookPathName);\n\n    // Set hook value\n    TaskSetHook.setObjectPath(configPath, config, this.hookPathName, {\n      '@id': `${experimentIri}:${this.hookPathName.join('_')}`,\n      '@type': handlerType.hookClassName,\n      ...handlerType.getDefaultParams(this.context.experimentPaths),\n      ...subHookEntries,\n    });\n\n    // Append contexts\n    for (const context of contexts) {\n      if (!config['@context'].includes(context)) {\n        config['@context'].push(context);\n      }\n    }\n\n    // Write updated config file\n    await fs.writeFile(configPath, JSON.stringify(config, null, '  '), 'utf8');\n\n    // For combination-based experiments, re-generate combinations\n    if (combinationsExperiment) {\n      await new TaskGenerateCombinations(this.context).generate();\n    }\n\n    // Instantiate experiment for validation\n    const { experiments } = await experimentLoader\n      .instantiateExperiments(this.context.experimentName, this.context.experimentPaths.root);\n\n    // Invoke the handler type's init logic\n    for (const experiment of experiments) {\n      await handlerType.init(this.context.experimentPaths,\n        TaskSetHook.getObjectPath(configPath, experiment, this.hookPathName));\n    }\n\n    // Remove hidden prepared marker file if it exists\n    const markerPath = ExperimentLoader.getPreparedMarkerPath(this.context.experimentPaths.root);\n    if (await fs.pathExists(markerPath)) {\n      await fs.unlink(markerPath);\n      this.context.logger.warn(`Removed 'prepared' flag from this experiment. Invoke 'jbr prepare' before running this experiment.`);\n    }\n\n    return { subHookNames };\n  }\n\n  public static getObjectPath(configPath: string, object: any, path: string[]): any {\n    if (path.length === 0) {\n      return object;\n    }\n    const child = object[path[0]];\n    if (!child) {\n      throw new Error(`Illegal hook path: could not find '${path[0]}' in '${configPath}' on ${inspect(object)}`);\n    }\n    return TaskSetHook.getObjectPath(configPath, child, path.slice(1));\n  }\n\n  public static setObjectPath(configPath: string, object: any, path: string[], value: any): void {\n    if (path.length === 0) {\n      throw new Error(`Illegal hook path of length 0`);\n    } else if (path.length === 1) {\n      object[path[0]] = value;\n    } else {\n      const child = object[path[0]];\n      if (!child) {\n        throw new Error(`Illegal hook path: could not set a child for '${path[0]}' in '${configPath}' on ${inspect(object)}`);\n      }\n      return TaskSetHook.setObjectPath(configPath, child, path.slice(1), value);\n    }\n  }\n}\n\nexport interface ITaskSetHookOutput {\n  subHookNames: string[];\n}\n"]}
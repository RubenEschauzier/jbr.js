{"version":3,"file":"TaskInitialize.js","sourceRoot":"","sources":["TaskInitialize.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as fs from 'fs-extra';\nimport { createExperimentPaths } from '../cli/CliHelpers';\nimport { ErrorHandled } from '../cli/ErrorHandled';\nimport { HookNonConfigured } from '../hook/HookNonConfigured';\nimport type { NpmInstaller } from '../npm/NpmInstaller';\nimport { ExperimentLoader } from './ExperimentLoader';\nimport type { ITaskContext } from './ITaskContext';\nimport { TaskGenerateCombinations } from './TaskGenerateCombinations';\n\n/**\n * Initializes an experiment of the given type.\n */\nexport class TaskInitialize {\n  public static readonly INIT_DIRS: string[] = [\n    'input',\n    'generated',\n    'output',\n  ];\n\n  private readonly context: ITaskContext;\n  private readonly experimentTypeId: string;\n  private readonly experimentName: string;\n  private readonly targetDirectory: string;\n  private readonly forceReInit: boolean;\n  private readonly combinations: boolean;\n  private readonly npmInstaller: NpmInstaller;\n\n  public constructor(\n    context: ITaskContext,\n    experimentTypeId: string,\n    experimentName: string,\n    targetDirectory: string,\n    forceReInit: boolean,\n    combinations: boolean,\n    npmInstaller: NpmInstaller,\n  ) {\n    this.context = context;\n    this.experimentTypeId = experimentTypeId;\n    this.experimentName = experimentName;\n    this.targetDirectory = Path.join(this.context.cwd, targetDirectory);\n    this.forceReInit = forceReInit;\n    this.combinations = combinations;\n    this.npmInstaller = npmInstaller;\n  }\n\n  public async init(): Promise<ITaskInitializeOutput> {\n    // Require target not to exist\n    if (await fs.pathExists(this.targetDirectory)) {\n      if (this.forceReInit) {\n        await fs.remove(this.targetDirectory);\n      } else {\n        throw new ErrorHandled(`The target directory already exists: '${this.targetDirectory}'`);\n      }\n    }\n\n    // Create experiment directory\n    await fs.mkdir(this.targetDirectory);\n    for (const initDir of TaskInitialize.INIT_DIRS) {\n      await fs.mkdir(Path.join(this.targetDirectory, initDir));\n    }\n\n    // Create package.json\n    const experimentPackageJson = {\n      private: true,\n      name: this.experimentName,\n      dependencies: {\n        'cross-env': '^7.0.3',\n      },\n      scripts: {\n        jbr: 'cross-env NODE_OPTIONS=--max-old-space-size=8192 jbr',\n        validate: 'jbr validate',\n      },\n    };\n    const packageJsonPath = Path.join(this.targetDirectory, ExperimentLoader.PACKAGEJSON_NAME);\n    await fs.writeFile(packageJsonPath, JSON.stringify(experimentPackageJson, null, '  '), 'utf8');\n\n    // Invoke npm install for jbr and experiment\n    const experimentPackageName = `@jbr-experiment/${this.experimentTypeId}`;\n    await this.npmInstaller.install(this.targetDirectory, [ 'jbr', experimentPackageName ], 'jbr-experiment');\n\n    // Resolve experiment type\n    const experimentLoader = await ExperimentLoader.build(this.targetDirectory);\n    const experimentTypes = await experimentLoader.discoverExperimentHandlers();\n    const experimentTypeWrapped = experimentTypes[this.experimentTypeId];\n    if (!experimentTypeWrapped) {\n      throw new Error(`Invalid experiment type '${this.experimentTypeId}'. Must be one of '${Object.keys(experimentTypes).join(', ')}'`);\n    }\n    const { handler: experimentType, contexts } = experimentTypeWrapped;\n\n    // Determine jbr context url\n    const jbrContextUrl = JSON.parse(await fs\n      .readFile(Path.join(__dirname, '../../components/components.jsonld'), 'utf8'))['@context'][0];\n\n    // Create config\n    const experimentIri = ExperimentLoader.getDefaultExperimentIri(this.experimentName);\n    const hookNames = experimentType.getHookNames();\n    const hookEntries = hookNames.reduce<Record<string, any>>((acc, hookName) => {\n      acc[hookName] = {\n        '@id': `${experimentIri}:${hookName}`,\n        '@type': HookNonConfigured.name,\n      };\n      return acc;\n    }, {});\n    const experimentPaths = createExperimentPaths(this.targetDirectory);\n    const experimentConfig = {\n      '@context': [\n        jbrContextUrl,\n        ...contexts,\n      ],\n      '@id': experimentIri,\n      '@type': experimentType.experimentClassName,\n      ...experimentType.getDefaultParams(experimentPaths),\n      ...hookEntries,\n    };\n    const configPath = Path.join(this.targetDirectory, this.combinations ?\n      ExperimentLoader.CONFIG_TEMPLATE_NAME :\n      ExperimentLoader.CONFIG_NAME);\n    await fs.writeFile(configPath, JSON.stringify(experimentConfig, null, '  '), 'utf8');\n\n    // Create combinations file for combinations-based experiments\n    if (this.combinations) {\n      const combinationsConfig = {\n        '@context': [\n          jbrContextUrl,\n        ],\n        '@id': `${experimentIri}-combinations`,\n        '@type': 'FullFactorialCombinationProvider',\n        commonGenerated: false,\n        factors: {},\n      };\n      const combinationsPath = Path.join(this.targetDirectory, ExperimentLoader.COMBINATIONS_NAME);\n      await fs.writeFile(combinationsPath, JSON.stringify(combinationsConfig, null, '  '), 'utf8');\n\n      // Generate initial combinations\n      await new TaskGenerateCombinations({\n        ...this.context,\n        experimentName: this.experimentName,\n        mainModulePath: this.targetDirectory,\n        experimentPaths: createExperimentPaths(this.targetDirectory, 0),\n      }).generate();\n    }\n\n    // Copy template files\n    for (const file of [ '.gitignore', 'README.md' ]) {\n      await fs.copyFile(Path.join(__dirname, '..', 'templates', file), Path.join(this.targetDirectory, file));\n    }\n    await fs.createFile(Path.join(this.targetDirectory, 'generated', '.keep'));\n    await fs.createFile(Path.join(this.targetDirectory, 'output', '.keep'));\n\n    // Instantiate experiment for validation\n    const { experiments } = await experimentLoader\n      .instantiateExperiments(await ExperimentLoader.getExperimentName(this.targetDirectory), this.targetDirectory);\n\n    // Invoke the experiment type's init logic\n    for (const experiment of experiments) {\n      await experimentType.init(experimentPaths, experiment);\n    }\n\n    return {\n      experimentDirectory: this.targetDirectory,\n      hookNames,\n    };\n  }\n}\n\nexport interface ITaskInitializeOutput {\n  experimentDirectory: string;\n  hookNames: string[];\n}\n"]}
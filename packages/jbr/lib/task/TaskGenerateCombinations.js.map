{"version":3,"file":"TaskGenerateCombinations.js","sourceRoot":"","sources":["TaskGenerateCombinations.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport * as fs from 'fs-extra';\nimport type { FactorCombination } from '../factor/CombinationProvider';\nimport { ExperimentLoader } from './ExperimentLoader';\nimport type { ITaskContext } from './ITaskContext';\nimport { TaskInitialize } from './TaskInitialize';\n\n/**\n * Generates combinations based on an experiment template and a combination provider.\n */\nexport class TaskGenerateCombinations {\n  private readonly context: ITaskContext;\n\n  public constructor(\n    context: ITaskContext,\n  ) {\n    this.context = context;\n  }\n\n  public async generate(): Promise<FactorCombination[]> {\n    await ExperimentLoader.requireCombinationsExperiment(this.context.experimentPaths.root);\n\n    // Determine combinations\n    const experimentLoader = await ExperimentLoader.build(this.context.mainModulePath);\n    const combinationsProvider = await experimentLoader\n      .instantiateCombinationProvider(this.context.experimentName, this.context.experimentPaths.root);\n    const combinations = combinationsProvider.getFactorCombinations();\n\n    // Determine experiment id\n    const experimentId = ExperimentLoader.getDefaultExperimentIri(this.context.experimentName);\n\n    // Load config template\n    const configTemplatePath = Path.join(this.context.experimentPaths.root, ExperimentLoader.CONFIG_TEMPLATE_NAME);\n    const configTemplateContents = await fs.readFile(configTemplatePath, 'utf8');\n\n    // Create combination directories and config files\n    const combinationsPath = Path.join(this.context.experimentPaths.root, 'combinations');\n    if (!await fs.pathExists(combinationsPath)) {\n      await fs.mkdir(combinationsPath);\n    }\n    for (const [ combinationId, combination ] of combinations.entries()) {\n      // Create combination directory\n      const combinationIdString = ExperimentLoader.getCombinationIdString(combinationId);\n      const combinationInstancePath = Path.join(combinationsPath, combinationIdString);\n      if (!await fs.pathExists(combinationInstancePath)) {\n        await fs.mkdir(combinationInstancePath);\n        for (const initDir of TaskInitialize.INIT_DIRS) {\n          const dir = Path.join(combinationInstancePath, initDir);\n          await fs.mkdir(dir);\n          await fs.createFile(Path.join(dir, '.keep'));\n        }\n      }\n\n      // Create config file\n      const combinationInstanceConfigPath = Path.join(combinationInstancePath, ExperimentLoader.CONFIG_NAME);\n      const combinationInstanceConfigContents = TaskGenerateCombinations\n        .applyFactorCombination(combination, experimentId, combinationIdString, configTemplateContents);\n      await fs.writeFile(combinationInstanceConfigPath, combinationInstanceConfigContents);\n\n      // Copy inputs\n      const combinationInputPath = Path.join(combinationInstancePath, 'input');\n      const templateInputPath = Path.join(this.context.experimentPaths.root, 'input');\n      await TaskGenerateCombinations.copyFiles(\n        templateInputPath,\n        combinationInputPath,\n        (contents: string) => TaskGenerateCombinations\n          .applyFactorCombination(combination, experimentId, combinationIdString, contents),\n      );\n\n      // Create output softlink from root to combinations\n      // Note that these paths are absolute because of Windows...\n      const combinationOutputPath = Path.join(this.context.experimentPaths.root, 'output', combinationIdString);\n      if (await fs.pathExists(combinationOutputPath)) {\n        await fs.unlink(combinationOutputPath);\n      }\n      await fs.symlink(Path.join(combinationInstancePath, 'output'), combinationOutputPath);\n    }\n\n    // Instantiate experiments for validation\n    await (await ExperimentLoader.build(this.context.mainModulePath))\n      .instantiateExperiments(this.context.experimentName, this.context.experimentPaths.root);\n\n    return combinations;\n  }\n\n  /**\n   * Instantiate all variables in the form of %FACTOR-variablename% based on the given factor combination.\n   * @param combination A factor combination that maps variable names to values.\n   * @param experimentId The experiment id.\n   * @param combinationId The combination id.\n   * @param content The string content in which variable names should be replaced.\n   */\n  public static applyFactorCombination(\n    combination: FactorCombination,\n    experimentId: string,\n    combinationId: string,\n    content: string,\n  ): string {\n    content = content.replace(\n      new RegExp(experimentId, 'gu'),\n      ExperimentLoader.getCombinationExperimentIri(experimentId, combinationId),\n    );\n    for (const [ key, value ] of Object.entries(combination)) {\n      content = content.replace(new RegExp(`%FACTOR-${key}%`, 'gu'), value);\n    }\n    return content;\n  }\n\n  /**\n   * Copy all files in the given source to the given destination.\n   * Additionally, apply the given mapper function on all copied file contents.\n   * @param sourceDirectory Directory to copy from.\n   * @param destinationDirectory Directory to copy to.\n   * @param mapper A function to map file contents when copying.\n   */\n  public static async copyFiles(\n    sourceDirectory: string,\n    destinationDirectory: string,\n    mapper: (value: string) => string,\n  ): Promise<void> {\n    for (const entry of await fs.readdir(sourceDirectory, { withFileTypes: true })) {\n      if (entry.isFile()) {\n        const contents = await fs.readFile(Path.join(sourceDirectory, entry.name), 'utf8');\n        await fs.writeFile(Path.join(destinationDirectory, entry.name), mapper(contents));\n      } else if (entry.isDirectory()) {\n        await fs.mkdirp(Path.join(destinationDirectory, entry.name));\n        await TaskGenerateCombinations.copyFiles(\n          Path.join(sourceDirectory, entry.name),\n          Path.join(destinationDirectory, entry.name),\n          mapper,\n        );\n      }\n    }\n  }\n}\n"]}
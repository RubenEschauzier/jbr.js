{"version":3,"file":"TaskValidate.js","sourceRoot":"","sources":["TaskValidate.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,6CAA+B;AAC/B,sDAAmD;AACnD,yDAAsD;AAGtD;;GAEG;AACH,MAAa,YAAY;IAcvB,YACE,OAAqB;QAErB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,QAAQ;QACnB,MAAM,MAAM,GAAa,EAAE,CAAC;QAE5B,MAAM,iBAAiB,GACrB,MAAM,EAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,mCAAgB,CAAC,oBAAoB,CAAC,CAAC;YACxG,MAAM,EAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,mCAAgB,CAAC,iBAAiB,CAAC,CAAC,CAAC;QAExG,oCAAoC;QACpC,KAAK,MAAM,QAAQ,IAAI,iBAAiB,CAAC,CAAC,CAAC,YAAY,CAAC,2BAA2B,CAAC,CAAC,CAAC,YAAY,CAAC,cAAc,EAAE;YACjH,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,EAAE;gBAChF,MAAM,CAAC,IAAI,CAAC,YAAY,QAAQ,QAAQ,CAAC,CAAC;aAC3C;SACF;QAED,wCAAwC;QACxC,IAAI;YACF,MAAM,CAAC,MAAM,mCAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;iBAC9D,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;SAC3F;QAAC,OAAO,KAAc,EAAE;YACvB,MAAM,CAAC,IAAI,CAAC,WAAW,mCAAgB,CAAC,WAAW,UAAkB,KAAM,CAAC,OAAO,EAAE,CAAC,CAAC;SACxF;QAED,mCAAmC;QACnC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,2BAAY,CAAC,GAAG,iBAAiB,CAAC,CAAC,CAAC,+BAA+B,CAAC,CAAC,CAAC,YAAY;MAC5F,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;;yEAE8C,iBAAiB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;SACvG;IACH,CAAC;;AAjDH,oCAkDC;AAjDwB,2BAAc,GAAa;IAChD,mCAAgB,CAAC,WAAW;IAC5B,mCAAgB,CAAC,gBAAgB;CAClC,CAAC;AAEqB,wCAA2B,GAAa;IAC7D,mCAAgB,CAAC,oBAAoB;IACrC,mCAAgB,CAAC,iBAAiB;IAClC,mCAAgB,CAAC,gBAAgB;CAClC,CAAC","sourcesContent":["import Path from 'path';\nimport * as fs from 'fs-extra';\nimport { ErrorHandled } from '../cli/ErrorHandled';\nimport { ExperimentLoader } from './ExperimentLoader';\nimport type { ITaskContext } from './ITaskContext';\n\n/**\n * Validates an experiment.\n */\nexport class TaskValidate {\n  public static readonly REQUIRED_FILES: string[] = [\n    ExperimentLoader.CONFIG_NAME,\n    ExperimentLoader.PACKAGEJSON_NAME,\n  ];\n\n  public static readonly REQUIRED_FILES_COMBINATIONS: string[] = [\n    ExperimentLoader.CONFIG_TEMPLATE_NAME,\n    ExperimentLoader.COMBINATIONS_NAME,\n    ExperimentLoader.PACKAGEJSON_NAME,\n  ];\n\n  private readonly context: ITaskContext;\n\n  public constructor(\n    context: ITaskContext,\n  ) {\n    this.context = context;\n  }\n\n  public async validate(): Promise<void> {\n    const errors: string[] = [];\n\n    const combinationsBased =\n      await fs.pathExists(Path.join(this.context.experimentPaths.root, ExperimentLoader.CONFIG_TEMPLATE_NAME)) ||\n      await fs.pathExists(Path.join(this.context.experimentPaths.root, ExperimentLoader.COMBINATIONS_NAME));\n\n    // Check if the required files exist\n    for (const fileName of combinationsBased ? TaskValidate.REQUIRED_FILES_COMBINATIONS : TaskValidate.REQUIRED_FILES) {\n      if (!await fs.pathExists(Path.join(this.context.experimentPaths.root, fileName))) {\n        errors.push(`Missing '${fileName}' file`);\n      }\n    }\n\n    // Validate the experiment's config file\n    try {\n      await (await ExperimentLoader.build(this.context.mainModulePath))\n        .instantiateExperiments(this.context.experimentName, this.context.experimentPaths.root);\n    } catch (error: unknown) {\n      errors.push(`Invalid ${ExperimentLoader.CONFIG_NAME} file: ${(<Error>error).message}`);\n    }\n\n    // Emit a validation failed message\n    if (errors.length > 0) {\n      throw new ErrorHandled(`${combinationsBased ? 'Combinations-based experiment' : 'Experiment'} validation failed:\n  - ${errors.join('\\n  - ')}\n\nMake sure you invoke this command in a directory created with 'jbr init${combinationsBased ? ' -c' : ''}'`);\n    }\n  }\n}\n"]}
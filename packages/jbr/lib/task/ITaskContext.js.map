{"version":3,"file":"ITaskContext.js","sourceRoot":"","sources":["ITaskContext.ts"],"names":[],"mappings":"","sourcesContent":["import type { Logger } from 'winston';\nimport type { DockerContainerCreator } from '../docker/DockerContainerCreator';\nimport type { DockerImageBuilder } from '../docker/DockerImageBuilder';\nimport type { DockerImagePuller } from '../docker/DockerImagePuller';\nimport type { DockerNetworkCreator } from '../docker/DockerNetworkCreator';\n\n/**\n * Common data when running a task.\n */\nexport interface ITaskContext {\n  cwd: string;\n  experimentPaths: IExperimentPaths;\n  experimentName: string;\n  mainModulePath: string;\n  verbose: boolean;\n  logger: Logger;\n  docker: {\n    containerCreator: DockerContainerCreator;\n    imageBuilder: DockerImageBuilder;\n    imagePuller: DockerImagePuller;\n    networkCreator: DockerNetworkCreator;\n  };\n  /**\n   * Function that will cleanly close the experiment.\n   * This may be used in case an error occurs that requires the experiment to be closed earlier.\n   */\n  closeExperiment: () => void;\n  /**\n   * Listeners can be appended to this array\n   * to make sure that they are invoked when the process ends abnormally.\n   */\n  cleanupHandlers: (() => Promise<void>)[];\n  /**\n   * An optional barrier that -when defined-\n   * must cause experiments to await its resolution.\n   *\n   * This can be used as break-points when debugging experiments.\n   */\n  breakpointBarrier?: () => Promise<void>;\n}\n\n/**\n * Relevant paths for an experiment.\n */\nexport interface IExperimentPaths {\n  root: string;\n  input: string;\n  generated: string;\n  output: string;\n  combination?: number;\n}\n"]}
{"version":3,"file":"TaskPack.js","sourceRoot":"","sources":["TaskPack.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,yCAA2B;AAC3B,yDAAsD;AAGtD;;GAEG;AACH,MAAa,QAAQ;IAInB,YACE,OAAqB,EACrB,UAAmB;QAEnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,KAAK,CAAC,IAAI;;QACf,MAAM,EAAE,oBAAoB,EAAE,GAAG,MAAM,CAAC,MAAM,mCAAgB,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;aAC/F,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAE1F,MAAM,GAAG,CAAC,MAAM,CACd;YACE,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG;YACrB,IAAI,EAAE,IAAI;YACV,IAAI,EAAE,MAAA,IAAI,CAAC,UAAU,mCAAI,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,gBAAgB;SAC5E,EACD,oBAAoB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE;YACzC,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACxD,MAAM,IAAI,KAAK,CAAC,mCAAmC,eAAe,CAAC,MAAM,2BAA2B,IAAI,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC;aAC1H;YACD,OAAO,eAAe,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CACH,CAAC;IACJ,CAAC;CACF;AA9BD,4BA8BC","sourcesContent":["import * as tar from 'tar';\nimport { ExperimentLoader } from './ExperimentLoader';\nimport type { ITaskContext } from './ITaskContext';\n\n/**\n * Archives an experiment.\n */\nexport class TaskPack {\n  private readonly context: ITaskContext;\n  private readonly outputName?: string;\n\n  public constructor(\n    context: ITaskContext,\n    outputName?: string,\n  ) {\n    this.context = context;\n    this.outputName = outputName;\n  }\n\n  public async pack(): Promise<void> {\n    const { experimentPathsArray } = await (await ExperimentLoader.build(this.context.mainModulePath))\n      .instantiateExperiments(this.context.experimentName, this.context.experimentPaths.root);\n\n    await tar.create(\n      {\n        cwd: this.context.cwd,\n        gzip: true,\n        file: this.outputName ?? `jbr-${this.context.experimentName}-output.tar.gz`,\n      },\n      experimentPathsArray.map(experimentPaths => {\n        if (!experimentPaths.output.startsWith(this.context.cwd)) {\n          throw new Error(`Illegal experiment output path '${experimentPaths.output}' outside of cwd scope '${this.context.cwd}'`);\n        }\n        return experimentPaths.output.slice(this.context.cwd.length + 1);\n      }),\n    );\n  }\n}\n"]}
{"version":3,"file":"TaskPrepare.js","sourceRoot":"","sources":["TaskPrepare.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,6CAA+B;AAC/B,yDAAsD;AAGtD;;GAEG;AACH,MAAa,WAAW;IAKtB,YACE,OAAqB,EACrB,uBAAgC,EAChC,WAA+B;QAE/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QACvD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,OAAO;QAClB,yCAAyC;QACzC,MAAM,UAAU,GAAG,mCAAgB,CAAC,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC7F,IAAI,MAAM,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE;YACnC,MAAM,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SAC7B;QAED,iCAAiC;QACjC,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,GAAG,MAAM,CAAC,MAAM,mCAAgB;aAC7F,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;aACnC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC1F,KAAK,MAAM,CAAE,CAAC,EAAE,UAAU,CAAE,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE;YACrD,IAAI,IAAI,CAAC,WAAW,KAAK,SAAS,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE;gBAC5D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,uCAAuC,CAAC,EAAE,CAAC,CAAC;gBAErE,MAAM,UAAU,CAAC,OAAO,iCACjB,IAAI,CAAC,OAAO,KAAE,eAAe,EAAE,oBAAoB,CAAC,CAAC,CAAC,KAC3D,IAAI,CAAC,uBAAuB,CAC7B,CAAC;aACH;SACF;QAED,2GAA2G;QAC3G,MAAM,EAAE,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,EAAE,MAAM,CAAC,CAAC;IAC7C,CAAC;CACF;AAxCD,kCAwCC","sourcesContent":["import * as fs from 'fs-extra';\nimport { ExperimentLoader } from './ExperimentLoader';\nimport type { ITaskContext } from './ITaskContext';\n\n/**\n * Runs the preparation phase of an experiment.\n */\nexport class TaskPrepare {\n  private readonly context: ITaskContext;\n  private readonly forceOverwriteGenerated: boolean;\n  private readonly combination: number | undefined;\n\n  public constructor(\n    context: ITaskContext,\n    forceOverwriteGenerated: boolean,\n    combination: number | undefined,\n  ) {\n    this.context = context;\n    this.forceOverwriteGenerated = forceOverwriteGenerated;\n    this.combination = combination;\n  }\n\n  public async prepare(): Promise<void> {\n    // Remove hidden marker file if it exists\n    const markerPath = ExperimentLoader.getPreparedMarkerPath(this.context.experimentPaths.root);\n    if (await fs.pathExists(markerPath)) {\n      await fs.unlink(markerPath);\n    }\n\n    // Run experiment's prepare logic\n    const { experiments, experimentPathsArray, combinationProvider } = await (await ExperimentLoader\n      .build(this.context.mainModulePath))\n      .instantiateExperiments(this.context.experimentName, this.context.experimentPaths.root);\n    for (const [ i, experiment ] of experiments.entries()) {\n      if (this.combination === undefined || this.combination === i) {\n        this.context.logger.info(`ðŸ§© Preparing experiment combination ${i}`);\n\n        await experiment.prepare(\n          { ...this.context, experimentPaths: experimentPathsArray[i] },\n          this.forceOverwriteGenerated,\n        );\n      }\n    }\n\n    // Create a hidden marker file in generate/ to indicate that this experiment has been successfully prepared\n    await fs.writeFile(markerPath, '', 'utf8');\n  }\n}\n"]}
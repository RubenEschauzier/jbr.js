{"version":3,"file":"TaskClean.js","sourceRoot":"","sources":["TaskClean.ts"],"names":[],"mappings":";;;AAAA,yDAAsD;AAItD;;GAEG;AACH,MAAa,SAAS;IAIpB,YACE,OAAqB,EACrB,YAA2B;QAE3B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,EAAE,WAAW,EAAE,oBAAoB,EAAE,GAAG,MAAM,CAAC,MAAM,mCAAgB;aACxE,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;aACnC,sBAAsB,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;QAC1F,KAAK,MAAM,CAAE,CAAC,EAAE,UAAU,CAAE,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE;YACrD,MAAM,UAAU,CAAC,KAAK,iCAAM,IAAI,CAAC,OAAO,KAAE,eAAe,EAAE,oBAAoB,CAAC,CAAC,CAAC,KAAI,IAAI,CAAC,YAAY,CAAC,CAAC;SAC1G;IACH,CAAC;CACF;AApBD,8BAoBC","sourcesContent":["import { ExperimentLoader } from './ExperimentLoader';\nimport type { ICleanTargets } from './ICleanTargets';\nimport type { ITaskContext } from './ITaskContext';\n\n/**\n * Cleans an experiment.\n */\nexport class TaskClean {\n  private readonly context: ITaskContext;\n  private readonly cleanTargets: ICleanTargets;\n\n  public constructor(\n    context: ITaskContext,\n    cleanTargets: ICleanTargets,\n  ) {\n    this.context = context;\n    this.cleanTargets = cleanTargets;\n  }\n\n  public async clean(): Promise<void> {\n    const { experiments, experimentPathsArray } = await (await ExperimentLoader\n      .build(this.context.mainModulePath))\n      .instantiateExperiments(this.context.experimentName, this.context.experimentPaths.root);\n    for (const [ i, experiment ] of experiments.entries()) {\n      await experiment.clean({ ...this.context, experimentPaths: experimentPathsArray[i] }, this.cleanTargets);\n    }\n  }\n}\n\n"]}
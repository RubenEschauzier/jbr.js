{"version":3,"file":"ProcessHandlerComposite.js","sourceRoot":"","sources":["ProcessHandlerComposite.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,uBAAuB;IAGlC,YAAmB,eAAiC;QAClD,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,MAAM,GAAY,EAAE,CAAC;QAC3B,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,eAAe,EAAE;YAC1C,IAAI;gBACF,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;aACvB;YAAC,OAAO,KAAc,EAAE;gBACvB,MAAM,CAAC,IAAI,CAAS,KAAK,CAAC,CAAC;aAC5B;SACF;QACD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAChE;IACH,CAAC;IAEM,KAAK,CAAC,IAAI;QACf,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,eAAe,EAAE;YAC1C,MAAM,OAAO,CAAC,IAAI,EAAE,CAAC;SACtB;IACH,CAAC;IAEM,KAAK,CAAC,oBAAoB;QAC/B,MAAM,SAAS,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe;aACrD,GAAG,CAAC,cAAc,CAAC,EAAE,CAAC,cAAc,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;QACjE,OAAO,GAAG,EAAE;YACV,KAAK,MAAM,EAAE,IAAI,SAAS,EAAE;gBAC1B,EAAE,EAAE,CAAC;aACN;QACH,CAAC,CAAC;IACJ,CAAC;IAEM,qBAAqB,CAAC,OAAqD;QAChF,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE;YACjD,cAAc,CAAC,qBAAqB,CAAC,OAAO,CAAC,CAAC;SAC/C;IACH,CAAC;IAEM,wBAAwB,CAAC,OAAqD;QACnF,KAAK,MAAM,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE;YACjD,cAAc,CAAC,wBAAwB,CAAC,OAAO,CAAC,CAAC;SAClD;IACH,CAAC;CACF;AAhDD,0DAgDC","sourcesContent":["import type { ProcessHandler } from './ProcessHandler';\n\n/**\n * A process handler that combines an array of process handlers.\n */\nexport class ProcessHandlerComposite implements ProcessHandler {\n  private readonly processHandlers: ProcessHandler[];\n\n  public constructor(processHandlers: ProcessHandler[]) {\n    this.processHandlers = processHandlers;\n  }\n\n  public async close(): Promise<void> {\n    const errors: Error[] = [];\n    for (const handler of this.processHandlers) {\n      try {\n        await handler.close();\n      } catch (error: unknown) {\n        errors.push(<Error> error);\n      }\n    }\n    if (errors.length > 0) {\n      throw new Error(errors.map(error => error.message).join(', '));\n    }\n  }\n\n  public async join(): Promise<void> {\n    for (const handler of this.processHandlers) {\n      await handler.join();\n    }\n  }\n\n  public async startCollectingStats(): Promise<() => void> {\n    const callbacks = await Promise.all(this.processHandlers\n      .map(processHandler => processHandler.startCollectingStats()));\n    return () => {\n      for (const cb of callbacks) {\n        cb();\n      }\n    };\n  }\n\n  public addTerminationHandler(handler: (processName: string, error?: Error) => void): void {\n    for (const processHandler of this.processHandlers) {\n      processHandler.addTerminationHandler(handler);\n    }\n  }\n\n  public removeTerminationHandler(handler: (processName: string, error?: Error) => void): void {\n    for (const processHandler of this.processHandlers) {\n      processHandler.removeTerminationHandler(handler);\n    }\n  }\n}\n"]}
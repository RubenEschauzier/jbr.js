{"version":3,"file":"ProcessHandler.js","sourceRoot":"","sources":["ProcessHandler.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * Handles a started process.\n */\nexport interface ProcessHandler {\n  /**\n   * Stop and clean this process.\n   */\n  close: () => Promise<void>;\n\n  /**\n   * Wait until this container is ended.\n   */\n  join: () => Promise<void>;\n\n  /**\n   * Start collecting runtime statistics into the target stats file.\n   * The returned callback is used to end stat collection.\n   */\n  startCollectingStats: () => Promise<() => void>;\n\n  /**\n   * Register a termination handler.\n   * @param handler A handler that will be invoked when this process terminates.\n   */\n  addTerminationHandler: (handler: (processName: string, error?: Error) => void) => void;\n  /**\n   * Remove a termination listener.\n   * @param handler A registered handler.\n   */\n  removeTerminationHandler: (handler: (processName: string, error?: Error) => void) => void;\n}\n"]}
{"version":3,"file":"ProcessHandlerUtil.js","sourceRoot":"","sources":["ProcessHandlerUtil.ts"],"names":[],"mappings":";;;AAGA;;;;;;GAMG;AACH,SAAgB,oBAAoB,CAAC,cAA8B,EAAE,OAAqB;IACxF,gCAAgC;IAChC,SAAS,kBAAkB,CAAC,WAAmB;QAC7C,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,WAAW,iLAAiL,CAAC,CAAC;QACjO,OAAO,CAAC,eAAe,EAAE,CAAC;IAC5B,CAAC;IACD,cAAc,CAAC,qBAAqB,CAAC,kBAAkB,CAAC,CAAC;IAEzD,2BAA2B;IAC3B,KAAK,UAAU,cAAc;QAC3B,uEAAuE;QACvE,4CAA4C;QAC5C,cAAc,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;QAE5D,sBAAsB;QACtB,MAAM,cAAc,CAAC,KAAK,EAAE,CAAC;IAC/B,CAAC;IACD,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAE7C,gDAAgD;IAChD,OAAO,KAAK,IAAG,EAAE;QACf,8BAA8B;QAC9B,cAAc,CAAC,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;QAE5D,gBAAgB;QAChB,MAAM,cAAc,EAAE,CAAC;IACzB,CAAC,CAAC;AACJ,CAAC;AA3BD,oDA2BC","sourcesContent":["import type { ITaskContext } from '../task/ITaskContext';\nimport type { ProcessHandler } from './ProcessHandler';\n\n/**\n * Utility function to register the proper handlers for a process\n * to make sure it handles early termination and cleanup correctly.\n * The returned callback must be invoked at the end of the experiment, to stop the process in a clean manner.\n * @param processHandler The process handler.\n * @param context The task context.\n */\nexport function secureProcessHandler(processHandler: ProcessHandler, context: ITaskContext): () => Promise<void> {\n  // Register termination listener\n  function terminationHandler(processName: string): void {\n    context.logger.error(`A process (${processName}) exited prematurely.\\nThis may be caused by a software error or insufficient memory being allocated to the system or Docker.\\nPlease inspect the output logs for more details.`);\n    context.closeExperiment();\n  }\n  processHandler.addTerminationHandler(terminationHandler);\n\n  // Register cleanup handler\n  async function cleanupHandler(): Promise<void> {\n    // Before closing the actual processes, remove the termination listener\n    // Otherwise, we may run into infinite loops\n    processHandler.removeTerminationHandler(terminationHandler);\n\n    // Close the processes\n    await processHandler.close();\n  }\n  context.cleanupHandlers.push(cleanupHandler);\n\n  // Return a callback to safely close the process\n  return async() => {\n    // Remove termination listener\n    processHandler.removeTerminationHandler(terminationHandler);\n\n    // Close process\n    await cleanupHandler();\n  };\n}\n"]}
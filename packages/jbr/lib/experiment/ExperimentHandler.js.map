{"version":3,"file":"ExperimentHandler.js","sourceRoot":"","sources":["ExperimentHandler.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAsB,iBAAiB;IAWrC,YAAmB,EAAU,EAAE,mBAA2B;QACxD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,mBAAmB,GAAG,mBAAmB,CAAC;IACjD,CAAC;CAoBF;AAlCD,8CAkCC","sourcesContent":["import type { IExperimentPaths } from '../task/ITaskContext';\nimport type { Experiment } from './Experiment';\n\n/**\n * Handler for a certain type of experiment.\n */\nexport abstract class ExperimentHandler<E extends Experiment> {\n  /**\n   * Unique id of this experiment type.\n   */\n  public readonly id: string;\n  /**\n   * Name of the experiment class.\n   * This will be used to initialize config files.\n   */\n  public readonly experimentClassName: string;\n\n  public constructor(id: string, experimentClassName: string) {\n    this.id = id;\n    this.experimentClassName = experimentClassName;\n  }\n\n  /**\n   * Default parameters that should be added to the 'jbr-experiment.json' file during initialization.\n   * These should correspond to all (required) Components.js parameters for instantiating an experiment.\n   * @param experimentPaths The experiment directories. (guaranteed to exists)\n   */\n  public abstract getDefaultParams(experimentPaths: IExperimentPaths): Record<string, any>;\n\n  /**\n   * Names of possible hooks into the experiment.\n   */\n  public abstract getHookNames(): string[];\n\n  /**\n   * Called upon initializing a new experiment.\n   * @param experimentPaths The experiment directories. (guaranteed to exists)\n   * @param experiment The experiment instance.\n   */\n  public abstract init(experimentPaths: IExperimentPaths, experiment: E): Promise<void>;\n}\n"]}
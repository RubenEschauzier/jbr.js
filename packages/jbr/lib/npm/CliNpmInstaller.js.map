{"version":3,"file":"CliNpmInstaller.js","sourceRoot":"","sources":["CliNpmInstaller.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAqC;AAErC,sDAAmD;AAGnD;;GAEG;AACH,MAAa,eAAe;IAI1B,YAAmB,OAAqB,EAAE,WAAoB;QAC5D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEM,KAAK,CAAC,OAAO,CAAC,GAAW,EAAE,QAAkB,EAAE,UAAkB;QACtE,4BAA4B;QAC5B,IAAI,IAAI,CAAC,WAAW,EAAE;YACpB,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,IAAI,OAAO,CAAC,CAAC;SACjD;QAED,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE;YAClD,SAAS;YACT,GAAG,QAAQ;YACX,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAE,oBAAoB,CAAE,CAAC,CAAC,CAAC,EAAE;SACpD,EAAE;YACD,KAAK,EAAE,MAAM;YACb,QAAQ,EAAE,MAAM;YAChB,GAAG;SACJ,CAAC,CAAC;QACH,IAAI,KAAK,EAAE;YACT,MAAM,KAAK,CAAC;SACb;QACD,IAAI,MAAM,KAAK,CAAC,EAAE;YAChB,IAAI;gBACF,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;gBAC7D,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,yDAAyD,CAAC,CAAC;gBACpF,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;oBAC9B,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,UAAU,GAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,WAAW,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;iBACnH;gBACD,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC9B;YAAC,WAAM;gBACN,sBAAsB;aACvB;YACD,MAAM,IAAI,2BAAY,CAAC,+BAA+B,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,MAAM,EAAE,CAAC,CAAC;SAC1F;IACH,CAAC;IAEM,KAAK,CAAC,iBAAiB,CAAC,KAAa;QAC1C,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,yCAAyC,KAAK,EAAE,CAAC,CAAC;QAC/E,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;QACnC,OAAO,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE,CAAC,CAAC;YACxC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI;YACzB,WAAW,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW;YACvC,IAAI,EAAE,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG;SAC/B,CAAC,CAAC,CAAC;IACN,CAAC;CACF;AAnDD,0CAmDC","sourcesContent":["import * as spawn from 'cross-spawn';\nimport type { ITaskContext } from '../../lib/task/ITaskContext';\nimport { ErrorHandled } from '../cli/ErrorHandled';\nimport type { NpmInstaller } from './NpmInstaller';\n\n/**\n * Installs npm packages by invoking the CLI.\n */\nexport class CliNpmInstaller implements NpmInstaller {\n  private readonly context: ITaskContext;\n  private readonly nextVersion: boolean;\n\n  public constructor(context: ITaskContext, nextVersion: boolean) {\n    this.context = context;\n    this.nextVersion = nextVersion;\n  }\n\n  public async install(cwd: string, packages: string[], scopeError: string): Promise<void> {\n    // Append next tag if needed\n    if (this.nextVersion) {\n      packages = packages.map(pckg => `${pckg}@next`);\n    }\n\n    const { error, status, stderr } = spawn.sync('npm', [\n      'install',\n      ...packages,\n      ...this.nextVersion ? [ '--legacy-peer-deps' ] : [],\n    ], {\n      stdio: 'pipe',\n      encoding: 'utf8',\n      cwd,\n    });\n    if (error) {\n      throw error;\n    }\n    if (status !== 0) {\n      try {\n        const allPackages = await this.fetchPackageNames(scopeError);\n        this.context.logger.warn(`\\nInstalling package failed.\\nAvailable types on npm:\\n`);\n        for (const pckg of allPackages) {\n          this.context.logger.warn(`  - ${pckg.name.slice(`@${scopeError}/`.length)} - ${pckg.description} - ${pckg.link}`);\n        }\n        this.context.logger.warn(``);\n      } catch {\n        // Ignore fetch errors\n      }\n      throw new ErrorHandled(`Npm installation failed for ${packages.join(', ')}:\\n${stderr}`);\n    }\n  }\n\n  public async fetchPackageNames(scope: string): Promise<{ name: string; description: string; link: string }[]> {\n    const response = await fetch(`https://api.npms.io/v2/search?q=scope:${scope}`);\n    const data = await response.json();\n    return data.results.map((result: any) => ({\n      name: result.package.name,\n      description: result.package.description,\n      link: result.package.links.npm,\n    }));\n  }\n}\n"]}
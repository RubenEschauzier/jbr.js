{"version":3,"file":"CommandInit.js","sourceRoot":"","sources":["CommandInit.ts"],"names":[],"mappings":";;;AAEA,8DAA2D;AAC3D,8CAA2F;AAC3F,qDAA6D;AAEhD,QAAA,OAAO,GAAG,oBAAoB,CAAC;AAC/B,QAAA,IAAI,GAAG,8BAA8B,CAAC;AAC5C,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAa,EAAE,CACrD,KAAK;KACF,OAAO,CAAC;IACP,MAAM,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,gCAAgC,EAAE,kBAAkB,EAAE,iBAAiB,EAAE;IAC7G,IAAI,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,wBAAwB,EAAE;IAC5D,KAAK,EAAE;QACL,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,6CAA6C;KACxD;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,SAAS;QACf,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,yCAAyC;KACpD;IACD,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,mDAAmD;KAC9D;CACF,CAAC,CAAC;AAnBM,QAAA,OAAO,WAmBb;AACA,MAAM,OAAO,GAAG,CAAC,IAAyB,EAAiB,EAAE,CAAC,IAAA,+BAAkB,EAAC,IAAI,EAC1F,KAAK,EAAC,OAAqB,EAAE,EAAE;IAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC;IACxC,MAAM,YAAY,GAAG,MAAM,IAAA,+BAAkB,EAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAClE,MAAM,MAAM,GAAG,MAAM,IAAA,+BAAkB,EAAC,mBAAmB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,aAAa,EACpH,KAAK,IAAG,EAAE,CAAC,IAAI,+BAAc,CAC3B,OAAO,EACP,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,IAAI,EACT,MAAM,EACN,IAAI,CAAC,KAAK,EACV,IAAI,CAAC,YAAY,EACjB,YAAY,CACb,CAAC,IAAI,EAAE,CAAC,CAAC;IAEZ,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,kBAAkB,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,kBAAkB,MAAM,CAAC,mBAAmB,EAAE,CAAC,CAAC;IACpI,IAAI,MAAM,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;QAC/B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,oFAAoF,CAAC,CAAC;QAC1G,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,SAAS,EAAE;YACvC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,QAAQ,EAAE,CAAC,CAAC;SACxC;QACD,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,wBAAc,KAAK,CAAC,CAAC;KACpF;AACH,CAAC,CAAC,CAAC;AAvBQ,QAAA,OAAO,WAuBf","sourcesContent":["import type { Argv } from 'yargs';\nimport type { ITaskContext } from '../../task/ITaskContext';\nimport { TaskInitialize } from '../../task/TaskInitialize';\nimport { createNpmInstaller, wrapCommandHandler, wrapVisualProgress } from '../CliHelpers';\nimport { command as commandSetHook } from './CommandSetHook';\n\nexport const command = 'init <type> <name>';\nexport const desc = 'Initializes a new experiment';\nexport const builder = (yargs: Argv<any>): Argv<any> =>\n  yargs\n    .options({\n      target: { type: 'string', describe: 'Experiment directory to create', defaultDescription: 'experiment name' },\n      type: { type: 'string', describe: 'The type of experiment' },\n      force: {\n        type: 'boolean',\n        alias: 'f',\n        describe: 'If existing experiments must be overwritten',\n      },\n      combinations: {\n        type: 'boolean',\n        alias: 'c',\n        describe: 'Creates a combinations-based experiment',\n      },\n      next: {\n        type: 'boolean',\n        describe: 'Install jbr at npm from the experimental next tag',\n      },\n    });\nexport const handler = (argv: Record<string, any>): Promise<void> => wrapCommandHandler(argv,\n  async(context: ITaskContext) => {\n    const target = argv.target || argv.name;\n    const npmInstaller = await createNpmInstaller(context, argv.next);\n    const output = await wrapVisualProgress(`Initializing new${argv.combinations ? ' combinations-based' : ''} experiment`,\n      async() => new TaskInitialize(\n        context,\n        argv.type,\n        argv.name,\n        target,\n        argv.force,\n        argv.combinations,\n        npmInstaller,\n      ).init());\n\n    context.logger.info(`Initialized new${argv.combinations ? ' combinations-based' : ''} experiment in ${output.experimentDirectory}`);\n    if (output.hookNames.length > 0) {\n      context.logger.warn(`\\nThis experiment requires handlers for the following hooks before it can be used:`);\n      for (const hookName of output.hookNames) {\n        context.logger.warn(`  - ${hookName}`);\n      }\n      context.logger.warn(`Initialize these hooks by calling 'jbr ${commandSetHook}'\\n`);\n    }\n  });\n"]}
{"version":3,"file":"CommandSetHook.js","sourceRoot":"","sources":["CommandSetHook.ts"],"names":[],"mappings":";;;AAEA,wDAAqD;AACrD,8CAA2F;AAE9E,QAAA,OAAO,GAAG,2BAA2B,CAAC;AACtC,QAAA,IAAI,GAAG,+CAA+C,CAAC;AAC7D,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAa,EAAE,CAAC,KAAK;KAC1D,OAAO,CAAC;IACP,IAAI,EAAE;QACJ,IAAI,EAAE,SAAS;QACf,QAAQ,EAAE,mDAAmD;KAC9D;CACF,CAAC,CAAC;AANQ,QAAA,OAAO,WAMf;AACE,MAAM,OAAO,GAAG,CAAC,IAAyB,EAAiB,EAAE,CAAC,IAAA,+BAAkB,EAAC,IAAI,EAC1F,KAAK,EAAC,OAAqB,EAAE,EAAE;IAC7B,MAAM,YAAY,GAAG,MAAM,IAAA,+BAAkB,EAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAClE,MAAM,MAAM,GAAG,MAAM,IAAA,+BAAkB,EAAC,4BAA4B,EAClE,KAAK,IAAG,EAAE,CAAC,IAAI,yBAAW,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;IAC/F,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,OAAO,4BAA4B,IAAI,CAAC,IAAI,oBAAoB,OAAO,CAAC,cAAc,GAAG,CAAC,CAAC;IAEhI,IAAI,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;QAClC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,qEAAqE,CAAC,CAAC;QAC3F,KAAK,MAAM,QAAQ,IAAI,MAAM,CAAC,YAAY,EAAE;YAC1C,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,IAAI,QAAQ,EAAE,CAAC,CAAC;SACrD;QACD,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,0CAA0C,eAAO,KAAK,CAAC,CAAC;KAC7E;AACH,CAAC,CAAC,CAAC;AAdQ,QAAA,OAAO,WAcf","sourcesContent":["import type { Argv } from 'yargs';\nimport type { ITaskContext } from '../../task/ITaskContext';\nimport { TaskSetHook } from '../../task/TaskSetHook';\nimport { createNpmInstaller, wrapCommandHandler, wrapVisualProgress } from '../CliHelpers';\n\nexport const command = 'set-hook <hook> <handler>';\nexport const desc = 'Provide a handler for a hook in an experiment';\nexport const builder = (yargs: Argv<any>): Argv<any> => yargs\n  .options({\n    next: {\n      type: 'boolean',\n      describe: 'Install jbr at npm from the experimental next tag',\n    },\n  });\nexport const handler = (argv: Record<string, any>): Promise<void> => wrapCommandHandler(argv,\n  async(context: ITaskContext) => {\n    const npmInstaller = await createNpmInstaller(context, argv.next);\n    const output = await wrapVisualProgress('Setting hook in experiment',\n      async() => new TaskSetHook(context, argv.hook.split('/'), argv.handler, npmInstaller).set());\n    context.logger.info(`Handler '${argv.handler}' has been set for hook '${argv.hook}' in experiment '${context.experimentName}'`);\n\n    if (output.subHookNames.length > 0) {\n      context.logger.warn(`\\nThis hook requires the following sub-hooks before it can be used:`);\n      for (const hookName of output.subHookNames) {\n        context.logger.warn(`  - ${argv.hook}/${hookName}`);\n      }\n      context.logger.warn(`Initialize these hooks by calling 'jbr ${command}'\\n`);\n    }\n  });\n"]}
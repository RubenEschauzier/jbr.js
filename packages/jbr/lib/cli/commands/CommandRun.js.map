{"version":3,"file":"CommandRun.js","sourceRoot":"","sources":["CommandRun.ts"],"names":[],"mappings":";;;AAEA,gDAA6C;AAC7C,8CAAmD;AAEtC,QAAA,OAAO,GAAG,KAAK,CAAC;AAChB,QAAA,IAAI,GAAG,4BAA4B,CAAC;AAC1C,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAa,EAAE,CACrD,KAAK;KACF,OAAO,CAAC;IACP,WAAW,EAAE;QACX,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,wEAAwE;KACnF;CACF,CAAC,CAAC;AARM,QAAA,OAAO,WAQb;AACA,MAAM,OAAO,GAAG,CAAC,IAAyB,EAAiB,EAAE,CAAC,IAAA,+BAAkB,EAAC,IAAI,EAC1F,KAAK,EAAC,OAAqB,EAAE,EAAE,CAAC,IAAI,iBAAO,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AADnE,QAAA,OAAO,WAC4D","sourcesContent":["import type { Argv } from 'yargs';\nimport type { ITaskContext } from '../../task/ITaskContext';\nimport { TaskRun } from '../../task/TaskRun';\nimport { wrapCommandHandler } from '../CliHelpers';\n\nexport const command = 'run';\nexport const desc = 'Run the current experiment';\nexport const builder = (yargs: Argv<any>): Argv<any> =>\n  yargs\n    .options({\n      combination: {\n        type: 'number',\n        alias: 'c',\n        describe: 'The combination id to run. If undefined, all combinations will be run.',\n      },\n    });\nexport const handler = (argv: Record<string, any>): Promise<void> => wrapCommandHandler(argv,\n  async(context: ITaskContext) => new TaskRun(context, argv.combination).run());\n"]}
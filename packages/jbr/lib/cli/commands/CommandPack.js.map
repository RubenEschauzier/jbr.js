{"version":3,"file":"CommandPack.js","sourceRoot":"","sources":["CommandPack.ts"],"names":[],"mappings":";;;AACA,yDAAsD;AAEtD,8CAAmD;AAEtC,QAAA,OAAO,GAAG,MAAM,CAAC;AACjB,QAAA,IAAI,GAAG,4CAA4C,CAAC;AAC1D,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAa,EAAE,CACrD,KAAK;KACF,OAAO,CAAC;IACP,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,sBAAsB;KACjC;CACF,CAAC,CAAC;AARM,QAAA,OAAO,WAQb;AACA,MAAM,OAAO,GAAG,CAAC,IAAyB,EAAiB,EAAE,CAAC,IAAA,+BAAkB,EAAC,IAAI,EAC1F,KAAK,EAAC,OAAqB,EAAE,EAAE,CAAC,IAAI,mBAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AADhE,QAAA,OAAO,WACyD","sourcesContent":["import type { Argv } from 'yargs';\nimport { TaskPack } from '../../../lib/task/TaskPack';\nimport type { ITaskContext } from '../../task/ITaskContext';\nimport { wrapCommandHandler } from '../CliHelpers';\n\nexport const command = 'pack';\nexport const desc = 'Create an archive of the experiment output';\nexport const builder = (yargs: Argv<any>): Argv<any> =>\n  yargs\n    .options({\n      output: {\n        type: 'string',\n        alias: 'o',\n        describe: 'The output file name',\n      },\n    });\nexport const handler = (argv: Record<string, any>): Promise<void> => wrapCommandHandler(argv,\n  async(context: ITaskContext) => new TaskPack(context, argv.output).pack());\n"]}
{"version":3,"file":"CommandGenerateCombinations.js","sourceRoot":"","sources":["CommandGenerateCombinations.ts"],"names":[],"mappings":";;;AAEA,kFAA+E;AAC/E,8CAAuE;AAE1D,QAAA,OAAO,GAAG,uBAAuB,CAAC;AAClC,QAAA,IAAI,GAAG,+CAA+C,CAAC;AAC7D,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAa,EAAE,CACrD,KAAK,CAAC;AADK,QAAA,OAAO,WACZ;AACD,MAAM,OAAO,GAAG,CAAC,IAAyB,EAAiB,EAAE,CAAC,IAAA,+BAAkB,EAAC,IAAI,EAC1F,KAAK,EAAC,OAAqB,EAAE,EAAE;IAC7B,MAAM,YAAY,GAAG,MAAM,IAAA,+BAAkB,EAAC,oCAAoC,EAChF,KAAK,IAAG,EAAE,CAAC,IAAI,mDAAwB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;IAC/D,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,YAAY,CAAC,MAAM,0BAA0B,CAAC,CAAC;AAClF,CAAC,CAAC,CAAC;AALQ,QAAA,OAAO,WAKf","sourcesContent":["import type { Argv } from 'yargs';\nimport type { ITaskContext } from '../../task/ITaskContext';\nimport { TaskGenerateCombinations } from '../../task/TaskGenerateCombinations';\nimport { wrapCommandHandler, wrapVisualProgress } from '../CliHelpers';\n\nexport const command = 'generate-combinations';\nexport const desc = 'Generate combinations of experiment templates';\nexport const builder = (yargs: Argv<any>): Argv<any> =>\n  yargs;\nexport const handler = (argv: Record<string, any>): Promise<void> => wrapCommandHandler(argv,\n  async(context: ITaskContext) => {\n    const combinations = await wrapVisualProgress('Generating experiment combinations',\n      async() => new TaskGenerateCombinations(context).generate());\n    context.logger.info(`Generated ${combinations.length} experiment combinations`);\n  });\n"]}
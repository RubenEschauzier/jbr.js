{"version":3,"file":"FractionalCombinationProvider.js","sourceRoot":"","sources":["FractionalCombinationProvider.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,6BAA6B;IAIxC;;;OAGG;IACH,YAAmB,YAAiC,EAAE,eAAe,GAAG,KAAK;QAC3E,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QACjC,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;IACzC,CAAC;IAEM,qBAAqB;QAC1B,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;CACF;AAhBD,sEAgBC","sourcesContent":["import type { CombinationProvider, FactorCombination } from './CombinationProvider';\n\n/**\n * A direct provision of an array of factor combination.\n */\nexport class FractionalCombinationProvider implements CombinationProvider {\n  private readonly combinations: FactorCombination[];\n  public readonly commonGenerated: boolean;\n\n  /**\n   * @param combinations An array of hashes containing factors mapped to values. @range {json}\n   * @param commonGenerated If the prepare phase is identical across combinations.\n   */\n  public constructor(combinations: FactorCombination[], commonGenerated = false) {\n    this.combinations = combinations;\n    this.commonGenerated = commonGenerated;\n  }\n\n  public getFactorCombinations(): FactorCombination[] {\n    return this.combinations;\n  }\n}\n"]}
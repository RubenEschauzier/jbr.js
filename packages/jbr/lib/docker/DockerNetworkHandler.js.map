{"version":3,"file":"DockerNetworkHandler.js","sourceRoot":"","sources":["DockerNetworkHandler.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,oBAAoB;IAG/B,YAAmB,OAA0B;QAC3C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,MAAM,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7C,CAAC;IAEM,KAAK,CAAC,IAAI;QACf,aAAa;IACf,CAAC;IAEM,KAAK,CAAC,oBAAoB;QAC/B,OAAO,GAAG,EAAE;YACV,aAAa;QACf,CAAC,CAAC;IACJ,CAAC;IAEM,qBAAqB,CAAC,OAAqD;QAChF,aAAa;IACf,CAAC;IAEM,wBAAwB,CAAC,OAAqD;QACnF,aAAa;IACf,CAAC;CACF;AA5BD,oDA4BC","sourcesContent":["import type Dockerode from 'dockerode';\nimport type { ProcessHandler } from '../experiment/ProcessHandler';\n\n/**\n * Process handler for Docker networks\n */\nexport class DockerNetworkHandler implements ProcessHandler {\n  public readonly network: Dockerode.Network;\n\n  public constructor(network: Dockerode.Network) {\n    this.network = network;\n  }\n\n  public async close(): Promise<void> {\n    await this.network.remove({ force: true });\n  }\n\n  public async join(): Promise<void> {\n    // Do nothing\n  }\n\n  public async startCollectingStats(): Promise<() => void> {\n    return () => {\n      // Do nothing\n    };\n  }\n\n  public addTerminationHandler(handler: (processName: string, error?: Error) => void): void {\n    // Do nothing\n  }\n\n  public removeTerminationHandler(handler: (processName: string, error?: Error) => void): void {\n    // Do nothing\n  }\n}\n"]}
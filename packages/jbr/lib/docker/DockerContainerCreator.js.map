{"version":3,"file":"DockerContainerCreator.js","sourceRoot":"","sources":["DockerContainerCreator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,6CAA+B;AAC/B,qEAAkE;AAGlE;;GAEG;AACH,MAAa,sBAAsB;IAGjC,YAAmB,SAAoB;QACrC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,KAAK,CAAC,OAAoC;;QACrD,8BAA8B;QAC9B,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC;YACrD,IAAI,EAAE,OAAO,CAAC,aAAa;YAC3B,QAAQ,EAAE,OAAO,CAAC,aAAa;YAC/B,KAAK,EAAE,OAAO,CAAC,SAAS;YACxB,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,OAAO,CAAC,OAAO;YACpB,YAAY,EAAE,IAAI;YAClB,YAAY,EAAE,IAAI;YAClB,UAAU,kCACL,OAAO,CAAC,UAAU,IAAI,EAAE,GACxB,MAAA,OAAO,CAAC,mBAAmB,0CAAE,YAAY,EAAE,CAC/C;SACF,CAAC,CAAC;QAEH,6BAA6B;QAC7B,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,MAAM,CAAC;YACjC,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,IAAI;SACb,CAAC,CAAC;QAEH,2BAA2B;QAC3B,MAAM,gBAAgB,GAAG,IAAI,+CAAsB,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,aAAa,CAAC,CAAC;QAE3F,uBAAuB;QACvB,IAAI,OAAO,CAAC,WAAW,EAAE;YACvB,4CAA4C;YAC5C,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,OAAO,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;SAC7D;aAAM;YACL,GAAG,CAAC,MAAM,EAAE,CAAC;SACd;QAED,kBAAkB;QAClB,MAAM,SAAS,CAAC,KAAK,EAAE,CAAC;QAExB,OAAO,gBAAgB,CAAC;IAC1B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,MAAM,CAAC,IAAY;QAC9B,MAAM,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,SAAS,EAAE;YACb,IAAI;gBACF,MAAM,SAAS,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aACzC;YAAC,WAAM;gBACN,gBAAgB;aACjB;SACF;IACH,CAAC;CACF;AAjED,wDAiEC","sourcesContent":["import type Dockerode from 'dockerode';\nimport * as fs from 'fs-extra';\nimport { DockerContainerHandler } from './DockerContainerHandler';\nimport type { DockerResourceConstraints } from './DockerResourceConstraints';\n\n/**\n * Conveniently create a Docker container.\n */\nexport class DockerContainerCreator {\n  private readonly dockerode: Dockerode;\n\n  public constructor(dockerode: Dockerode) {\n    this.dockerode = dockerode;\n  }\n\n  /**\n   * Start a container.\n   * @param options Container options\n   */\n  public async start(options: IDockerContainerCreatorArgs): Promise<DockerContainerHandler> {\n    // Initialize Docker container\n    const container = await this.dockerode.createContainer({\n      name: options.containerName,\n      Hostname: options.containerName,\n      Image: options.imageName,\n      Tty: true,\n      Cmd: options.cmdArgs,\n      AttachStdout: true,\n      AttachStderr: true,\n      HostConfig: {\n        ...options.hostConfig || {},\n        ...options.resourceConstraints?.toHostConfig(),\n      },\n    });\n\n    // Attach output of container\n    const out = await container.attach({\n      stream: true,\n      stdout: true,\n      stderr: true,\n    });\n\n    // Create container handler\n    const containerHandler = new DockerContainerHandler(container, out, options.statsFilePath);\n\n    // Write output to logs\n    if (options.logFilePath) {\n      // eslint-disable-next-line import/namespace\n      out.pipe(fs.createWriteStream(options.logFilePath, 'utf8'));\n    } else {\n      out.resume();\n    }\n\n    // Start container\n    await container.start();\n\n    return containerHandler;\n  }\n\n  /**\n   * Remove a container\n   * @param name A container name\n   */\n  public async remove(name: string): Promise<void> {\n    const container = this.dockerode.getContainer(name);\n    if (container) {\n      try {\n        await container.remove({ force: true });\n      } catch {\n        // Ignore errors\n      }\n    }\n  }\n}\n\nexport interface IDockerContainerCreatorArgs {\n  containerName?: string;\n  imageName: string;\n  cmdArgs?: string[];\n  resourceConstraints?: DockerResourceConstraints;\n  hostConfig?: Dockerode.HostConfig;\n  logFilePath?: string;\n  statsFilePath?: string;\n}\n"]}
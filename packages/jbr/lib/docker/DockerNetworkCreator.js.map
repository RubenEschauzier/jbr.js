{"version":3,"file":"DockerNetworkCreator.js","sourceRoot":"","sources":["DockerNetworkCreator.ts"],"names":[],"mappings":";;;AACA,iEAA8D;AAE9D;;GAEG;AACH,MAAa,oBAAoB;IAG/B,YAAmB,SAAoB;QACrC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,MAAM,CAAC,OAAuC;QACzD,OAAO,IAAI,2CAAoB,CAAC,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/E,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,MAAM,CAAC,IAAY;QAC9B,8BAA8B;QAC9B,MAAM,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC;QAErC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,OAAO,EAAE;YACX,IAAI;gBACF,MAAM,OAAO,CAAC,MAAM,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;aACvC;YAAC,WAAM;gBACN,gBAAgB;aACjB;SACF;IACH,CAAC;CACF;AAhCD,oDAgCC","sourcesContent":["import type Dockerode from 'dockerode';\nimport { DockerNetworkHandler } from './DockerNetworkHandler';\n\n/**\n * Conveniently create a Docker network.\n */\nexport class DockerNetworkCreator {\n  private readonly dockerode: Dockerode;\n\n  public constructor(dockerode: Dockerode) {\n    this.dockerode = dockerode;\n  }\n\n  /**\n   * Create a network\n   * @param options Network options\n   */\n  public async create(options: Dockerode.NetworkCreateOptions): Promise<DockerNetworkHandler> {\n    return new DockerNetworkHandler(await this.dockerode.createNetwork(options));\n  }\n\n  /**\n   * Remove a network\n   * @param name A network name\n   */\n  public async remove(name: string): Promise<void> {\n    // First prune unused networks\n    await this.dockerode.pruneNetworks();\n\n    const network = this.dockerode.getNetwork(name);\n    if (network) {\n      try {\n        await network.remove({ force: true });\n      } catch {\n        // Ignore errors\n      }\n    }\n  }\n}\n"]}
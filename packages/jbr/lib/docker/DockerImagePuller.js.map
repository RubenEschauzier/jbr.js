{"version":3,"file":"DockerImagePuller.js","sourceRoot":"","sources":["DockerImagePuller.ts"],"names":[],"mappings":";;;AAEA;;GAEG;AACH,MAAa,iBAAiB;IAG5B,YAAmB,SAAoB;QACrC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACI,KAAK,CAAC,IAAI,CAAC,OAA+B;QAC/C,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QAC/D,MAAM,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACpC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,cAAc,CAAC,WAAW,EAC7C,CAAC,GAAiB,EAAE,GAAU,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAlBD,8CAkBC","sourcesContent":["import type Dockerode from 'dockerode';\n\n/**\n * Conveniently pull a Docker image.\n */\nexport class DockerImagePuller {\n  private readonly dockerode: Dockerode;\n\n  public constructor(dockerode: Dockerode) {\n    this.dockerode = dockerode;\n  }\n\n  /**\n   * Pull an image\n   * @param options Image options\n   */\n  public async pull(options: IDockerImagePullerArgs): Promise<void> {\n    const buildStream = await this.dockerode.pull(options.repoTag);\n    await new Promise((resolve, reject) => {\n      this.dockerode.modem.followProgress(buildStream,\n        (err: Error | null, res: any[]) => err ? reject(err) : resolve(res));\n    });\n  }\n}\n\nexport interface IDockerImagePullerArgs {\n  repoTag: string;\n}\n"]}
{"version":3,"file":"StaticDockerResourceConstraints.js","sourceRoot":"","sources":["StaticDockerResourceConstraints.ts"],"names":[],"mappings":";;;AAIA;;GAEG;AACH,MAAa,+BAA+B;IAW1C,YAAmB,GAA0B,EAAE,MAAgC;QAC7E,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,qBAAqB,CAAC,MAAc;QAChD,MAAM,KAAK,GAAG,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjD,IAAI,CAAC,KAAK,EAAE;YACV,MAAM,IAAI,KAAK,CAAC,4BAA4B,MAAM,GAAG,CAAC,CAAC;SACxD;QACD,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QAC/C,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,UAAU,GAAG,+BAA+B,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QACxE,IAAI,CAAC,UAAU,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,sBAAsB,MAAM,CAAC,IAAI,CAAC,+BAA+B,CAAC,cAAc,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACzJ;QACD,OAAO,QAAQ,GAAG,UAAU,CAAC;IAC/B,CAAC;IAED;;OAEG;IACI,YAAY;QACjB,uCACK,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,MAAO,EAAE,QAAQ,EAAE,IAAI,CAAC,GAAG,CAAC,UAAU,GAAG,IAAK,EAAE,CAAC,CAAC,CAAC,EAAE,GACxF,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,+BAA+B,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,EAChH;IACJ,CAAC;;AA3CH,0EA4CC;AA3CwB,8CAAc,GAA2B;IAC9D,EAAE,EAAE,CAAC;IACL,CAAC,EAAE,CAAC,IAAI,EAAE;IACV,CAAC,EAAE,CAAC,IAAI,EAAE;IACV,CAAC,EAAE,CAAC,IAAI,EAAE;CACX,CAAC","sourcesContent":["/* eslint-disable no-bitwise,id-length */\nimport type Dockerode from 'dockerode';\nimport type { DockerResourceConstraints } from './DockerResourceConstraints';\n\n/**\n * Allows constraints to be placed on Docker container resources.\n */\nexport class StaticDockerResourceConstraints implements DockerResourceConstraints {\n  public static readonly QUANTITY_UNITS: Record<string, number> = {\n    '': 1,\n    k: 1 << 10,\n    m: 1 << 20,\n    g: 1 << 30,\n  };\n\n  public readonly cpu: IDockerCpuConstraints;\n  public readonly memory: IDockerMemoryConstraints;\n\n  public constructor(cpu: IDockerCpuConstraints, memory: IDockerMemoryConstraints) {\n    this.cpu = cpu;\n    this.memory = memory;\n  }\n\n  /**\n   * Convert a given quantity string (with optional unit) to an absolute number.\n   * For example, '10' will be converted to 10, '10k' to '10240', '1m' to 1048576, and so on.\n   * @param amount A quantity string.\n   */\n  public static quantityStringToBytes(amount: string): number {\n    const match = /^([0-9]+)([a-z]?)$/u.exec(amount);\n    if (!match) {\n      throw new Error(`Invalid quantity string '${amount}'`);\n    }\n    const quantity = Number.parseInt(match[1], 10);\n    const unit = match[2];\n    const multiplier = StaticDockerResourceConstraints.QUANTITY_UNITS[unit];\n    if (!multiplier) {\n      throw new Error(`Invalid quantity string unit '${amount}', must be one of '${Object.keys(StaticDockerResourceConstraints.QUANTITY_UNITS).join(', ')}'`);\n    }\n    return quantity * multiplier;\n  }\n\n  /**\n   * Obtain a Docker HostConfig object from the current constraints.\n   */\n  public toHostConfig(): Dockerode.HostConfig {\n    return {\n      ...this.cpu.percentage ? { CpuPeriod: 100_000, CpuQuota: this.cpu.percentage * 1_000 } : {},\n      ...this.memory.limit ? { Memory: StaticDockerResourceConstraints.quantityStringToBytes(this.memory.limit) } : {},\n    };\n  }\n}\n\nexport interface IDockerCpuConstraints {\n  /**\n   * Percentage (0-100) of the total CPU power that can be used.\n   * E.g. when fully consuming 4 cores, this value must be set to 100.\n   */\n  percentage?: number;\n}\n\nexport interface IDockerMemoryConstraints {\n  /**\n   * Memory usage limit, e.g. '10m', '1g'.\n   */\n  limit?: string;\n}\n"]}
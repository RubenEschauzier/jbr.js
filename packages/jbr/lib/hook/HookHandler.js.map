{"version":3,"file":"HookHandler.js","sourceRoot":"","sources":["HookHandler.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAsB,WAAW;IAY/B,YAAmB,EAAU,EAAE,aAAqB;QAClD,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;IACrC,CAAC;CAoBF;AAnCD,kCAmCC","sourcesContent":["import type { IExperimentPaths } from '../..';\nimport type { Hook } from './Hook';\n\n/**\n * Handler for a certain type of experiment hook.\n */\nexport abstract class HookHandler<H extends Hook> {\n  /**\n   * Unique id of this experiment hook type.\n   */\n  public readonly id: string;\n\n  /**\n   * Name of the experiment hook class.\n   * This will be used to initialize config files.\n   */\n  public readonly hookClassName: string;\n\n  public constructor(id: string, hookClassName: string) {\n    this.id = id;\n    this.hookClassName = hookClassName;\n  }\n\n  /**\n   * Default parameters that should be added to the 'jbr-experiment.json' file during initialization.\n   * These should correspond to all (required) Components.js parameters for instantiating an experiment.\n   * @param experimentPaths The experiment directories. (guaranteed to exists)\n   */\n  public abstract getDefaultParams(experimentPaths: IExperimentPaths): Record<string, any>;\n\n  /**\n   * Names of possible sub-hooks into the hook.\n   */\n  public abstract getSubHookNames(): string[];\n\n  /**\n   * Called upon initializing a new experiment.\n   * @param experimentPaths The experiment directories. (guaranteed to exists)\n   * @param hookHandler The experiment hook handler instance.\n   */\n  public abstract init(experimentPaths: IExperimentPaths, hookHandler: H): Promise<void>;\n}\n"]}
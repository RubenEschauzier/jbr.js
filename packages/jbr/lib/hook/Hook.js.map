{"version":3,"file":"Hook.js","sourceRoot":"","sources":["Hook.ts"],"names":[],"mappings":"","sourcesContent":["import type { ProcessHandler } from '../experiment/ProcessHandler';\nimport type { ICleanTargets } from '../task/ICleanTargets';\nimport type { ITaskContext } from '../task/ITaskContext';\n\nexport interface Hook {\n  /**\n   * Called when data needs to be prepared for an experiment hook.\n   * @param context The task context.\n   * @param forceOverwriteGenerated If the generated directory should be overridden.\n   */\n  prepare: (context: ITaskContext, forceOverwriteGenerated: boolean) => Promise<void>;\n\n  /**\n   * Called to start an experiment hook.\n   * @param context The task context.\n   * @param options Custom start options.\n   * @return A process handler.\n   */\n  start: (context: ITaskContext, options?: IHookStartOptions) => Promise<ProcessHandler>;\n\n  /**\n   * Called when a hook needs to be cleaned up.\n   * @param context The task context.\n   * @param cleanTargets What parts of the experiment that need cleaning.\n   */\n  clean: (context: ITaskContext, cleanTargets: ICleanTargets) => Promise<void>;\n}\n\nexport interface IHookStartOptions {\n  docker?: { network?: string };\n}\n"]}
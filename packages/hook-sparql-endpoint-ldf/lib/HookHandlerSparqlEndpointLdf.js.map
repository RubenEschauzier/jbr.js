{"version":3,"file":"HookHandlerSparqlEndpointLdf.js","sourceRoot":"","sources":["HookHandlerSparqlEndpointLdf.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,gDAAwB;AACxB,6CAA+B;AAE/B,6BAAkC;AAClC,mEAAgE;AAEhE;;GAEG;AACH,MAAa,4BAA6B,SAAQ,iBAAkC;IAClF;QACE,KAAK,CAAC,qBAAqB,EAAE,6CAAqB,CAAC,IAAI,CAAC,CAAC;IAC3D,CAAC;IAEM,gBAAgB,CAAC,eAAiC;QACvD,OAAO;YACL,UAAU,EAAE,yCAAyC;YACrD,eAAe,EAAE,+CAA+C;YAChE,mBAAmB,EAAE;gBACnB,OAAO,EAAE,iCAAiC;gBAC1C,cAAc,EAAE,GAAG;aACpB;YACD,MAAM,EAAE,8BAA8B;YACtC,UAAU,EAAE,IAAK;YACjB,SAAS,EAAE,IAAK;YAChB,OAAO,EAAE,CAAC;YACV,SAAS,EAAE,IAAK;YAChB,OAAO,EAAE,uBAAuB;SACjC,CAAC;IACJ,CAAC;IAEM,eAAe;QACpB,OAAO,CAAE,6BAA6B,CAAE,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,IAAI,CAAC,eAAiC,EAAE,WAAkC;QACrF,+BAA+B;QAC/B,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,EAAE;YACzE,MAAM,EAAE,CAAC,KAAK,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC,CAAC;SACjE;QACD,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,aAAa,EAAE,uBAAuB,CAAC,EACzF,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC,CAAC;QAC5E,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,aAAa,EAAE,6BAA6B,CAAC,EAC/F,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,aAAa,EAAE,6BAA6B,CAAC,CAAC,CAAC;QAElF,2BAA2B;QAC3B,IAAI,CAAC,MAAM,EAAE,CAAC,UAAU,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE;YAC1D,MAAM,EAAE,CAAC,KAAK,CAAC,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;SAClD;QACD,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,wBAAwB,CAAC,EACpF,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,wBAAwB,CAAC,CAAC,CAAC;QAC9D,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,YAAY,CAAC,EACxE,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAC;QAClD,MAAM,EAAE,CAAC,QAAQ,CAAC,cAAI,CAAC,IAAI,CAAC,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,eAAe,CAAC,EAC3E,cAAI,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC;IACvD,CAAC;CACF;AA/CD,oEA+CC","sourcesContent":["import Path from 'path';\nimport * as fs from 'fs-extra';\nimport type { IExperimentPaths } from 'jbr';\nimport { HookHandler } from 'jbr';\nimport { HookSparqlEndpointLdf } from './HookSparqlEndpointLdf';\n\n/**\n * Hook handler for a LDF server-based SPARQL endpoint.\n */\nexport class HookHandlerSparqlEndpointLdf extends HookHandler<HookSparqlEndpointLdf> {\n  public constructor() {\n    super('sparql-endpoint-ldf', HookSparqlEndpointLdf.name);\n  }\n\n  public getDefaultParams(experimentPaths: IExperimentPaths): Record<string, any> {\n    return {\n      dockerfile: 'input/dockerfiles/Dockerfile-ldf-server',\n      dockerfileCache: 'input/dockerfiles/Dockerfile-ldf-server-cache',\n      resourceConstraints: {\n        '@type': 'StaticDockerResourceConstraints',\n        cpu_percentage: 100,\n      },\n      config: 'input/config-ldf-server.json',\n      portServer: 2_999,\n      portCache: 3_000,\n      workers: 4,\n      maxMemory: 8_192,\n      dataset: 'generated/dataset.hdt',\n    };\n  }\n\n  public getSubHookNames(): string[] {\n    return [ 'hookSparqlEndpointLdfEngine' ];\n  }\n\n  public async init(experimentPaths: IExperimentPaths, hookHandler: HookSparqlEndpointLdf): Promise<void> {\n    // Create Dockerfile for server\n    if (!await fs.pathExists(Path.join(experimentPaths.input, 'dockerfiles'))) {\n      await fs.mkdir(Path.join(experimentPaths.input, 'dockerfiles'));\n    }\n    await fs.copyFile(Path.join(__dirname, 'templates', 'dockerfiles', 'Dockerfile-ldf-server'),\n      Path.join(experimentPaths.input, 'dockerfiles', 'Dockerfile-ldf-server'));\n    await fs.copyFile(Path.join(__dirname, 'templates', 'dockerfiles', 'Dockerfile-ldf-server-cache'),\n      Path.join(experimentPaths.input, 'dockerfiles', 'Dockerfile-ldf-server-cache'));\n\n    // Create config for server\n    if (!await fs.pathExists(Path.join(experimentPaths.input))) {\n      await fs.mkdir(Path.join(experimentPaths.input));\n    }\n    await fs.copyFile(Path.join(__dirname, 'templates', 'input', 'config-ldf-server.json'),\n      Path.join(experimentPaths.input, 'config-ldf-server.json'));\n    await fs.copyFile(Path.join(__dirname, 'templates', 'input', 'nginx.conf'),\n      Path.join(experimentPaths.input, 'nginx.conf'));\n    await fs.copyFile(Path.join(__dirname, 'templates', 'input', 'nginx-default'),\n      Path.join(experimentPaths.input, 'nginx-default'));\n  }\n}\n"]}
{"version":3,"file":"HookSparqlEndpointLdf.js","sourceRoot":"","sources":["HookSparqlEndpointLdf.ts"],"names":[],"mappings":"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","sourcesContent":["import Path from 'path';\nimport { ProcessHandlerComposite } from 'jbr';\nimport type { ITaskContext, DockerResourceConstraints,\n  ProcessHandler, Hook, IHookStartOptions, ICleanTargets } from 'jbr';\n\n/**\n * A hook instance for a LDF server-based SPARQL endpoint.\n */\nexport class HookSparqlEndpointLdf implements Hook {\n  public readonly dockerfile: string;\n  public readonly dockerfileCache: string;\n  public readonly resourceConstraints: DockerResourceConstraints;\n  public readonly config: string;\n  public readonly portServer: number;\n  public readonly portCache: number;\n  public readonly workers: number;\n  public readonly maxMemory: number;\n  public readonly dataset: string;\n  public readonly hookSparqlEndpointLdfEngine: Hook;\n\n  public constructor(\n    dockerfile: string,\n    dockerfileCache: string,\n    resourceConstraints: DockerResourceConstraints,\n    config: string,\n    portServer: number,\n    portCache: number,\n    workers: number,\n    maxMemory: number,\n    dataset: string,\n    hookSparqlEndpointLdfEngine: Hook,\n  ) {\n    this.dockerfile = dockerfile;\n    this.dockerfileCache = dockerfileCache;\n    this.resourceConstraints = resourceConstraints;\n    this.config = config;\n    this.portServer = portServer;\n    this.portCache = portCache;\n    this.workers = workers;\n    this.maxMemory = maxMemory;\n    this.dataset = dataset;\n    this.hookSparqlEndpointLdfEngine = hookSparqlEndpointLdfEngine;\n  }\n\n  public getDockerImageName(context: ITaskContext, type: string): string {\n    return context.docker.imageBuilder.getImageName(context, `sparql-endpoint-ldf-${type}`);\n  }\n\n  public async prepare(context: ITaskContext, forceOverwriteGenerated: boolean): Promise<void> {\n    // Build server Dockerfile\n    context.logger.info(`Building LDF server Docker image`);\n    await context.docker.imageBuilder.build({\n      cwd: context.experimentPaths.root,\n      dockerFile: this.dockerfile,\n      auxiliaryFiles: [ this.config ],\n      imageName: this.getDockerImageName(context, 'server'),\n      buildArgs: {\n        SERVER_CONFIG: this.config,\n        SERVER_WORKERS: `${this.workers}`,\n        MAX_MEMORY: `${this.maxMemory}`,\n      },\n      logger: context.logger,\n    });\n\n    // Build cache Dockerfile\n    context.logger.info(`Building LDF server cache Docker image`);\n    await context.docker.imageBuilder.build({\n      cwd: context.experimentPaths.root,\n      dockerFile: this.dockerfileCache,\n      imageName: this.getDockerImageName(context, 'cache'),\n      logger: context.logger,\n    });\n\n    // Prepare LDF engine\n    context.logger.info(`Preparing LDF engine hook`);\n    await this.hookSparqlEndpointLdfEngine.prepare(context, forceOverwriteGenerated);\n  }\n\n  public async start(context: ITaskContext, options?: IHookStartOptions): Promise<ProcessHandler> {\n    // Create shared network\n    const networkHandler = options?.docker?.network ?\n      undefined :\n      await context.docker.networkCreator.create({ Name: this.getDockerImageName(context, 'network') });\n    const network = options?.docker?.network || networkHandler!.network.id;\n\n    // Determine dataset path\n    let datasetPath = this.dataset;\n    if (datasetPath.startsWith('generated/')) {\n      datasetPath = Path.join(context.experimentPaths.generated, datasetPath.slice(10));\n    } else {\n      datasetPath = Path.join(context.experimentPaths.root, this.dataset);\n    }\n\n    // Start LDF server\n    const serverHandler = await context.docker.containerCreator.start({\n      containerName: 'ldfserver',\n      imageName: this.getDockerImageName(context, 'server'),\n      resourceConstraints: this.resourceConstraints,\n      hostConfig: {\n        Binds: [\n          `${datasetPath}:/data/dataset.hdt`,\n          `${datasetPath}.index.v1-1:/data/dataset.hdt.index.v1-1`,\n        ],\n        PortBindings: {\n          '3000/tcp': [\n            { HostPort: `${this.portServer}` },\n          ],\n        },\n        NetworkMode: network,\n      },\n      logFilePath: Path.join(context.experimentPaths.output, 'logs', 'sparql-endpoint-ldf-server.txt'),\n      statsFilePath: Path.join(context.experimentPaths.output, 'stats-sparql-endpoint-ldf-server.csv'),\n    });\n\n    // Start cache proxy\n    const cacheHandler = await context.docker.containerCreator.start({\n      containerName: 'cache',\n      imageName: this.getDockerImageName(context, 'cache'),\n      resourceConstraints: this.resourceConstraints,\n      hostConfig: {\n        Binds: [\n          // Ideally, we do this at build time, but impossible due to https://github.com/apocas/dockerode/issues/553\n          `${Path.join(context.experimentPaths.input, 'nginx-default')}:/etc/nginx/sites-enabled/default`,\n          `${Path.join(context.experimentPaths.input, 'nginx.conf')}:/etc/nginx/nginx.conf`,\n        ],\n        PortBindings: {\n          '80/tcp': [\n            { HostPort: `${this.portCache}` },\n          ],\n        },\n        NetworkMode: network,\n      },\n      logFilePath: Path.join(context.experimentPaths.output, 'logs', 'sparql-endpoint-ldf-cache.txt'),\n      statsFilePath: Path.join(context.experimentPaths.output, 'stats-sparql-endpoint-ldf-cache.csv'),\n    });\n\n    // Start LDF engine\n    const ldfEngineHandler = await this.hookSparqlEndpointLdfEngine.start(context, { docker: { network }});\n\n    return new ProcessHandlerComposite([\n      ldfEngineHandler,\n      cacheHandler,\n      serverHandler,\n      ...networkHandler ? [ networkHandler ] : [],\n    ]);\n  }\n\n  public async clean(context: ITaskContext, cleanTargets: ICleanTargets): Promise<void> {\n    await this.hookSparqlEndpointLdfEngine.clean(context, cleanTargets);\n\n    if (cleanTargets.docker) {\n      await context.docker.networkCreator.remove(this.getDockerImageName(context, 'network'));\n      await context.docker.containerCreator.remove('ldfserver');\n      await context.docker.containerCreator.remove('cache');\n    }\n  }\n}\n"]}
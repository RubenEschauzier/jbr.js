"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancementHandlerPersonNamesCities = void 0;
const EnhancementHandlerUtils_1 = require("./EnhancementHandlerUtils");
/**
 * Generate additional names for existing people where the malicious creator refers to a city.
 * Cities will be selected based on the city the random person is located in.
 */
class EnhancementHandlerPersonNamesCities {
    /**
     * @param chance The chance for a name to be generated.
     *               The number of new names will be the number of people times this chance,
     *               where names are randomly assigned to names. @range {double}
     * @param parameterEmitter An optional parameter emitter.
     */
    constructor(chance, parameterEmitter) {
        var _a;
        this.chance = chance;
        this.parameterEmitter = parameterEmitter;
        (_a = this.parameterEmitter) === null || _a === void 0 ? void 0 : _a.emitHeader(['person', 'cityMalicious']);
    }
    generate(writeStream, context) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const namesLength = this.chance * context.people.length;
            for (let i = 0; i < namesLength; i++) {
                // Determine people
                const person = context.dataSelector.selectArrayElement(context.people);
                const cityMalicious = context.peopleLocatedInCities[person.value];
                if (!cityMalicious) {
                    continue;
                }
                // Create resource
                const resource = context.rdfObjectLoader.createCompactedResource({
                    '@id': person.value,
                    type: 'snvoc:Person',
                    'snvoc:firstName': '"Zulma"',
                    'snvoc:lastName': '"Tulma"',
                    'snvoc:hasMaliciousCreator': cityMalicious,
                });
                for (const quad of resource.toQuads(undefined, undefined, { [cityMalicious.value]: true })) {
                    yield (0, EnhancementHandlerUtils_1.writeSafe)(writeStream, quad);
                }
                // Emit parameters
                (_a = this.parameterEmitter) === null || _a === void 0 ? void 0 : _a.emitRow([
                    person.value,
                    cityMalicious.value,
                ]);
            }
            (_b = this.parameterEmitter) === null || _b === void 0 ? void 0 : _b.flush();
        });
    }
}
exports.EnhancementHandlerPersonNamesCities = EnhancementHandlerPersonNamesCities;
//# sourceMappingURL=EnhancementHandlerPersonNamesCities.js.map
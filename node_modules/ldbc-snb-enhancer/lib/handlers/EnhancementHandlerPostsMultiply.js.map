{"version":3,"file":"EnhancementHandlerPostsMultiply.js","sourceRoot":"","sources":["EnhancementHandlerPostsMultiply.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,uDAA+C;AAC/C,uEAAsD;AAItD,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,+BAA+B;IAG1C;;OAEG;IACH,YAAmB,MAAc;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEY,QAAQ,CAAC,WAAkC,EAAE,OAA4B;;YACpF,KAAK,MAAM,CAAE,OAAO,EAAE,KAAK,CAAE,IAAI,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;gBACrE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACpC,MAAM,WAAW,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,OAAO,QAAQ,CAAC,EAAE,CAAC,CAAC;oBACxD,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;wBACxB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;wBACxB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;4BACvC,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,KAAK,QAAQ,CAAC,EAAE,CAAC,CAAC;yBAC/C;6BAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;4BACnD,KAAK,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,KAAK,SAAS,CAAC,EAAE,CAAC,CAAC;yBAChD;wBACD,MAAM,IAAA,mCAAS,EAAC,WAAW,EAAE,EAAE,CAAC,IAAI,CAClC,WAAW,EACX,IAAI,CAAC,SAAS,EACd,KAAK,EACL,IAAI,CAAC,KAAK,CACX,CAAC,CAAC;qBACJ;iBACF;aACF;QACH,CAAC;KAAA;CACF;AA/BD,0EA+BC","sourcesContent":["import type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { writeSafe } from './EnhancementHandlerUtils';\nimport type { IEnhancementContext } from './IEnhancementContext';\nimport type { IEnhancementHandler } from './IEnhancementHandler';\n\nconst DF = new DataFactory();\n\n/**\n * Multiply the number of posts with a given amount.\n */\nexport class EnhancementHandlerPostsMultiply implements IEnhancementHandler {\n  private readonly factor: number;\n\n  /**\n   * @param factor The number of posts to multiply.\n   */\n  public constructor(factor: number) {\n    this.factor = factor;\n  }\n\n  public async generate(writeStream: RDF.Stream & Writable, context: IEnhancementContext): Promise<void> {\n    for (const [ subject, quads ] of Object.entries(context.postsDetails)) {\n      for (let i = 0; i < this.factor; i++) {\n        const subjectThis = DF.namedNode(`${subject}00000${i}`);\n        for (const quad of quads) {\n          let value = quad.object;\n          if (quad.predicate.value.endsWith('id')) {\n            value = DF.literal(`${value.value}00000${i}`);\n          } else if (quad.predicate.value.endsWith('content')) {\n            value = DF.literal(`${value.value} COPY ${i}`);\n          }\n          await writeSafe(writeStream, DF.quad(\n            subjectThis,\n            quad.predicate,\n            value,\n            quad.graph,\n          ));\n        }\n      }\n    }\n  }\n}\n"]}
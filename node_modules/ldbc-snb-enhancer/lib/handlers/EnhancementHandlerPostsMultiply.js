"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancementHandlerPostsMultiply = void 0;
const rdf_data_factory_1 = require("rdf-data-factory");
const EnhancementHandlerUtils_1 = require("./EnhancementHandlerUtils");
const DF = new rdf_data_factory_1.DataFactory();
/**
 * Multiply the number of posts with a given amount.
 */
class EnhancementHandlerPostsMultiply {
    /**
     * @param factor The number of posts to multiply.
     */
    constructor(factor) {
        this.factor = factor;
    }
    generate(writeStream, context) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const [subject, quads] of Object.entries(context.postsDetails)) {
                for (let i = 0; i < this.factor; i++) {
                    const subjectThis = DF.namedNode(`${subject}00000${i}`);
                    for (const quad of quads) {
                        let value = quad.object;
                        if (quad.predicate.value.endsWith('id')) {
                            value = DF.literal(`${value.value}00000${i}`);
                        }
                        else if (quad.predicate.value.endsWith('content')) {
                            value = DF.literal(`${value.value} COPY ${i}`);
                        }
                        yield (0, EnhancementHandlerUtils_1.writeSafe)(writeStream, DF.quad(subjectThis, quad.predicate, value, quad.graph));
                    }
                }
            }
        });
    }
}
exports.EnhancementHandlerPostsMultiply = EnhancementHandlerPostsMultiply;
//# sourceMappingURL=EnhancementHandlerPostsMultiply.js.map
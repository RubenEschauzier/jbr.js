{"version":3,"file":"EnhancementHandlerComments.js","sourceRoot":"","sources":["EnhancementHandlerComments.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,uEAAsD;AAItD;;GAEG;AACH,MAAa,0BAA0B;IAGrC;;;;OAIG;IACH,YAAmB,MAAc;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEY,QAAQ,CAAC,WAAkC,EAAE,OAA4B;;YACpF,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;YACtD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;gBAClC,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvE,MAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAChF,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACpE,MAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,uBAAuB,CAAC;oBAC/D,KAAK,EAAE,kBAAkB,CAAC,EAAE;oBAC5B,IAAI,EAAE,eAAe;oBACrB,UAAU,EAAE,CAAC;oBACb,kBAAkB,EAAE,MAAM;oBAC1B,2BAA2B,EAAE,eAAe;oBAC5C,oBAAoB,EAAE,4BAA4B;oBAClD,kBAAkB,EAAE,mBAAmB;oBACvC,mBAAmB,EAAE,WAAW;oBAChC,eAAe,EAAE,qBAAqB;oBACtC,cAAc,EAAE,MAAM;oBACtB,eAAe,EAAE,IAAI;oBACrB,gBAAgB,EAAE,MAAM;oBACxB,iBAAiB,EAAE,qCAAqC;oBACxD,cAAc,EAAE,yDAAyD;iBAC1E,CAAC,CAAC;gBACH,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;oBACrC,MAAM,IAAA,mCAAS,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBACpC;aACF;QACH,CAAC;KAAA;CACF;AAvCD,gEAuCC","sourcesContent":["import type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport { writeSafe } from './EnhancementHandlerUtils';\nimport type { IEnhancementContext } from './IEnhancementContext';\nimport type { IEnhancementHandler } from './IEnhancementHandler';\n\n/**\n * Generate comments and assign them to existing people as reply to existing posts.\n */\nexport class EnhancementHandlerComments implements IEnhancementHandler {\n  private readonly chance: number;\n\n  /**\n   * @param chance The chance for comments to be generated.\n   *               The number of comments will be the number of people times this chance,\n   *               where people are randomly assigned to comments. @range {double}\n   */\n  public constructor(chance: number) {\n    this.chance = chance;\n  }\n\n  public async generate(writeStream: RDF.Stream & Writable, context: IEnhancementContext): Promise<void> {\n    const postCount = this.chance * context.people.length;\n    for (let i = 0; i < postCount; i++) {\n      const person = context.dataSelector.selectArrayElement(context.people);\n      const personMalicious = context.dataSelector.selectArrayElement(context.people);\n      const post = context.dataSelector.selectArrayElement(context.posts);\n      const resource = context.rdfObjectLoader.createCompactedResource({\n        '@id': `sn:comment-fake${i}`,\n        type: 'snvoc:Comment',\n        'snvoc:id': i,\n        'snvoc:hasCreator': person,\n        'snvoc:hasMaliciousCreator': personMalicious,\n        'snvoc:creationDate': '\"2021-02-22T10:39:31.595Z\"',\n        'snvoc:locationIP': '\"200.200.200.200\"',\n        'snvoc:browserUsed': '\"Firefox\"',\n        'snvoc:content': '\"Tomatoes are blue\"',\n        'snvoc:length': '\"17\"',\n        'snvoc:replyOf': post,\n        'snvoc:language': '\"en\"',\n        'snvoc:locatedIn': 'http://dbpedia.org/resource/Belgium',\n        'snvoc:hasTag': 'http://www.ldbc.eu/ldbc_socialnet/1.0/tag/Georges_Bizet',\n      });\n      for (const quad of resource.toQuads()) {\n        await writeSafe(writeStream, quad);\n      }\n    }\n  }\n}\n"]}
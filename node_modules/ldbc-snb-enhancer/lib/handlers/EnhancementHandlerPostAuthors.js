"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancementHandlerPostAuthors = void 0;
const EnhancementHandlerUtils_1 = require("./EnhancementHandlerUtils");
/**
 * Generate additional authors for existing posts.
 */
class EnhancementHandlerPostAuthors {
    /**
     * @param chance The chance for a post author to be generated.
     *               The number of new post authors will be the number of posts times this chance,
     *               where authors are randomly assigned to posts. @range {double}
     */
    constructor(chance) {
        this.chance = chance;
    }
    generate(writeStream, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const contentLength = this.chance * context.posts.length;
            for (let i = 0; i < contentLength; i++) {
                const post = context.dataSelector.selectArrayElement(context.posts);
                const person = context.dataSelector.selectArrayElement(context.people);
                const personMalicious = context.dataSelector.selectArrayElement(context.people);
                const resource = context.rdfObjectLoader.createCompactedResource({
                    '@id': post.value,
                    'snvoc:id': Number.parseInt(post.value.slice(post.value.lastIndexOf('post') + 4), 10),
                    'snvoc:hasCreator': person,
                    'snvoc:hasMaliciousCreator': personMalicious,
                });
                for (const quad of resource.toQuads()) {
                    yield (0, EnhancementHandlerUtils_1.writeSafe)(writeStream, quad);
                }
            }
        });
    }
}
exports.EnhancementHandlerPostAuthors = EnhancementHandlerPostAuthors;
//# sourceMappingURL=EnhancementHandlerPostAuthors.js.map
{"version":3,"file":"EnhancementHandlerPostAuthors.js","sourceRoot":"","sources":["EnhancementHandlerPostAuthors.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,uEAAsD;AAItD;;GAEG;AACH,MAAa,6BAA6B;IAGxC;;;;OAIG;IACH,YAAmB,MAAc;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEY,QAAQ,CAAC,WAAkC,EAAE,OAA4B;;YACpF,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC;YACzD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,EAAE,EAAE;gBACtC,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACpE,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvE,MAAM,eAAe,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAChF,MAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,uBAAuB,CAAC;oBAC/D,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC;oBACrF,kBAAkB,EAAE,MAAM;oBAC1B,2BAA2B,EAAE,eAAe;iBAC7C,CAAC,CAAC;gBACH,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,OAAO,EAAE,EAAE;oBACrC,MAAM,IAAA,mCAAS,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBACpC;aACF;QACH,CAAC;KAAA;CACF;AA7BD,sEA6BC","sourcesContent":["import type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport { writeSafe } from './EnhancementHandlerUtils';\nimport type { IEnhancementContext } from './IEnhancementContext';\nimport type { IEnhancementHandler } from './IEnhancementHandler';\n\n/**\n * Generate additional authors for existing posts.\n */\nexport class EnhancementHandlerPostAuthors implements IEnhancementHandler {\n  private readonly chance: number;\n\n  /**\n   * @param chance The chance for a post author to be generated.\n   *               The number of new post authors will be the number of posts times this chance,\n   *               where authors are randomly assigned to posts. @range {double}\n   */\n  public constructor(chance: number) {\n    this.chance = chance;\n  }\n\n  public async generate(writeStream: RDF.Stream & Writable, context: IEnhancementContext): Promise<void> {\n    const contentLength = this.chance * context.posts.length;\n    for (let i = 0; i < contentLength; i++) {\n      const post = context.dataSelector.selectArrayElement(context.posts);\n      const person = context.dataSelector.selectArrayElement(context.people);\n      const personMalicious = context.dataSelector.selectArrayElement(context.people);\n      const resource = context.rdfObjectLoader.createCompactedResource({\n        '@id': post.value,\n        'snvoc:id': Number.parseInt(post.value.slice(post.value.lastIndexOf('post') + 4), 10),\n        'snvoc:hasCreator': person,\n        'snvoc:hasMaliciousCreator': personMalicious,\n      });\n      for (const quad of resource.toQuads()) {\n        await writeSafe(writeStream, quad);\n      }\n    }\n  }\n}\n"]}
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancementHandlerVocabularyPredicateDomain = void 0;
const rdf_data_factory_1 = require("rdf-data-factory");
const EnhancementHandlerUtils_1 = require("./EnhancementHandlerUtils");
const DF = new rdf_data_factory_1.DataFactory();
/**
 * Generates vocabulary information about the domain of a specific predicate
 */
class EnhancementHandlerVocabularyPredicateDomain {
    /**
     * @param classIRI class that is domain for the given predicate
     * @param predicateIRI predicate to be associated with the class
     */
    constructor(classIRI, predicateIRI) {
        this.classIRI = classIRI;
        this.predicateIRI = predicateIRI;
    }
    generate(writeStream, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const rdf_predicate = DF.namedNode(this.predicateIRI);
            const rdfs_domain = DF.namedNode('http://www.w3.org/2000/01/rdf-schema#domain');
            const rdfs_class = DF.namedNode(this.classIRI);
            yield (0, EnhancementHandlerUtils_1.writeSafe)(writeStream, DF.quad(rdf_predicate, rdfs_domain, rdfs_class));
        });
    }
}
exports.EnhancementHandlerVocabularyPredicateDomain = EnhancementHandlerVocabularyPredicateDomain;
//# sourceMappingURL=EnhancementHandlerVocabularyPredicateDomain.js.map
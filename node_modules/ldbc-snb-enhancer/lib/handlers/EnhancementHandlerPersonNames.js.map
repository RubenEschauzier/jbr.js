{"version":3,"file":"EnhancementHandlerPersonNames.js","sourceRoot":"","sources":["EnhancementHandlerPersonNames.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,uEAAsD;AAItD;;;GAGG;AACH,MAAa,6BAA6B;IAIxC;;;;;OAKG;IACH,YAAmB,MAAc,EAAE,gBAAoC;;QACrE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,MAAA,IAAI,CAAC,gBAAgB,0CAAE,UAAU,CAAC,CAAE,QAAQ,EAAE,iBAAiB,EAAE,oBAAoB,CAAE,CAAC,CAAC;IAC3F,CAAC;IAES,gBAAgB,CAAC,MAAqB,EAAE,OAA4B;QAE5E,MAAM,YAAY,GAAG,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACzD,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO;SACR;QACD,MAAM,OAAO,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,YAAY,CAAC,CAAC;QACtE,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACtD,IAAI,CAAC,UAAU,EAAE;YACf,OAAO;SACR;QACD,OAAO;YACL,eAAe,EAAE,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,UAAU,CAAC;YACpE,kBAAkB,EAAE,OAAO;SAC5B,CAAC;IACJ,CAAC;IAEY,QAAQ,CAAC,WAAkC,EAAE,OAA4B;;;YACpF,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBACpC,mBAAmB;gBACnB,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvE,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;gBAC7D,IAAI,CAAC,aAAa,IAAI,aAAa,CAAC,eAAe,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE;oBAClE,SAAS;iBACV;gBACD,MAAM,EAAE,eAAe,EAAE,kBAAkB,EAAE,GAAG,aAAa,CAAC;gBAE9D,kBAAkB;gBAClB,MAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,uBAAuB,CAAC;oBAC/D,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,IAAI,EAAE,cAAc;oBACpB,iBAAiB,EAAE,SAAS;oBAC5B,gBAAgB,EAAE,SAAS;oBAC3B,2BAA2B,EAAE,eAAe;iBAC7C,CAAC,CAAC;gBACH,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;oBAC5F,MAAM,IAAA,mCAAS,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBACpC;gBAED,kBAAkB;gBAClB,MAAA,IAAI,CAAC,gBAAgB,0CAAE,OAAO,CAAC;oBAC7B,MAAM,CAAC,KAAK;oBACZ,eAAe,CAAC,KAAK;oBACrB,kBAAkB,CAAC,KAAK;iBACzB,CAAC,CAAC;aACJ;YAED,MAAA,IAAI,CAAC,gBAAgB,0CAAE,KAAK,EAAE,CAAC;;KAChC;CACF;AAlED,sEAkEC","sourcesContent":["import type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport type { IParameterEmitter } from '../parameters/IParameterEmitter';\nimport { writeSafe } from './EnhancementHandlerUtils';\nimport type { IEnhancementContext } from './IEnhancementContext';\nimport type { IEnhancementHandler } from './IEnhancementHandler';\n\n/**\n * Generate additional names for existing people.\n * People are selected randomly from the friends that are known by the given person.\n */\nexport class EnhancementHandlerPersonNames implements IEnhancementHandler {\n  private readonly chance: number;\n  private readonly parameterEmitter?: IParameterEmitter;\n\n  /**\n   * @param chance The chance for a name to be generated.\n   *               The number of new names will be the number of people times this chance,\n   *               where names are randomly assigned to names. @range {double}\n   * @param parameterEmitter An optional parameter emitter.\n   */\n  public constructor(chance: number, parameterEmitter?: IParameterEmitter) {\n    this.chance = chance;\n    this.parameterEmitter = parameterEmitter;\n    this.parameterEmitter?.emitHeader([ 'person', 'personMalicious', 'personCommonFriend' ]);\n  }\n\n  protected getMaliciousData(person: RDF.NamedNode, context: IEnhancementContext):\n  { personMalicious: RDF.NamedNode; personCommonFriend: RDF.NamedNode } | undefined {\n    const knownByArray = context.peopleKnownBy[person.value];\n    if (!knownByArray) {\n      return;\n    }\n    const knownBy = context.dataSelector.selectArrayElement(knownByArray);\n    const knowsArray = context.peopleKnows[knownBy.value];\n    if (!knowsArray) {\n      return;\n    }\n    return {\n      personMalicious: context.dataSelector.selectArrayElement(knowsArray),\n      personCommonFriend: knownBy,\n    };\n  }\n\n  public async generate(writeStream: RDF.Stream & Writable, context: IEnhancementContext): Promise<void> {\n    const namesLength = this.chance * context.people.length;\n    for (let i = 0; i < namesLength; i++) {\n      // Determine people\n      const person = context.dataSelector.selectArrayElement(context.people);\n      const maliciousData = this.getMaliciousData(person, context);\n      if (!maliciousData || maliciousData.personMalicious.equals(person)) {\n        continue;\n      }\n      const { personMalicious, personCommonFriend } = maliciousData;\n\n      // Create resource\n      const resource = context.rdfObjectLoader.createCompactedResource({\n        '@id': person.value,\n        type: 'snvoc:Person',\n        'snvoc:firstName': '\"Zulma\"',\n        'snvoc:lastName': '\"Tulma\"',\n        'snvoc:hasMaliciousCreator': personMalicious,\n      });\n      for (const quad of resource.toQuads(undefined, undefined, { [personMalicious.value]: true })) {\n        await writeSafe(writeStream, quad);\n      }\n\n      // Emit parameters\n      this.parameterEmitter?.emitRow([\n        person.value,\n        personMalicious.value,\n        personCommonFriend.value,\n      ]);\n    }\n\n    this.parameterEmitter?.flush();\n  }\n}\n"]}
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnhancementHandlerPersonNoise = void 0;
const EnhancementHandlerUtils_1 = require("./EnhancementHandlerUtils");
/**
 * Generate noisy data for existing people.
 * People are selected randomly.
 */
class EnhancementHandlerPersonNoise {
    /**
     * @param chance The chance for an additional triple to be generated.
     *               The number of new triples will be the number of people times this chance.
     *               This value can be larger than 1 to generate multiple triples per person. @range {double}
     */
    constructor(chance) {
        this.chance = chance;
    }
    generate(writeStream, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const namesLength = this.chance * context.people.length;
            for (let i = 0; i < namesLength; i++) {
                // Determine people
                const person = context.dataSelector.selectArrayElement(context.people);
                // Create resource
                const resource = context.rdfObjectLoader.createCompactedResource({
                    '@id': `${person.value}-noise-${i}`,
                    type: 'snvoc:Noise',
                    'snvoc:noise': `"NOISE-${i}"`,
                    'snvoc:hasCreator': person.value,
                });
                for (const quad of resource.toQuads(undefined, undefined, { [person.value]: true })) {
                    yield (0, EnhancementHandlerUtils_1.writeSafe)(writeStream, quad);
                }
            }
        });
    }
}
exports.EnhancementHandlerPersonNoise = EnhancementHandlerPersonNoise;
//# sourceMappingURL=EnhancementHandlerPersonNoise.js.map
{"version":3,"file":"EnhancementHandlerPersonNamesCities.js","sourceRoot":"","sources":["EnhancementHandlerPersonNamesCities.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,uEAAsD;AAItD;;;GAGG;AACH,MAAa,mCAAmC;IAI9C;;;;;OAKG;IACH,YAAmB,MAAc,EAAE,gBAAoC;;QACrE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;QACzC,MAAA,IAAI,CAAC,gBAAgB,0CAAE,UAAU,CAAC,CAAE,QAAQ,EAAE,eAAe,CAAE,CAAC,CAAC;IACnE,CAAC;IAEY,QAAQ,CAAC,WAAkC,EAAE,OAA4B;;;YACpF,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBACpC,mBAAmB;gBACnB,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACvE,MAAM,aAAa,GAAG,OAAO,CAAC,qBAAqB,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAClE,IAAI,CAAC,aAAa,EAAE;oBAClB,SAAS;iBACV;gBAED,kBAAkB;gBAClB,MAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,uBAAuB,CAAC;oBAC/D,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,IAAI,EAAE,cAAc;oBACpB,iBAAiB,EAAE,SAAS;oBAC5B,gBAAgB,EAAE,SAAS;oBAC3B,2BAA2B,EAAE,aAAa;iBAC3C,CAAC,CAAC;gBACH,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,aAAa,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;oBAC1F,MAAM,IAAA,mCAAS,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBACpC;gBAED,kBAAkB;gBAClB,MAAA,IAAI,CAAC,gBAAgB,0CAAE,OAAO,CAAC;oBAC7B,MAAM,CAAC,KAAK;oBACZ,aAAa,CAAC,KAAK;iBACpB,CAAC,CAAC;aACJ;YAED,MAAA,IAAI,CAAC,gBAAgB,0CAAE,KAAK,EAAE,CAAC;;KAChC;CACF;AA/CD,kFA+CC","sourcesContent":["import type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport type { IParameterEmitter } from '../parameters/IParameterEmitter';\nimport { writeSafe } from './EnhancementHandlerUtils';\nimport type { IEnhancementContext } from './IEnhancementContext';\nimport type { IEnhancementHandler } from './IEnhancementHandler';\n\n/**\n * Generate additional names for existing people where the malicious creator refers to a city.\n * Cities will be selected based on the city the random person is located in.\n */\nexport class EnhancementHandlerPersonNamesCities implements IEnhancementHandler {\n  private readonly chance: number;\n  private readonly parameterEmitter?: IParameterEmitter;\n\n  /**\n   * @param chance The chance for a name to be generated.\n   *               The number of new names will be the number of people times this chance,\n   *               where names are randomly assigned to names. @range {double}\n   * @param parameterEmitter An optional parameter emitter.\n   */\n  public constructor(chance: number, parameterEmitter?: IParameterEmitter) {\n    this.chance = chance;\n    this.parameterEmitter = parameterEmitter;\n    this.parameterEmitter?.emitHeader([ 'person', 'cityMalicious' ]);\n  }\n\n  public async generate(writeStream: RDF.Stream & Writable, context: IEnhancementContext): Promise<void> {\n    const namesLength = this.chance * context.people.length;\n    for (let i = 0; i < namesLength; i++) {\n      // Determine people\n      const person = context.dataSelector.selectArrayElement(context.people);\n      const cityMalicious = context.peopleLocatedInCities[person.value];\n      if (!cityMalicious) {\n        continue;\n      }\n\n      // Create resource\n      const resource = context.rdfObjectLoader.createCompactedResource({\n        '@id': person.value,\n        type: 'snvoc:Person',\n        'snvoc:firstName': '\"Zulma\"',\n        'snvoc:lastName': '\"Tulma\"',\n        'snvoc:hasMaliciousCreator': cityMalicious,\n      });\n      for (const quad of resource.toQuads(undefined, undefined, { [cityMalicious.value]: true })) {\n        await writeSafe(writeStream, quad);\n      }\n\n      // Emit parameters\n      this.parameterEmitter?.emitRow([\n        person.value,\n        cityMalicious.value,\n      ]);\n    }\n\n    this.parameterEmitter?.flush();\n  }\n}\n"]}
{"version":3,"file":"EnhancementHandlerPersonNoise.js","sourceRoot":"","sources":["EnhancementHandlerPersonNoise.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,uEAAsD;AAItD;;;GAGG;AACH,MAAa,6BAA6B;IAGxC;;;;OAIG;IACH,YAAmB,MAAc;QAC/B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEY,QAAQ,CAAC,WAAkC,EAAE,OAA4B;;YACpF,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBACpC,mBAAmB;gBACnB,MAAM,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC,kBAAkB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBAEvE,kBAAkB;gBAClB,MAAM,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,uBAAuB,CAAC;oBAC/D,KAAK,EAAE,GAAG,MAAM,CAAC,KAAK,UAAU,CAAC,EAAE;oBACnC,IAAI,EAAE,aAAa;oBACnB,aAAa,EAAE,UAAU,CAAC,GAAG;oBAC7B,kBAAkB,EAAE,MAAM,CAAC,KAAK;iBACjC,CAAC,CAAC;gBACH,KAAK,MAAM,IAAI,IAAI,QAAQ,CAAC,OAAO,CAAC,SAAS,EAAE,SAAS,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE;oBACnF,MAAM,IAAA,mCAAS,EAAC,WAAW,EAAE,IAAI,CAAC,CAAC;iBACpC;aACF;QACH,CAAC;KAAA;CACF;AA9BD,sEA8BC","sourcesContent":["import type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport { writeSafe } from './EnhancementHandlerUtils';\nimport type { IEnhancementContext } from './IEnhancementContext';\nimport type { IEnhancementHandler } from './IEnhancementHandler';\n\n/**\n * Generate noisy data for existing people.\n * People are selected randomly.\n */\nexport class EnhancementHandlerPersonNoise implements IEnhancementHandler {\n  private readonly chance: number;\n\n  /**\n   * @param chance The chance for an additional triple to be generated.\n   *               The number of new triples will be the number of people times this chance.\n   *               This value can be larger than 1 to generate multiple triples per person. @range {double}\n   */\n  public constructor(chance: number) {\n    this.chance = chance;\n  }\n\n  public async generate(writeStream: RDF.Stream & Writable, context: IEnhancementContext): Promise<void> {\n    const namesLength = this.chance * context.people.length;\n    for (let i = 0; i < namesLength; i++) {\n      // Determine people\n      const person = context.dataSelector.selectArrayElement(context.people);\n\n      // Create resource\n      const resource = context.rdfObjectLoader.createCompactedResource({\n        '@id': `${person.value}-noise-${i}`,\n        type: 'snvoc:Noise',\n        'snvoc:noise': `\"NOISE-${i}\"`,\n        'snvoc:hasCreator': person.value,\n      });\n      for (const quad of resource.toQuads(undefined, undefined, { [person.value]: true })) {\n        await writeSafe(writeStream, quad);\n      }\n    }\n  }\n}\n"]}
{"version":3,"file":"Enhancer.js","sourceRoot":"","sources":["Enhancer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport type { Writable } from 'stream';\nimport { PassThrough } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { RdfObjectLoader } from 'rdf-object';\nimport rdfParser from 'rdf-parse';\nimport rdfSerializer from 'rdf-serialize';\nimport type { IEnhancementContext } from './handlers/IEnhancementContext';\nimport type { IEnhancementHandler } from './handlers/IEnhancementHandler';\nimport type { ILogger } from './logging/ILogger';\nimport type { IParameterEmitter } from './parameters/IParameterEmitter';\nimport type { IDataSelector } from './selector/IDataSelector';\n\nconst DF = new DataFactory();\n\n/**\n * Enhances a given dataset.\n */\nexport class Enhancer {\n  public static readonly CONTEXT_LDBC_SNB = require('./context-ldbc-snb.json');\n\n  private readonly personsPath: string;\n  private readonly activitiesPath: string;\n  private readonly staticPath: string;\n  private readonly destinationPathData: string;\n  private readonly dataSelector: IDataSelector;\n  private readonly handlers: IEnhancementHandler[];\n  private readonly logger?: ILogger;\n  private readonly parameterEmitterPosts?: IParameterEmitter;\n  private readonly parameterEmitterComments?: IParameterEmitter;\n\n  private readonly rdfObjectLoader: RdfObjectLoader;\n\n  public constructor(options: IEnhancerOptions) {\n    this.personsPath = options.personsPath;\n    this.activitiesPath = options.activitiesPath;\n    this.staticPath = options.staticPath;\n    this.destinationPathData = options.destinationPathData;\n    this.dataSelector = options.dataSelector;\n    this.handlers = options.handlers || [];\n    this.logger = options.logger;\n    this.parameterEmitterPosts = options.parameterEmitterPosts;\n    this.parameterEmitterComments = options.parameterEmitterComments;\n\n    this.rdfObjectLoader = new RdfObjectLoader({ context: Enhancer.CONTEXT_LDBC_SNB });\n\n    this.parameterEmitterPosts?.emitHeader([ 'post' ]);\n    this.parameterEmitterComments?.emitHeader([ 'comment' ]);\n  }\n\n  /**\n   * Generates an auxiliary dataset.\n   */\n  public async generate(): Promise<void> {\n    // Make sure our object loader is initialized\n    this.logger?.log('Loading context');\n    await this.rdfObjectLoader.context;\n\n    // Prepare output stream\n    this.logger?.log('Preparing output stream');\n    const writeStream: RDF.Stream & Writable = <any> new PassThrough({ objectMode: true });\n    const fileStream = fs.createWriteStream(this.destinationPathData);\n    rdfSerializer.serialize(writeStream, { contentType: 'text/turtle' }).pipe(fileStream);\n\n    // Prepare context\n    this.logger?.log('Reading background data: people');\n    const {\n      people,\n      peopleLocatedInCities,\n      peopleKnows,\n      peopleKnownBy,\n      predicates,\n      personClasses,\n    } = await this.extractPeople();\n    this.logger?.log('Reading background data: activities');\n    const { posts, postsDetails, comments, activityClasses } = await this.extractActivities();\n    this.logger?.log('Reading background data: cities');\n    const cities = await this.extractCities();\n    const classes: RDF.NamedNode[] = personClasses.concat(activityClasses);\n    const context: IEnhancementContext = {\n      rdfObjectLoader: this.rdfObjectLoader,\n      dataSelector: this.dataSelector,\n      people,\n      peopleLocatedInCities,\n      peopleKnows,\n      peopleKnownBy,\n      posts,\n      postsDetails,\n      comments,\n      cities,\n      predicates,\n      classes,\n    };\n\n    // Generate data\n    for (const handler of this.handlers) {\n      this.logger?.log(`Running ${handler.constructor.name}`);\n      await handler.generate(writeStream, context);\n    }\n\n    // Close output stream\n    this.logger?.log('Ending');\n    writeStream.end();\n  }\n\n  public extractPeople(): Promise<{\n    people: RDF.NamedNode[];\n    peopleLocatedInCities: Record<string, RDF.NamedNode>;\n    peopleKnows: Record<string, RDF.NamedNode[]>;\n    peopleKnownBy: Record<string, RDF.NamedNode[]>;\n    predicates: RDF.NamedNode[];\n    personClasses: RDF.NamedNode[];\n  }> {\n    return new Promise((resolve, reject) => {\n      // Prepare RDF terms to compare with\n      const termType = this.rdfObjectLoader.createCompactedResource('rdf:type').term;\n      const termPerson = this.rdfObjectLoader.createCompactedResource('snvoc:Person').term;\n      const termIsLocatedIn = this.rdfObjectLoader.createCompactedResource('snvoc:isLocatedIn').term;\n      const termKnows = this.rdfObjectLoader.createCompactedResource('snvoc:knows').term;\n      const termHasPerson = this.rdfObjectLoader.createCompactedResource('snvoc:hasPerson').term;\n\n      const people: RDF.NamedNode[] = [];\n      const peopleLocatedInCities: Record<string, RDF.NamedNode> = {};\n      const peopleKnows: Record<string, RDF.NamedNode[]> = {};\n      const peopleKnownBy: Record<string, RDF.NamedNode[]> = {};\n      const predicates: Set<string> = new Set<string>();\n      const classes: Set<string> = new Set<string>();\n      const stream = rdfParser.parse(fs.createReadStream(this.personsPath), { path: this.personsPath });\n\n      // Temporary variables to determine knows relationships\n      let currentKnowsPerson: RDF.NamedNode | undefined;\n      let currentKnowsNode: RDF.BlankNode | undefined;\n\n      stream.on('error', reject);\n      stream.on('data', (quad: RDF.Quad) => {\n        // Extract people\n        if (quad.subject.termType === 'NamedNode' &&\n          quad.predicate.equals(termType) &&\n          quad.object.equals(termPerson)) {\n          people.push(quad.subject);\n        }\n\n        // Extract people located in cities\n        if (quad.subject.termType === 'NamedNode' &&\n          quad.predicate.equals(termIsLocatedIn) &&\n          quad.object.termType === 'NamedNode') {\n          peopleLocatedInCities[quad.subject.value] = quad.object;\n        }\n\n        // Extract people knows relationships\n        // 1. Determine reified blank node identifying the relationships\n        if (quad.subject.termType === 'NamedNode' &&\n          quad.predicate.equals(termKnows) &&\n          quad.object.termType === 'BlankNode') {\n          currentKnowsPerson = quad.subject;\n          currentKnowsNode = quad.object;\n        }\n        // 2. Determine the person linked to the relationships\n        if (currentKnowsPerson &&\n          quad.subject.equals(currentKnowsNode) &&\n          quad.predicate.equals(termHasPerson) &&\n          quad.object.termType === 'NamedNode') {\n          if (!peopleKnows[currentKnowsPerson.value]) {\n            peopleKnows[currentKnowsPerson.value] = [];\n          }\n          if (!peopleKnownBy[quad.object.value]) {\n            peopleKnownBy[quad.object.value] = [];\n          }\n          peopleKnows[currentKnowsPerson.value].push(quad.object);\n          peopleKnownBy[quad.object.value].push(currentKnowsPerson);\n\n          currentKnowsPerson = undefined;\n          currentKnowsNode = undefined;\n        }\n\n        // Determine predicates\n        predicates.add(quad.predicate.value);\n\n        // Determine classes\n        if (quad.predicate.equals(termType)) {\n          classes.add(quad.object.value);\n        }\n      });\n      stream.on('end', () => {\n        resolve({\n          people,\n          peopleLocatedInCities,\n          peopleKnows,\n          peopleKnownBy,\n          predicates: [ ...predicates ].map(value => DF.namedNode(value)),\n          personClasses: [ ...classes ].map(value => DF.namedNode(value)),\n        });\n      });\n    });\n  }\n\n  public extractActivities(): Promise<{\n    posts: RDF.NamedNode[];\n    postsDetails: Record<string, RDF.Quad[]>;\n    comments: RDF.NamedNode[];\n    activityClasses: RDF.NamedNode[];\n  }> {\n    return new Promise<{\n      posts: RDF.NamedNode[];\n      postsDetails: Record<string, RDF.Quad[]>;\n      comments: RDF.NamedNode[];\n      activityClasses: RDF.NamedNode[];\n    }>((resolve, reject) => {\n      // Prepare RDF terms to compare with\n      const termType = this.rdfObjectLoader.createCompactedResource('rdf:type').term;\n      const termPost = this.rdfObjectLoader.createCompactedResource('snvoc:Post').term;\n      const termComment = this.rdfObjectLoader.createCompactedResource('snvoc:Comment').term;\n\n      const posts: RDF.NamedNode[] = [];\n      const postsDetails: Record<string, RDF.Quad[]> = {};\n      const comments: RDF.NamedNode[] = [];\n      const stream = rdfParser.parse(fs.createReadStream(this.activitiesPath), { path: this.activitiesPath });\n      stream.on('error', reject);\n      stream.on('data', (quad: RDF.Quad) => {\n        if (quad.subject.termType === 'NamedNode' &&\n          quad.predicate.equals(termType)) {\n          if (quad.object.equals(termPost)) {\n            posts.push(quad.subject);\n            // Emit parameters\n            this.parameterEmitterPosts?.emitRow([ quad.subject.value ]);\n            postsDetails[quad.subject.value] = [];\n          }\n          if (quad.object.equals(termComment)) {\n            comments.push(quad.subject);\n            this.parameterEmitterComments?.emitRow([ quad.subject.value ]);\n          }\n        }\n        if (quad.subject.termType === 'NamedNode') {\n          const postDetails = postsDetails[quad.subject.value];\n          if (postDetails) {\n            postDetails.push(quad);\n          }\n        }\n      });\n      stream.on('end', () => {\n        this.parameterEmitterPosts?.flush();\n        this.parameterEmitterComments?.flush();\n        resolve({\n          posts,\n          postsDetails,\n          comments,\n          activityClasses: [ DF.namedNode(termPost.value), DF.namedNode(termComment.value) ],\n        });\n      });\n    });\n  }\n\n  public extractCities(): Promise<RDF.NamedNode[]> {\n    return new Promise<RDF.NamedNode[]>((resolve, reject) => {\n      // Prepare RDF terms to compare with\n      const termType = this.rdfObjectLoader.createCompactedResource('rdf:type').term;\n      const termCity = this.rdfObjectLoader.createCompactedResource('dbpedia-owl:City').term;\n\n      const posts: RDF.NamedNode[] = [];\n      const stream = rdfParser.parse(fs.createReadStream(this.staticPath), { path: this.staticPath });\n      stream.on('error', reject);\n      stream.on('data', (quad: RDF.Quad) => {\n        if (quad.subject.termType === 'NamedNode' &&\n          quad.predicate.equals(termType) &&\n          quad.object.equals(termCity)) {\n          posts.push(quad.subject);\n        }\n      });\n      stream.on('end', () => {\n        resolve(posts);\n      });\n    });\n  }\n}\n\nexport interface IEnhancerOptions {\n  /**\n   * Path to an LDBC SNB RDF persons dataset file.\n   */\n  personsPath: string;\n  /**\n   * Path to an LDBC SNB RDF activities dataset file.\n   */\n  activitiesPath: string;\n  /**\n   * Path to an LDBC SNB RDF static dataset file.\n   */\n  staticPath: string;\n  /**\n   * Path to the output destination file.\n   */\n  destinationPathData: string;\n  /**\n   * Data selector.\n   */\n  dataSelector: IDataSelector;\n  /**\n   * Enhancement handlers.\n   */\n  handlers?: IEnhancementHandler[];\n  /**\n   * Logger.\n   */\n  logger?: ILogger;\n  /**\n   * An optional parameter emitter for all available posts.\n   */\n  parameterEmitterPosts?: IParameterEmitter;\n  /**\n   * An optional parameter emitter for all available comments.\n   */\n  parameterEmitterComments?: IParameterEmitter;\n}\n"]}
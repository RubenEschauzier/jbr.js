import type * as RDF from '@rdfjs/types';
import type { IEnhancementHandler } from './handlers/IEnhancementHandler';
import type { ILogger } from './logging/ILogger';
import type { IParameterEmitter } from './parameters/IParameterEmitter';
import type { IDataSelector } from './selector/IDataSelector';
/**
 * Enhances a given dataset.
 */
export declare class Enhancer {
    static readonly CONTEXT_LDBC_SNB: any;
    private readonly personsPath;
    private readonly activitiesPath;
    private readonly staticPath;
    private readonly destinationPathData;
    private readonly dataSelector;
    private readonly handlers;
    private readonly logger?;
    private readonly parameterEmitterPosts?;
    private readonly parameterEmitterComments?;
    private readonly rdfObjectLoader;
    constructor(options: IEnhancerOptions);
    /**
     * Generates an auxiliary dataset.
     */
    generate(): Promise<void>;
    extractPeople(): Promise<{
        people: RDF.NamedNode[];
        peopleLocatedInCities: Record<string, RDF.NamedNode>;
        peopleKnows: Record<string, RDF.NamedNode[]>;
        peopleKnownBy: Record<string, RDF.NamedNode[]>;
        predicates: RDF.NamedNode[];
        personClasses: RDF.NamedNode[];
    }>;
    extractActivities(): Promise<{
        posts: RDF.NamedNode[];
        postsDetails: Record<string, RDF.Quad[]>;
        comments: RDF.NamedNode[];
        activityClasses: RDF.NamedNode[];
    }>;
    extractCities(): Promise<RDF.NamedNode[]>;
}
export interface IEnhancerOptions {
    /**
     * Path to an LDBC SNB RDF persons dataset file.
     */
    personsPath: string;
    /**
     * Path to an LDBC SNB RDF activities dataset file.
     */
    activitiesPath: string;
    /**
     * Path to an LDBC SNB RDF static dataset file.
     */
    staticPath: string;
    /**
     * Path to the output destination file.
     */
    destinationPathData: string;
    /**
     * Data selector.
     */
    dataSelector: IDataSelector;
    /**
     * Enhancement handlers.
     */
    handlers?: IEnhancementHandler[];
    /**
     * Logger.
     */
    logger?: ILogger;
    /**
     * An optional parameter emitter for all available posts.
     */
    parameterEmitterPosts?: IParameterEmitter;
    /**
     * An optional parameter emitter for all available comments.
     */
    parameterEmitterComments?: IParameterEmitter;
}

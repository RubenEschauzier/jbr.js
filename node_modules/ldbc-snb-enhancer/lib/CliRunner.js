"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCli = exports.runCustom = exports.runConfig = void 0;
const componentsjs_1 = require("componentsjs");
/**
 * Run function for starting the enhancer for a given config.
 * @param configPath - Path to a config.
 * @param properties - Components loader properties.
 */
const runConfig = function (configPath, properties) {
    return __awaiter(this, void 0, void 0, function* () {
        const manager = yield componentsjs_1.ComponentsManager.build(properties);
        yield manager.configRegistry.register(configPath);
        const enhancer = yield manager.instantiate('urn:ldbc-snb-enhancer:default');
        return yield enhancer.generate();
    });
};
exports.runConfig = runConfig;
/**
 * Generic run function for starting the enhancer from a given config
 * @param args - Command line arguments.
 * @param stdin - Standard input stream.
 * @param stdout - Standard output stream.
 * @param stderr - Standard error stream.
 * @param properties - Components loader properties.
 */
const runCustom = function (args, stdin, stdout, stderr, properties) {
    (() => __awaiter(this, void 0, void 0, function* () {
        if (args.length !== 1) {
            stderr.write(`Missing config path argument.
Usage:
  ldbc-snb-enhancer path/to/config.json
`);
            return;
        }
        const configPath = args[0];
        // Setup from config file
        return yield (0, exports.runConfig)(configPath, properties);
    }))().then(() => {
        // Done
    }).catch(error => {
        process.stderr.write(`${error.stack}\n`);
        // eslint-disable-next-line unicorn/no-process-exit
        process.exit(1);
    });
};
exports.runCustom = runCustom;
/**
 * Run function for starting the server from the command line
 * @param moduleRootPath - Path to the module's root.
 */
const runCli = function (moduleRootPath) {
    const argv = process.argv.slice(2);
    (0, exports.runCustom)(argv, process.stdin, process.stdout, process.stderr, { mainModulePath: moduleRootPath });
};
exports.runCli = runCli;
//# sourceMappingURL=CliRunner.js.map
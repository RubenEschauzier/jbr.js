{"version":3,"file":"ParameterEmitterCsv.js","sourceRoot":"","sources":["ParameterEmitterCsv.ts"],"names":[],"mappings":";;;AACA,yBAAyB;AAGzB;;GAEG;AACH,MAAa,mBAAmB;IAM9B,YAAmB,eAAuB;QAFlC,iBAAY,GAAG,CAAC,CAAC,CAAC;QAGxB,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;QAEvC,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;IAC/D,CAAC;IAEM,UAAU,CAAC,WAAqB;QACrC,mBAAmB;QACnB,IAAI,IAAI,CAAC,YAAY,KAAK,CAAC,CAAC,EAAE;YAC5B,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,MAAM,CAAC;SACxC;aAAM;YACL,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAC7D;QAED,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC5B,CAAC;IAEM,OAAO,CAAC,OAAiB;QAC9B,mBAAmB;QACnB,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,YAAY,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,sBAAsB,OAAO,CAAC,MAAM,8BAA8B,IAAI,CAAC,YAAY,eAAe,CAAC,CAAC;SACrH;QAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAClD,CAAC;IAEM,KAAK;QACV,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;IACxB,CAAC;CACF;AAnCD,kDAmCC","sourcesContent":["import type { WriteStream } from 'fs';\nimport * as fs from 'fs';\nimport type { IParameterEmitter } from './IParameterEmitter';\n\n/**\n * Emits parameters as CSV files.\n */\nexport class ParameterEmitterCsv implements IParameterEmitter {\n  private readonly destinationPath: string;\n  private readonly fileStream: WriteStream;\n\n  private headerLength = -1;\n\n  public constructor(destinationPath: string) {\n    this.destinationPath = destinationPath;\n\n    this.fileStream = fs.createWriteStream(this.destinationPath);\n  }\n\n  public emitHeader(columnNames: string[]): void {\n    // Validate columns\n    if (this.headerLength === -1) {\n      this.headerLength = columnNames.length;\n    } else {\n      throw new Error('Attempted to emit header more than once.');\n    }\n\n    this.emitRow(columnNames);\n  }\n\n  public emitRow(columns: string[]): void {\n    // Validate columns\n    if (columns.length !== this.headerLength) {\n      throw new Error(`A column of length ${columns.length} was emitted, while length ${this.headerLength} is required.`);\n    }\n\n    this.fileStream.write(`${columns.join(',')}\\n`);\n  }\n\n  public flush(): void {\n    this.fileStream.end();\n  }\n}\n"]}
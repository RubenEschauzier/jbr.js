var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "typescript", "typedoc/dist/lib/converter/components", "typedoc/dist/lib/converter/converter", "typedoc/dist/lib/models/comments", "typedoc", "./find-readme"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExternalModuleMapPlugin = void 0;
    const ts = __importStar(require("typescript"));
    const components_1 = require("typedoc/dist/lib/converter/components");
    const converter_1 = require("typedoc/dist/lib/converter/converter");
    const comments_1 = require("typedoc/dist/lib/models/comments");
    const typedoc_1 = require("typedoc");
    const find_readme_1 = require("./find-readme");
    /**
     * This plugin allows you to provide a mapping regexp between your source folder
     * structure, and the module that should be reported in typedoc. It will match
     * the first capture group of your regex and use that as the module name.
     *
     * Based on
     * https://github.com/christopherthielen/typedoc-plugin-external-module-name
     *
     *
     */
    let ExternalModuleMapPlugin = class ExternalModuleMapPlugin extends components_1.ConverterComponent {
        constructor() {
            super(...arguments);
            /** List of module reflections which are models to rename */
            this.moduleRenames = [];
            this.modules = new Set();
        }
        initialize() {
            this.options = this.application.options;
            this.listenTo(this.owner, {
                [converter_1.Converter.EVENT_BEGIN]: this.onBegin,
                [converter_1.Converter.EVENT_CREATE_DECLARATION]: this.onDeclarationBegin,
                [converter_1.Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve,
            });
        }
        /**
         * Triggered when the converter begins converting a project.
         */
        onBegin() {
            const externalmap = this.options.getValue("external-modulemap");
            if (typeof externalmap === "string") {
                try {
                    console.log("INFO: applying regexp ", externalmap, " to calculate module names");
                    this.mapRegEx = new RegExp(externalmap);
                }
                catch (e) {
                    console.log("WARN: external map not recognized. Not processing.", e);
                }
            }
        }
        onDeclarationBegin(_context, reflection, node) {
            if (!this.mapRegEx || !node || !ts.isSourceFile(node)) {
                return;
            }
            const match = this.mapRegEx.exec(node.fileName);
            if (match) {
                const renameTo = match[1];
                console.log(`Mapping "${reflection.originalName}" to "${renameTo}"`);
                this.modules.add(renameTo);
                this.moduleRenames.push({ renameTo, reflection });
            }
        }
        /**
         * Triggered when the converter begins resolving a project.
         *
         * @param context  The context object describing the current state the
         * converter is in.
         */
        onBeginResolve(context) {
            for (const item of this.moduleRenames) {
                // Find an existing module that already has the "rename to" name. Use it
                // as the merge target.
                const mergeTarget = context.project
                    .getReflectionsByKind(item.reflection.kind)
                    .find((ref) => ref.name === item.renameTo);
                // If there wasn't a merge target, just change the name of the current
                // module and continue.
                if (!mergeTarget) {
                    item.reflection.name = item.renameTo;
                    continue;
                }
                // Since there is a merge target, relocate all the renaming module's
                // children to the mergeTarget.
                if (item.reflection.children) {
                    if (!mergeTarget.children) {
                        mergeTarget.children = [];
                    }
                    for (const child of item.reflection.children) {
                        child.parent = mergeTarget;
                        if (!mergeTarget.getChildByName(child.name)) {
                            mergeTarget.children.push(child);
                        }
                    }
                    item.reflection.children.length = 0;
                }
                // Finally remove the now empty module.
                context.project.removeReflection(item.reflection);
            }
            for (const moduleName of this.modules) {
                const moduleReflection = context.project
                    .getReflectionsByKind(typedoc_1.ReflectionKind.Module)
                    .find((ref) => ref.name === moduleName);
                if (!moduleReflection) {
                    continue;
                }
                moduleReflection.kindString = "Package";
                const readme = find_readme_1.findReadme(moduleReflection);
                if (readme) {
                    moduleReflection.comment = new comments_1.Comment("", readme.toString());
                }
                else {
                    console.error(`No README found for module "${moduleName}"`);
                }
            }
        }
    };
    ExternalModuleMapPlugin = __decorate([
        components_1.Component({ name: "external-module-map" })
    ], ExternalModuleMapPlugin);
    exports.ExternalModuleMapPlugin = ExternalModuleMapPlugin;
});

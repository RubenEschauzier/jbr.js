{"version":3,"file":"SubstitutionProviderShuffle.js","sourceRoot":"","sources":["SubstitutionProviderShuffle.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA;;GAEG;AACH,MAAa,2BAA2B;IAItC;;;OAGG;IACH,YAAmB,oBAA2C,EAAE,IAAY;QAC1E,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;QACjD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACnB,CAAC;IAEY,SAAS;;YACpB,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC,CAAC;QACnE,CAAC;KAAA;IAES,UAAU;QAClB,MAAM,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,KAAM,CAAC;QACzC,OAAO,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3B,CAAC;IAES,OAAO,CAAC,KAAgB;QAChC,IAAI,YAAY,GAAW,KAAK,CAAC,MAAM,CAAC;QACxC,IAAI,WAAW,CAAC;QAEhB,0CAA0C;QAC1C,OAAO,YAAY,KAAK,CAAC,EAAE;YACzB,4BAA4B;YAC5B,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,YAAY,CAAC,CAAC;YAC3D,YAAY,EAAE,CAAC;YAEf,wCAAwC;YACxC,CAAE,KAAK,CAAC,YAAY,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,CAAE,GAAG,CAAE,KAAK,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,YAAY,CAAC,CAAE,CAAC;SAC3F;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAtCD,kEAsCC","sourcesContent":["import type { RawTerm } from '../variable/IVariableTemplate';\nimport type { ISubstitutionProvider } from './ISubstitutionProvider';\n\n/**\n * A substitution provider that wraps over another substitution provider and shuffles all values based on a seed.\n */\nexport class SubstitutionProviderShuffle implements ISubstitutionProvider {\n  private readonly substitutionProvider: ISubstitutionProvider;\n  private seed: number;\n\n  /**\n   * @param substitutionProvider The substitution provider to shuffle.\n   * @param seed The random seed for shuffling.\n   */\n  public constructor(substitutionProvider: ISubstitutionProvider, seed: number) {\n    this.substitutionProvider = substitutionProvider;\n    this.seed = seed;\n  }\n\n  public async getValues(): Promise<RawTerm[]> {\n    return this.shuffle(await this.substitutionProvider.getValues());\n  }\n\n  protected nextRandom(): number {\n    const x = Math.sin(this.seed++) * 10_000;\n    return x - Math.floor(x);\n  }\n\n  protected shuffle(array: RawTerm[]): RawTerm[] {\n    let currentIndex: number = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle.\n    while (currentIndex !== 0) {\n      // Pick a remaining element.\n      randomIndex = Math.floor(this.nextRandom() * currentIndex);\n      currentIndex--;\n\n      // And swap it with the current element.\n      [ array[currentIndex], array[randomIndex] ] = [ array[randomIndex], array[currentIndex] ];\n    }\n\n    return array;\n  }\n}\n"]}
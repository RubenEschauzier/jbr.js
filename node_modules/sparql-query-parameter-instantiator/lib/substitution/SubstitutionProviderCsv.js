"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstitutionProviderCsv = void 0;
const fs = require("fs");
const csvParser = require("csv-parser");
/**
 * A subsitution provider for CSV files.
 */
class SubstitutionProviderCsv {
    constructor(csvFilePath, columnName, separator = ',') {
        this.csvFilePath = csvFilePath;
        this.columnName = columnName;
        this.separator = separator;
    }
    getValues() {
        return new Promise((resolve, reject) => {
            const results = [];
            fs.createReadStream(this.csvFilePath)
                .on('error', reject)
                .pipe(csvParser({ separator: this.separator }))
                .on('error', reject)
                .on('data', data => {
                if (!(this.columnName in data)) {
                    reject(new Error(`The column ${this.columnName} was not set in the CSV file ${this.csvFilePath}`));
                }
                results.push(data[this.columnName]);
            })
                .on('end', () => resolve(results));
        });
    }
}
exports.SubstitutionProviderCsv = SubstitutionProviderCsv;
//# sourceMappingURL=SubstitutionProviderCsv.js.map
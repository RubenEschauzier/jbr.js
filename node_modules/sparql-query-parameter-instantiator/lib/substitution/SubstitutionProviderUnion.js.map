{"version":3,"file":"SubstitutionProviderUnion.js","sourceRoot":"","sources":["SubstitutionProviderUnion.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA;;GAEG;AACH,MAAa,yBAAyB;IAGpC;;OAEG;IACH,YAAmB,qBAA8C;QAC/D,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;IACrD,CAAC;IAEY,SAAS;;YACpB,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,qBAAqB;iBACjD,GAAG,CAAC,oBAAoB,CAAC,EAAE,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;QAC5E,CAAC;KAAA;CACF;AAdD,8DAcC","sourcesContent":["import type { RawTerm } from '../variable/IVariableTemplate';\nimport type { ISubstitutionProvider } from './ISubstitutionProvider';\n\n/**\n * A substitution provider that takes the union over the values of the given substitution provider.\n */\nexport class SubstitutionProviderUnion implements ISubstitutionProvider {\n  private readonly substitutionProviders: ISubstitutionProvider[];\n\n  /**\n   * @param substitutionProviders The substitution provider to union over.\n   */\n  public constructor(substitutionProviders: ISubstitutionProvider[]) {\n    this.substitutionProviders = substitutionProviders;\n  }\n\n  public async getValues(): Promise<RawTerm[]> {\n    return (await Promise.all(this.substitutionProviders\n      .map(substitutionProvider => substitutionProvider.getValues()))).flat();\n  }\n}\n"]}
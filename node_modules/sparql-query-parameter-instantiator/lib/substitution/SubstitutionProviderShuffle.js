"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubstitutionProviderShuffle = void 0;
/**
 * A substitution provider that wraps over another substitution provider and shuffles all values based on a seed.
 */
class SubstitutionProviderShuffle {
    /**
     * @param substitutionProvider The substitution provider to shuffle.
     * @param seed The random seed for shuffling.
     */
    constructor(substitutionProvider, seed) {
        this.substitutionProvider = substitutionProvider;
        this.seed = seed;
    }
    getValues() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.shuffle(yield this.substitutionProvider.getValues());
        });
    }
    nextRandom() {
        const x = Math.sin(this.seed++) * 10000;
        return x - Math.floor(x);
    }
    shuffle(array) {
        let currentIndex = array.length;
        let randomIndex;
        // While there remain elements to shuffle.
        while (currentIndex !== 0) {
            // Pick a remaining element.
            randomIndex = Math.floor(this.nextRandom() * currentIndex);
            currentIndex--;
            // And swap it with the current element.
            [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];
        }
        return array;
    }
}
exports.SubstitutionProviderShuffle = SubstitutionProviderShuffle;
//# sourceMappingURL=SubstitutionProviderShuffle.js.map
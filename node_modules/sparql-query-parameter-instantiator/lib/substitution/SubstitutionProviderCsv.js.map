{"version":3,"file":"SubstitutionProviderCsv.js","sourceRoot":"","sources":["SubstitutionProviderCsv.ts"],"names":[],"mappings":";;;AAAA,yBAAyB;AACzB,wCAAwC;AAGxC;;GAEG;AACH,MAAa,uBAAuB;IAKlC,YAAmB,WAAmB,EAAE,UAAkB,EAAE,SAAS,GAAG,GAAG;QACzE,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAEM,SAAS;QACd,OAAO,IAAI,OAAO,CAAW,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC/C,MAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,WAAW,CAAC;iBAClC,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;iBACnB,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC9C,EAAE,CAAC,OAAO,EAAE,MAAM,CAAC;iBACnB,EAAE,CAAC,MAAM,EAAE,IAAI,CAAC,EAAE;gBACjB,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,EAAE;oBAC9B,MAAM,CAAC,IAAI,KAAK,CAAC,cAAc,IAAI,CAAC,UAAU,gCAAgC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;iBACpG;gBACD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;YACtC,CAAC,CAAC;iBACD,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA3BD,0DA2BC","sourcesContent":["import * as fs from 'fs';\nimport * as csvParser from 'csv-parser';\nimport type { ISubstitutionProvider } from './ISubstitutionProvider';\n\n/**\n * A subsitution provider for CSV files.\n */\nexport class SubstitutionProviderCsv implements ISubstitutionProvider {\n  private readonly csvFilePath: string;\n  private readonly columnName: string;\n  private readonly separator: string;\n\n  public constructor(csvFilePath: string, columnName: string, separator = ',') {\n    this.csvFilePath = csvFilePath;\n    this.columnName = columnName;\n    this.separator = separator;\n  }\n\n  public getValues(): Promise<string[]> {\n    return new Promise<string[]>((resolve, reject) => {\n      const results: string[] = [];\n      fs.createReadStream(this.csvFilePath)\n        .on('error', reject)\n        .pipe(csvParser({ separator: this.separator }))\n        .on('error', reject)\n        .on('data', data => {\n          if (!(this.columnName in data)) {\n            reject(new Error(`The column ${this.columnName} was not set in the CSV file ${this.csvFilePath}`));\n          }\n          results.push(data[this.columnName]);\n        })\n        .on('end', () => resolve(results));\n    });\n  }\n}\n"]}
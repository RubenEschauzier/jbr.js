{"version":3,"file":"ValueTransformerReplaceIri.js","sourceRoot":"","sources":["ValueTransformerReplaceIri.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAG/C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,0BAA0B;IAIrC,YAAmB,WAAmB,EAAE,iBAAyB;QAC/D,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC;IACvC,CAAC;IAEM,SAAS,CAAC,IAAc;QAC7B,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW,EAAE;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAChE,OAAO,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC5B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAhBD,gEAgBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { IValueTransformer } from './IValueTransformer';\n\nconst DF = new DataFactory();\n\n/**\n * Replaces parts of an IRI.\n */\nexport class ValueTransformerReplaceIri implements IValueTransformer {\n  private readonly search: RegExp;\n  private readonly replacement: string;\n\n  public constructor(searchRegex: string, replacementString: string) {\n    this.search = new RegExp(searchRegex, 'u');\n    this.replacement = replacementString;\n  }\n\n  public transform(term: RDF.Term): RDF.Term {\n    if (term.termType === 'NamedNode') {\n      const value = term.value.replace(this.search, this.replacement);\n      return DF.namedNode(value);\n    }\n    return term;\n  }\n}\n"]}
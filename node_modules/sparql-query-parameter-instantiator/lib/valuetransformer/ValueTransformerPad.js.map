{"version":3,"file":"ValueTransformerPad.js","sourceRoot":"","sources":["ValueTransformerPad.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAG/C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,mBAAmB;IAC9B,YACmB,gBAAwB,EACxB,aAAqB,EACrB,KAAc;QAFd,qBAAgB,GAAhB,gBAAgB,CAAQ;QACxB,kBAAa,GAAb,aAAa,CAAQ;QACrB,UAAK,GAAL,KAAK,CAAS;IAC9B,CAAC;IAEG,SAAS,CAAC,IAAc;QAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC/D,OAAO,IAAI,CAAC,QAAQ,KAAK,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjF,CAAC;CACF;AAbD,kDAaC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { IValueTransformer } from './IValueTransformer';\n\nconst DF = new DataFactory();\n\n/**\n * Pads strings until a given length.\n */\nexport class ValueTransformerPad implements IValueTransformer {\n  public constructor(\n    private readonly paddingCharacter: string,\n    private readonly paddingLength: number,\n    private readonly start: boolean,\n  ) {}\n\n  public transform(term: RDF.Term): RDF.Term {\n    const value = this.start ?\n      term.value.padStart(this.paddingLength, this.paddingCharacter) :\n      term.value.padEnd(this.paddingLength, this.paddingCharacter);\n    return term.termType === 'NamedNode' ? DF.namedNode(value) : DF.literal(value);\n  }\n}\n"]}
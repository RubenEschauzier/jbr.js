{"version":3,"file":"CliRunner.js","sourceRoot":"","sources":["CliRunner.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,+CAAiD;AAGjD;;;;;GAKG;AACI,MAAM,SAAS,GAAG,UACvB,UAAkB,EAClB,UAA+D,EAC/D,oBAA4C;;QAE5C,MAAM,OAAO,GAAG,MAAM,gCAAiB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;QAC1D,MAAM,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;QAClD,MAAM,YAAY,GAAsB,MAAM,OAAO;aAClD,WAAW,CAAC,iDAAiD,EAAE,oBAAoB,CAAC,CAAC;QACxF,OAAO,MAAM,YAAY,CAAC,WAAW,EAAE,CAAC;IAC1C,CAAC;CAAA,CAAC;AAVW,QAAA,SAAS,aAUpB;AAEF;;;;;;;;GAQG;AACI,MAAM,SAAS,GAAG,UACvB,IAAc,EACd,KAAiB,EACjB,MAAmB,EACnB,MAAmB,EACnB,UAA+D,EAC/D,oBAA4C;IAE5C,CAAC,GAAuB,EAAE;QACxB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,MAAM,CAAC,KAAK,CAAC;;;CAGlB,CAAC,CAAC;YACG,OAAO;SACR;QACD,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAE3B,yBAAyB;QACzB,OAAO,MAAM,IAAA,iBAAS,EAAC,UAAU,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;IACvE,CAAC,CAAA,CAAC,EAAE,CAAC,IAAI,CAAC,GAAS,EAAE;QACnB,OAAO;IACT,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;QACf,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC;QACzC,mDAAmD;QACnD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AA3BW,QAAA,SAAS,aA2BpB;AAEF;;;GAGG;AACI,MAAM,MAAM,GAAG,UAAS,cAAsB;IACnD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,IAAA,iBAAS,EAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE,EAAE,cAAc,EAAE,cAAc,EAAE,CAAC,CAAC;AACrG,CAAC,CAAC;AAHW,QAAA,MAAM,UAGjB","sourcesContent":["import type { ReadStream, WriteStream } from 'tty';\nimport type { IComponentsManagerBuilderOptions, IConstructionSettings } from 'componentsjs';\nimport { ComponentsManager } from 'componentsjs';\nimport type { QueryInstantiator } from './QueryInstantiator';\n\n/**\n * Run function for starting the instantiator for a given config.\n * @param configPath - Path to a config.\n * @param properties - Components loader properties.\n * @param constructionSettings - Settings for instantiation.\n */\nexport const runConfig = async function(\n  configPath: string,\n  properties: IComponentsManagerBuilderOptions<QueryInstantiator>,\n  constructionSettings?: IConstructionSettings,\n): Promise<void> {\n  const manager = await ComponentsManager.build(properties);\n  await manager.configRegistry.register(configPath);\n  const instantiator: QueryInstantiator = await manager\n    .instantiate('urn:sparql-query-parameter-instantiator:default', constructionSettings);\n  return await instantiator.instantiate();\n};\n\n/**\n * Generic run function for starting the instantiator from a given config\n * @param args - Command line arguments.\n * @param stdin - Standard input stream.\n * @param stdout - Standard output stream.\n * @param stderr - Standard error stream.\n * @param properties - Components loader properties.\n * @param constructionSettings - Settings for instantiation.\n */\nexport const runCustom = function(\n  args: string[],\n  stdin: ReadStream,\n  stdout: WriteStream,\n  stderr: WriteStream,\n  properties: IComponentsManagerBuilderOptions<QueryInstantiator>,\n  constructionSettings?: IConstructionSettings,\n): void {\n  (async(): Promise<void> => {\n    if (args.length !== 1) {\n      stderr.write(`Missing config path argument.\nUsage:\n  sparql-query-parameter-instantiator path/to/config.json\n`);\n      return;\n    }\n    const configPath = args[0];\n\n    // Setup from config file\n    return await runConfig(configPath, properties, constructionSettings);\n  })().then((): void => {\n    // Done\n  }).catch(error => {\n    process.stderr.write(`${error.stack}\\n`);\n    // eslint-disable-next-line unicorn/no-process-exit\n    process.exit(1);\n  });\n};\n\n/**\n * Run function for starting the server from the command line\n * @param moduleRootPath - Path to the module's root.\n */\nexport const runCli = function(moduleRootPath: string): void {\n  const argv = process.argv.slice(2);\n  runCustom(argv, process.stdin, process.stdout, process.stderr, { mainModulePath: moduleRootPath });\n};\n"]}
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryTemplateProvider = void 0;
const fs = require("fs");
const sparqljs_1 = require("sparqljs");
const QueryTemplate_1 = require("./QueryTemplate");
/**
 * Constructs query templates based on a given template file, variables, and substitution parameters.
 */
class QueryTemplateProvider {
    constructor(templateFilePath, destinationFilePath, variables) {
        this.templateFilePath = templateFilePath;
        this.destinationFilePath = destinationFilePath;
        this.variables = variables;
        this.parser = new sparqljs_1.Parser();
    }
    /**
     * Create a new query template data object.
     */
    createTemplate() {
        return __awaiter(this, void 0, void 0, function* () {
            const sparqlString = yield fs.promises.readFile(this.templateFilePath, 'utf8');
            const syntaxTree = this.parser.parse(sparqlString);
            const variableMappings = {};
            for (const variableTemplate of this.variables) {
                const variableName = variableTemplate.getName();
                const substitutionProvider = variableTemplate.getSubstitutionProvider();
                if (!substitutionProvider) {
                    throw new Error(`The variable template '${this.templateFilePath}' for '${variableName}' has no substitution provider configured`);
                }
                variableMappings[variableName] = (yield substitutionProvider.getValues())
                    .map(value => variableTemplate.createTerm(value));
            }
            return new QueryTemplate_1.QueryTemplate(syntaxTree, variableMappings);
        });
    }
    /**
     * Serialize the given queries file contents.
     * @param queriesFile The contents of the queries file to serialize.
     */
    saveQueriesFile(queriesFile) {
        return __awaiter(this, void 0, void 0, function* () {
            yield fs.promises.writeFile(this.destinationFilePath, queriesFile, 'utf8');
        });
    }
}
exports.QueryTemplateProvider = QueryTemplateProvider;
//# sourceMappingURL=QueryTemplateProvider.js.map
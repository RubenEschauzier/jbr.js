"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryInstantiator = void 0;
/**
 * Instantiates query providers a number of times.
 */
class QueryInstantiator {
    constructor(providers, count) {
        this.providers = providers;
        this.count = count;
    }
    instantiateProvider(provider) {
        return __awaiter(this, void 0, void 0, function* () {
            const template = yield provider.createTemplate();
            // Create queries files
            const queries = [];
            for (let i = 0; i < this.count; i++) {
                queries.push(template.instantiate(i));
            }
            const queriesFile = queries.join('\n\n');
            yield provider.saveQueriesFile(queriesFile);
        });
    }
    /**
     * Invoke all query providers.
     */
    instantiate() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.providers.map(provider => this.instantiateProvider(provider)));
        });
    }
}
exports.QueryInstantiator = QueryInstantiator;
//# sourceMappingURL=QueryInstantiator.js.map
import type { ReadStream, WriteStream } from 'tty';
import type { IComponentsManagerBuilderOptions, IConstructionSettings } from 'componentsjs';
import type { QueryInstantiator } from './QueryInstantiator';
/**
 * Run function for starting the instantiator for a given config.
 * @param configPath - Path to a config.
 * @param properties - Components loader properties.
 * @param constructionSettings - Settings for instantiation.
 */
export declare const runConfig: (configPath: string, properties: IComponentsManagerBuilderOptions<QueryInstantiator>, constructionSettings?: IConstructionSettings | undefined) => Promise<void>;
/**
 * Generic run function for starting the instantiator from a given config
 * @param args - Command line arguments.
 * @param stdin - Standard input stream.
 * @param stdout - Standard output stream.
 * @param stderr - Standard error stream.
 * @param properties - Components loader properties.
 * @param constructionSettings - Settings for instantiation.
 */
export declare const runCustom: (args: string[], stdin: ReadStream, stdout: WriteStream, stderr: WriteStream, properties: IComponentsManagerBuilderOptions<QueryInstantiator>, constructionSettings?: IConstructionSettings | undefined) => void;
/**
 * Run function for starting the server from the command line
 * @param moduleRootPath - Path to the module's root.
 */
export declare const runCli: (moduleRootPath: string) => void;

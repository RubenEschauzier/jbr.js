{"version":3,"file":"VariableTemplateList.js","sourceRoot":"","sources":["VariableTemplateList.ts"],"names":[],"mappings":";;;AAIA,uEAAoE;AAEpE;;;GAGG;AACH,MAAa,oBAAqB,SAAQ,iDAAuB;IAC/D,YACE,IAAY,EACI,SAAiB,EACjB,aAAgC,EAChD,oBAA4C,EAC5C,iBAAuC;QAEvC,KAAK,CAAC,IAAI,EAAE,oBAAoB,EAAE,iBAAiB,CAAC,CAAC;QALrC,cAAS,GAAT,SAAS,CAAQ;QACjB,kBAAa,GAAb,aAAa,CAAmB;IAKlD,CAAC;IAEM,eAAe,CAAC,KAAc;QACnC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACzB,MAAM,IAAI,KAAK,CAAC,yEAAyE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;SACvG;QACD,OAAO,IAAI,CAAC,EAAE,CAAC,OAAO,CACpB,KAAK;aACF,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;aACpD,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CACxB,CAAC;IACJ,CAAC;CACF;AArBD,oDAqBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { ISubstitutionProvider } from '../substitution/ISubstitutionProvider';\nimport type { IValueTransformer } from '../valuetransformer/IValueTransformer';\nimport type { IVariableTemplate, RawTerm } from './IVariableTemplate';\nimport { VariableTemplateAdapter } from './VariableTemplateAdapter';\n\n/**\n * A template for instantiating arrays as RDF Literals concatenated by a given separator.\n * An inner variable template must be passed, which will be invoked for every array value.\n */\nexport class VariableTemplateList extends VariableTemplateAdapter {\n  public constructor(\n    name: string,\n    public readonly separator: string,\n    public readonly innerTemplate: IVariableTemplate,\n    substitutionProvider?: ISubstitutionProvider,\n    valueTransformers?: IValueTransformer[],\n  ) {\n    super(name, substitutionProvider, valueTransformers);\n  }\n\n  public createTermInner(value: RawTerm): RDF.Term {\n    if (!Array.isArray(value)) {\n      throw new Error(`Received unsupported non-array value for the VariableTemplateList for ${this.name}`);\n    }\n    return this.DF.literal(\n      value\n        .map(val => this.innerTemplate.createTerm(val).value)\n        .join(this.separator),\n    );\n  }\n}\n"]}
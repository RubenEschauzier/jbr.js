import type * as RDF from '@rdfjs/types';
import type { BlankTerm, IriTerm, Pattern, QuadTerm, SparqlQuery, Triple, VariableTerm, SelectQuery, PropertyPath, Term, Expression } from 'sparqljs';
/**
 * Data object for a query template.
 */
export declare class QueryTemplate {
    private readonly syntaxTree;
    private readonly variableMappings;
    constructor(syntaxTree: SparqlQuery, variableMappings: Record<string, RDF.Term[]>);
    /**
     * Instantiate this template for the given counter value.
     * This counter value is used to determine what variable value should be used.
     * @param counter The current counter value.
     */
    instantiate(counter: number): string;
    instantiateSyntaxTree(syntaxTree: SparqlQuery, variableMapping: Record<string, RDF.Term>): SelectQuery;
    instantiatePatterns(patterns: Pattern[], variableMapping: Record<string, RDF.Term>): Pattern[];
    instantiateExpression(expression: Expression, variableMapping: Record<string, RDF.Term>): Expression;
    instantiateTriple(triple: Triple, variableMapping: Record<string, RDF.Term>): Triple;
    instantiateTerm<T extends IriTerm | BlankTerm | VariableTerm | QuadTerm | PropertyPath | Term>(term: T, variableMapping: Record<string, RDF.Term>): T | RDF.Term;
}

"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SparqlQueryHandler = void 0;
const sparql_query_parameter_instantiator_1 = require("sparql-query-parameter-instantiator");
const SparqlJsonSerializer_1 = require("./SparqlJsonSerializer");
/**
 * A query handler that handles queries with a given identifier as SPARQL.
 */
class SparqlQueryHandler {
    /**
     * @param identifier Identifier for validation queries this handler should apply to.
     * @param templateFilePath Path to the SPARQL query template this handler should instantiate queries for.
     * @param variables The variables that will be instantiated within the query template.
     * @param results The variables that are selected by the query.
     */
    constructor(identifier, templateFilePath, variables, results) {
        this.identifier = identifier;
        this.templateFilePath = templateFilePath;
        this.variables = variables;
        this.results = results;
        this.resultsSerializer = new SparqlJsonSerializer_1.SparqlJsonSerializer(results);
    }
    handle(queryParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            if (queryParameters.queryIdentifier === this.identifier) {
                // Prepare variable templates for query
                if (this.variables.length !== queryParameters.queryParameters.length) {
                    throw new Error(`Invalid query parameters for '${this.identifier}'. Encountered a validation query with ${queryParameters.queryParameters.length} parameters, while ${this.variables.length} variables were defined in the config.`);
                }
                const variableTemplates = [];
                for (let i = 0; i < this.variables.length; i++) {
                    variableTemplates[i] = new sparql_query_parameter_instantiator_1.VariableTemplateWrapper(this.variables[i], {
                        getValues: () => __awaiter(this, void 0, void 0, function* () { return [queryParameters.queryParameters[i]]; }),
                    });
                }
                // Handle query
                const query = (yield new sparql_query_parameter_instantiator_1.QueryTemplateProvider(this.templateFilePath, '', variableTemplates).createTemplate())
                    .instantiate(0);
                // Handle results
                const results = this.resultsSerializer.serialize(queryParameters);
                return { valid: true, query, results };
            }
            return undefined;
        });
    }
}
exports.SparqlQueryHandler = SparqlQueryHandler;
//# sourceMappingURL=SparqlQueryHandler.js.map
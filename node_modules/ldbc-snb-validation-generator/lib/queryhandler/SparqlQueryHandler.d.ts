import type { IVariableTemplate } from 'sparql-query-parameter-instantiator';
import type { QueryParameters } from '../QueryParameters';
import type { IHandledQuery, IQueryHandler } from './IQueryHandler';
/**
 * A query handler that handles queries with a given identifier as SPARQL.
 */
export declare class SparqlQueryHandler implements IQueryHandler {
    readonly identifier: string;
    readonly templateFilePath: string;
    readonly variables: IVariableTemplate[];
    readonly results: IVariableTemplate[];
    private readonly resultsSerializer;
    /**
     * @param identifier Identifier for validation queries this handler should apply to.
     * @param templateFilePath Path to the SPARQL query template this handler should instantiate queries for.
     * @param variables The variables that will be instantiated within the query template.
     * @param results The variables that are selected by the query.
     */
    constructor(identifier: string, templateFilePath: string, variables: IVariableTemplate[], results: IVariableTemplate[]);
    handle(queryParameters: QueryParameters): Promise<IHandledQuery | undefined>;
}

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdbcValidationTransformer = void 0;
const stream_1 = require("stream");
const QueryParameters_1 = require("../QueryParameters");
/**
 * Transforms a text stream into a stream of {@link QueryParameters}.
 */
class LdbcValidationTransformer extends stream_1.Transform {
    constructor() {
        super({ decodeStrings: true, readableObjectMode: true, writableObjectMode: true });
        this.lineBuffer = [];
    }
    _transform(chunkBuffer, encoding, callback) {
        const chunk = chunkBuffer.toString();
        for (let i = 0; i < chunk.length; i++) {
            const character = chunk.charAt(i);
            if (character !== '\n') {
                this.lineBuffer.push(character);
            }
            else {
                try {
                    this.flushLine();
                }
                catch (error) {
                    this.destroy(error);
                }
            }
        }
        callback();
    }
    _flush(callback) {
        try {
            this.flushLine();
        }
        catch (error) {
            this.destroy(error);
        }
        callback();
    }
    flushLine() {
        // Extract line string and reset buffer
        const line = this.lineBuffer.join('');
        this.lineBuffer = [];
        if (line) {
            const parameters = this.parseLine(line);
            this.push(parameters);
        }
    }
    parseJsonContext(data, line, part) {
        try {
            return JSON.parse(data);
        }
        catch (error) {
            throw new Error(`Detected invalid JSON in the ${part} part of: '${line}'\n${error.message}`);
        }
    }
    parseLine(line) {
        // Determine line components
        const matches = /(\[[^|]*\])\|(.*)/u.exec(line);
        if (matches === null) {
            throw new Error(`Detected invalid validation line: '${line}'`);
        }
        // Parse components as JSON
        const [queryIdentifier, ...queryParameters] = this.parseJsonContext(matches[1], line, 'query');
        const results = this.parseJsonContext(matches[2], line, 'results');
        // Splice off last query parameter, because that one is unused (unsure why, seems to always be 20...)
        queryParameters.splice(-1, 1);
        return new QueryParameters_1.QueryParameters(queryIdentifier, queryParameters, results);
    }
}
exports.LdbcValidationTransformer = LdbcValidationTransformer;
//# sourceMappingURL=LdbcValidationTransformer.js.map
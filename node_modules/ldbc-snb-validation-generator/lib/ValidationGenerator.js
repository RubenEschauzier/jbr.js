"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationGenerator = void 0;
/**
 * Main entrypoint for handles validation parameters.
 */
class ValidationGenerator {
    constructor(parameterSource, destination, queryHandlers) {
        this.parameterSource = parameterSource;
        this.destination = destination;
        this.queryHandlers = queryHandlers;
    }
    generate() {
        return __awaiter(this, void 0, void 0, function* () {
            const parametersStream = yield this.parameterSource.getParameters();
            const pendingPromises = [];
            return new Promise((resolve, reject) => {
                let queryIndex = 0;
                parametersStream.on('data', (parameters) => {
                    // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this
                    const self = this;
                    pendingPromises.push((function () {
                        return __awaiter(this, void 0, void 0, function* () {
                            for (const queryHandler of self.queryHandlers) {
                                const result = yield queryHandler.handle(parameters);
                                if (!result) {
                                    continue;
                                }
                                // Write away result
                                if (result.valid) {
                                    yield self.destination.write(queryIndex++, result.query, result.results);
                                }
                                return;
                            }
                            // eslint-disable-next-line no-console
                            console.warn(`Could not find a query handler for ${parameters.queryIdentifier}`);
                        });
                    })().catch(error => {
                        parametersStream.emit('error', error);
                    }));
                });
                parametersStream.on('error', reject);
                parametersStream.on('end', () => {
                    Promise.all(pendingPromises).then(() => resolve(), reject);
                });
            });
        });
    }
}
exports.ValidationGenerator = ValidationGenerator;
//# sourceMappingURL=ValidationGenerator.js.map
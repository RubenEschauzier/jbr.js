{"version":3,"file":"IOUtil.js","sourceRoot":"","sources":["IOUtil.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iDAAuC;AACvC,yBAAyB;AACzB,qCAAqC;AACrC,+BAA+B;AAC/B,iCAAiC;AACjC,MAAM,QAAQ,GAAG,gBAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAM/B,4BAAQ;AALjB,MAAM,SAAS,GAAG,gBAAS,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;AAKvB,8BAAS;AAJ5B,MAAM,aAAa,GAAG,gBAAS,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC;AAC5D,MAAM,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AACjD,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;AAIlD,SAAgB,UAAU;IACxB,OAAO,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;AAChD,CAAC;AAFD,gCAEC;AAED,SAAsB,cAAc;;QAClC,OAAO,MAAM,QAAQ,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;IAChD,CAAC;CAAA;AAFD,wCAEC;AAED,SAAsB,YAAY;;QAChC,IAAI;YACF,OAAO,MAAM,QAAQ,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;SAC7C;QAAC,OAAO,CAAC,EAAE;YACV,OAAO,IAAI,CAAC;SACb;IACH,CAAC;CAAA;AAND,oCAMC;AAED,SAAsB,gBAAgB,CAAC,KAAa;;QAClD,MAAM,EAAE,GAAG,QAAQ,CAAC,eAAe,CAAC;YAClC,KAAK,EAAE,OAAO,CAAC,KAAK;YACpB,MAAM,EAAE,OAAO,CAAC,MAAM;SACvB,CAAC,CAAC;QACH,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,MAAM,EAAE,EAAE;YAC5D,EAAE,CAAC,KAAK,EAAE,CAAC;YACX,OAAO,CAAC,MAAM,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC,CAAC;IACN,CAAC;CAAA;AATD,4CASC;AAED,SAAsB,oBAAoB;;QACxC,MAAM,IAAI,GAAa,MAAM,aAAa,EAAE,CAAC;QAC7C,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAChB,kBAAkB;YAClB,OAAO,IAAI,CAAC;SACb;aAAM;YACL,yBAAyB;YACzB,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;SAChB;IACH,CAAC;CAAA;AATD,oDASC;AAED,SAAsB,aAAa,CAAC,eAAuB;;QACzD,OAAO,CAAC,MAAM,cAAc,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,MAAM,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC;aACrF,GAAG,CAAC,CAAC,MAAc,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;IACxE,CAAC;CAAA;AAHD,sCAGC;AAED,SAAgB,SAAS,CAAC,IAAY;IACpC,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,wBAAQ,CAAC,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE;YACvC,IAAI,KAAK,EAAE;gBACT,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;aACtB;YACD,OAAO,EAAE,CAAC;QACZ,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC;AATD,8BASC","sourcesContent":["import {execFile} from \"child_process\";\nimport * as fs from \"fs\";\nimport * as readline from \"readline\";\nimport {promisify} from \"util\";\n// tslint:disable:no-var-requires\nconst readFile = promisify(fs.readFile);\nconst writeFile = promisify(fs.writeFile);\nconst gitSemverTags = promisify(require('git-semver-tags'));\nconst gitRawCommits = require('git-raw-commits');\nconst arrayifyStream = require('arrayify-stream');\n\nexport { readFile, writeFile };\n\nexport function getIsoDate(): string {\n  return new Date().toISOString().substr(0, 10);\n}\n\nexport async function getPackageJson(): Promise<string> {\n  return await readFile('package.json', 'utf8');\n}\n\nexport async function getLernaJson(): Promise<string> {\n  try {\n    return await readFile('lerna.json', 'utf8');\n  } catch (e) {\n    return null;\n  }\n}\n\nexport async function waitForUserInput(query: string) {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n  return new Promise((resolve) => rl.question(query, (answer) => {\n    rl.close();\n    resolve(answer);\n  }));\n}\n\nexport async function getLastGitVersionTag(): Promise<string> {\n  const tags: string[] = await gitSemverTags();\n  if (!tags.length) {\n    // Initial release\n    return null;\n  } else {\n    // Not an initial release\n    return tags[0];\n  }\n}\n\nexport async function getGitCommits(previousVersion: string): Promise<string[]> {\n  return (await arrayifyStream(gitRawCommits({ from: previousVersion, format: '%H-%s' })))\n    .map((commit: Buffer) => commit.toString('utf8').replace('\\n', ''));\n}\n\nexport function stageFile(file: string) {\n  return new Promise((resolve, reject) => {\n    execFile('git', ['add', file], (error) => {\n      if (error) {\n        return reject(error);\n      }\n      resolve();\n    });\n  });\n}\n"]}
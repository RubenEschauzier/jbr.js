{"version":3,"file":"ChangelogUtil.js","sourceRoot":"","sources":["ChangelogUtil.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,MAAM,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AAE3C,SAAgB,yBAAyB;IACvC,OAAO;;CAER,CAAC;AACF,CAAC;AAJD,8DAIC;AAED,SAAgB,UAAU,CAAC,WAAmB;IAC5C,OAAO,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC;AACzC,CAAC;AAFD,gCAEC;AAED,SAAgB,UAAU,CAAC,WAAmB;IAC5C,MAAM,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC;IACrD,OAAO,QAAQ,CAAC,MAAM,EAAE,CAAC;AAC3B,CAAC;AAHD,gCAGC;AAED,SAAgB,YAAY,CAAC,OAAe,EAAE,IAAY;IACxD,OAAO,GAAG,OAAO,WAAW,IAAI,EAAE,CAAC;AACrC,CAAC;AAFD,oCAEC;AAED,SAAgB,eAAe,CAAC,UAAkB,EAAE,eAAuB,EAAE,OAAe,EAAE,IAAY;IACxG,OAAO,OAAO,UAAU,IAAI,eAAe;QACzC,CAAC,CAAC,IAAI,OAAO,YAAY,eAAe,MAAM,UAAU,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,IAAI,EAAE,CAAC;AACjF,CAAC;AAHD,0CAGC;AAED,SAAgB,cAAc,CAAC,UAAkB,EAAE,KAAa,EAAE,OAAe;IAC/E,OAAQ,YAAY,UAAU;EAC9B,KAAK;;;EAGL,OAAO;CACR,CAAC;AACF,CAAC;AAPD,wCAOC;AAED,SAAgB,aAAa,CAAC,OAAiB,EAAE,OAAe;IAC9D,OAAO,OAAO;SACX,GAAG,CAAC,CAAC,MAAc,EAAE,EAAE;QACtB,MAAM,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QAC9B,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC;SACD,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,KAAK,CAAmB,EAAE,EAAE,CAAC,MAAM,KAAK,KAAK,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,GAAG,CAAC;SACxF,IAAI,CAAC,IAAI,CAAC,CAAC;AAChB,CAAC;AARD,sCAQC;AAED,SAAgB,mBAAmB,CAAC,aAAqB,EAAE,WAAmB;IAC5E,MAAM,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC1D,IAAI,mBAAmB,IAAI,CAAC,EAAE;QAC5B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;KACjF;IACD,OAAO,aAAa,CAAC,MAAM,CAAC,CAAC,EAAE,mBAAmB,GAAG,CAAC,CAAC;UACnD,WAAW,GAAG,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,mBAAmB,GAAG,CAAC,CAAC,CAAC;AACzE,CAAC;AAPD,kDAOC","sourcesContent":["// tslint:disable:no-var-requires\nconst getPkgRepo = require('get-pkg-repo');\n\nexport function getDefaultChangelogHeader(): string {\n  return `# Changelog\nAll notable changes to this project will be documented in this file.\n`;\n}\n\nexport function getVersion(packageJson: string): string {\n  return JSON.parse(packageJson).version;\n}\n\nexport function getRepoUrl(packageJson: string): string {\n  const repoData = getPkgRepo(JSON.parse(packageJson));\n  return repoData.browse();\n}\n\nexport function getCommitUrl(repoUrl: string, hash: string): string {\n  return `${repoUrl}/commit/${hash}`;\n}\n\nexport function getVersionTitle(newVersion: string, previousVersion: string, repoUrl: string, date: string): string {\n  return `## [${newVersion}]${previousVersion\n    ? `(${repoUrl}/compare/${previousVersion}...${newVersion})` : ''} - ${date}`;\n}\n\nexport function getVersionText(newVersion: string, title: string, commits: string) {\n  return  `<a name=\"${newVersion}\"></a>\n${title}\n\n### TODO: categorize commits, choose titles from: Added, Changed, Deprecated, Removed, Fixed, Security.\n${commits}\n`;\n}\n\nexport function formatCommits(commits: string[], repoUrl: string): string {\n  return commits\n    .map((commit: string) => {\n      const i = commit.indexOf('-');\n      return [commit.substr(0, i), commit.substr(i + 1)];\n    })\n    .map(([hash, title]: [string, string]) => `* [${title}](${getCommitUrl(repoUrl, hash)})`)\n    .join('\\n');\n}\n\nexport function insertIntoChangelog(changelogText: string, versionText: string): string {\n  const firstEmptyLineIndex = changelogText.indexOf('\\n\\n');\n  if (firstEmptyLineIndex <= 0) {\n    throw new Error(`Found no required empty line in CHANGELOG.md to append into.`);\n  }\n  return changelogText.substr(0, firstEmptyLineIndex + 2)\n    + versionText + '\\n' + changelogText.substr(firstEmptyLineIndex + 2);\n}\n"]}
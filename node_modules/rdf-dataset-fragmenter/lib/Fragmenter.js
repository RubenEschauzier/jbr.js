"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fragmenter = void 0;
const QuadTransformStream_1 = require("./transform/QuadTransformStream");
/**
 * Fragments quads from a given source into a given sink.
 */
class Fragmenter {
    constructor(options) {
        this.quadSource = options.quadSource;
        this.transformers = options.transformers;
        this.fragmentationStrategy = options.fragmentationStrategy;
        this.quadSink = options.quadSink;
    }
    static getTransformedQuadStream(quadSource, transformers) {
        const quadStream = quadSource.getQuads();
        if (transformers.length > 0) {
            const transformedQuadStream = new QuadTransformStream_1.QuadTransformStream(transformers);
            quadStream.on('error', (error) => transformedQuadStream.emit('error', error));
            quadStream.pipe(transformedQuadStream);
            return transformedQuadStream;
        }
        return quadStream;
    }
    /**
     * Read quads from a given source, fragment it into the sink, and close the sink.
     */
    fragment() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.fragmentationStrategy.fragment(Fragmenter.getTransformedQuadStream(this.quadSource, this.transformers || []), this.quadSink);
            yield this.quadSink.close();
        });
    }
}
exports.Fragmenter = Fragmenter;
//# sourceMappingURL=Fragmenter.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuadSinkCsv = void 0;
const fs = require("fs");
const path_1 = require("path");
const mkdirp = require("mkdirp");
const rdf_string_1 = require("rdf-string");
/**
 * A quad sink that writes quads to a CSV file.
 */
class QuadSinkCsv {
    /**
     * @param file The file to write to.
     * @param columns The quad term names that will be serialized as columns.
     */
    constructor(file, columns) {
        this.file = file;
        this.columns = columns;
    }
    close() {
        return new Promise((resolve, reject) => {
            if (this.fileStream) {
                this.fileStream.close(error => {
                    if (error) {
                        return reject(error);
                    }
                    return resolve();
                });
            }
            else {
                resolve();
            }
        });
    }
    push(iri, quad) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.fileStream) {
                // Ensure output directory exists
                const folder = (0, path_1.dirname)(this.file);
                yield mkdirp(folder);
                // Open file stream
                this.fileStream = fs.createWriteStream(this.file);
                yield new Promise(resolve => {
                    this.fileStream.on('open', () => {
                        // Write CSV header
                        this.fileStream.write(`${this.columns.join(',')}\n`);
                        resolve();
                    });
                });
            }
            this.fileStream.write(`${this.columns.map(column => (0, rdf_string_1.termToString)(quad[column])).join(',')}\n`);
        });
    }
}
exports.QuadSinkCsv = QuadSinkCsv;
//# sourceMappingURL=QuadSinkCsv.js.map
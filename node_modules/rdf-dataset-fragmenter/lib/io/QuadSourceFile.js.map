{"version":3,"file":"QuadSourceFile.js","sourceRoot":"","sources":["QuadSourceFile.ts"],"names":[],"mappings":";;;AAAA,yBAAyB;AAGzB,yCAAkC;AAGlC;;GAEG;AACH,MAAa,cAAc;IAIzB,YAAmB,OAA+B;QAChD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;QACjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IACjC,CAAC;IAEM,QAAQ;QACb,OAAO,mBAAS,CAAC,KAAK,CAAC,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;IAC7G,CAAC;CACF;AAZD,wCAYC","sourcesContent":["import * as fs from 'fs';\nimport type { Readable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport rdfParser from 'rdf-parse';\nimport type { IQuadSource } from './IQuadSource';\n\n/**\n * A quad source that loads quads from a file.\n */\nexport class QuadSourceFile implements IQuadSource {\n  private readonly filePath: string;\n  private readonly baseIRI?: string;\n\n  public constructor(options: IQuadSourceFileOptions) {\n    this.filePath = options.filePath;\n    this.baseIRI = options.baseIRI;\n  }\n\n  public getQuads(): RDF.Stream & Readable {\n    return rdfParser.parse(fs.createReadStream(this.filePath), { path: this.filePath, baseIRI: this.baseIRI });\n  }\n}\n\nexport interface IQuadSourceFileOptions {\n  /**\n   * Path to a local RDF file.\n   * This file should include an extension so that the used format can be detected.\n   */\n  filePath: string;\n  /**\n   * An optional baseIRI to parse the file with.\n   */\n  baseIRI?: string;\n}\n"]}
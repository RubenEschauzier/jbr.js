{"version":3,"file":"QuadSinkCsv.js","sourceRoot":"","sources":["QuadSinkCsv.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,yBAAyB;AAEzB,+BAA+B;AAE/B,iCAAiC;AACjC,2CAA0C;AAI1C;;GAEG;AACH,MAAa,WAAW;IAKtB;;;OAGG;IACH,YAAmB,IAAY,EAAE,OAAuB;QACtD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IACzB,CAAC;IAEM,KAAK;QACV,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YAC3C,IAAI,IAAI,CAAC,UAAU,EAAE;gBACnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBAC5B,IAAI,KAAK,EAAE;wBACT,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;qBACtB;oBACD,OAAO,OAAO,EAAE,CAAC;gBACnB,CAAC,CAAC,CAAC;aACJ;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEY,IAAI,CAAC,GAAW,EAAE,IAAc;;YAC3C,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;gBACpB,iCAAiC;gBACjC,MAAM,MAAM,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClC,MAAM,MAAM,CAAC,MAAM,CAAC,CAAC;gBAErB,mBAAmB;gBACnB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClD,MAAM,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;oBAChC,IAAI,CAAC,UAAW,CAAC,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE;wBAC/B,mBAAmB;wBACnB,IAAI,CAAC,UAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;wBACtD,OAAO,EAAE,CAAC;oBACZ,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;aACJ;YAED,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,yBAAY,EAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QACjG,CAAC;KAAA;CACF;AAhDD,kCAgDC","sourcesContent":["import * as fs from 'fs';\nimport type { WriteStream } from 'fs';\nimport { dirname } from 'path';\nimport type * as RDF from '@rdfjs/types';\nimport * as mkdirp from 'mkdirp';\nimport { termToString } from 'rdf-string';\nimport type { QuadTermName } from 'rdf-terms';\nimport type { IQuadSink } from './IQuadSink';\n\n/**\n * A quad sink that writes quads to a CSV file.\n */\nexport class QuadSinkCsv implements IQuadSink {\n  private readonly file: string;\n  private readonly columns: QuadTermName[];\n  private fileStream: WriteStream | undefined;\n\n  /**\n   * @param file The file to write to.\n   * @param columns The quad term names that will be serialized as columns.\n   */\n  public constructor(file: string, columns: QuadTermName[]) {\n    this.file = file;\n    this.columns = columns;\n  }\n\n  public close(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this.fileStream) {\n        this.fileStream.close(error => {\n          if (error) {\n            return reject(error);\n          }\n          return resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  public async push(iri: string, quad: RDF.Quad): Promise<void> {\n    if (!this.fileStream) {\n      // Ensure output directory exists\n      const folder = dirname(this.file);\n      await mkdirp(folder);\n\n      // Open file stream\n      this.fileStream = fs.createWriteStream(this.file);\n      await new Promise<void>(resolve => {\n        this.fileStream!.on('open', () => {\n          // Write CSV header\n          this.fileStream!.write(`${this.columns.join(',')}\\n`);\n          resolve();\n        });\n      });\n    }\n\n    this.fileStream.write(`${this.columns.map(column => termToString(quad[column])).join(',')}\\n`);\n  }\n}\n"]}
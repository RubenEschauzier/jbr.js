"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuadSinkFile = void 0;
const readline = require("readline");
const ParallelFileWriter_1 = require("./ParallelFileWriter");
/**
 * A quad sink that writes to files using an IRI to local file system path mapping.
 */
class QuadSinkFile {
    constructor(options) {
        this.counter = 0;
        this.outputFormat = options.outputFormat;
        this.iriToPath = options.iriToPath;
        this.log = Boolean(options.log);
        this.fileExtension = options.fileExtension;
        this.fileWriter = new ParallelFileWriter_1.ParallelFileWriter({ streams: 128 });
        this.attemptLog();
    }
    attemptLog(newLine = false) {
        if (this.log && (this.counter % 1000 === 0 || newLine)) {
            readline.clearLine(process.stdout, 0);
            readline.cursorTo(process.stdout, 0);
            process.stdout.write(`\rHandled quads: ${this.counter / 1000}K`);
            if (newLine) {
                process.stdout.write(`\n`);
            }
        }
    }
    getFilePath(iri) {
        // Find base path from the first matching baseIRI
        let path;
        for (const [baseIRI, basePath] of Object.entries(this.iriToPath)) {
            if (iri.startsWith(baseIRI)) {
                path = basePath + iri.slice(baseIRI.length);
                break;
            }
        }
        // Crash if we did not find a matching baseIRI
        if (!path) {
            throw new Error(`No IRI mapping found for ${iri}`);
        }
        // Escape illegal directory names
        path = path.replace(/[*|"<>?:]/ug, '_');
        // Add file extension if we don't have one yet
        if (this.fileExtension && !/\.[a-z]$/iu.exec(this.fileExtension)) {
            path = `${path}${this.fileExtension}`;
        }
        return path;
    }
    getFileStream(path) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.fileWriter.getWriteStream(path, this.outputFormat);
        });
    }
    push(iri, quad) {
        return __awaiter(this, void 0, void 0, function* () {
            this.counter++;
            this.attemptLog();
            // Remove hash fragment
            const posHash = iri.indexOf('#');
            if (posHash >= 0) {
                iri = iri.slice(0, posHash);
            }
            const path = this.getFilePath(iri);
            const os = yield this.getFileStream(path);
            os.write(quad);
        });
    }
    close() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.fileWriter.close();
            this.attemptLog(true);
        });
    }
}
exports.QuadSinkFile = QuadSinkFile;
//# sourceMappingURL=QuadSinkFile.js.map
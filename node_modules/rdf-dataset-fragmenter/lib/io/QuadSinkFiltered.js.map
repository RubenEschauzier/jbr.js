{"version":3,"file":"QuadSinkFiltered.js","sourceRoot":"","sources":["QuadSinkFiltered.ts"],"names":[],"mappings":";;;;;;;;;;;;AAIA;;GAEG;AACH,MAAa,gBAAgB;IAI3B;;;OAGG;IACH,YAAmB,IAAe,EAAE,MAAoB;QACtD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEY,IAAI,CAAC,GAAW,EAAE,IAAc;;YAC3C,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAC7B,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aACjC;QACH,CAAC;KAAA;IAEY,KAAK;;YAChB,MAAM,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;QAC1B,CAAC;KAAA;CACF;AAtBD,4CAsBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IQuadMatcher } from '../quadmatcher/IQuadMatcher';\nimport type { IQuadSink } from './IQuadSink';\n\n/**\n * A quad sink that wraps over another quad sink and only passes the quads through that match the given filter.\n */\nexport class QuadSinkFiltered implements IQuadSink {\n  private readonly sink: IQuadSink;\n  private readonly filter: IQuadMatcher;\n\n  /**\n   * @param sink The sink to filter on.\n   * @param filter The filter to apply on quads.\n   */\n  public constructor(sink: IQuadSink, filter: IQuadMatcher) {\n    this.sink = sink;\n    this.filter = filter;\n  }\n\n  public async push(iri: string, quad: RDF.Quad): Promise<void> {\n    if (this.filter.matches(quad)) {\n      await this.sink.push(iri, quad);\n    }\n  }\n\n  public async close(): Promise<void> {\n    await this.sink.close();\n  }\n}\n"]}
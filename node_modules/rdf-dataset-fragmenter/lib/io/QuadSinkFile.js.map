{"version":3,"file":"QuadSinkFile.js","sourceRoot":"","sources":["QuadSinkFile.ts"],"names":[],"mappings":"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","sourcesContent":["import * as readline from 'readline';\nimport type { Writable } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport type { IQuadSink } from './IQuadSink';\nimport { ParallelFileWriter } from './ParallelFileWriter';\n\n/**\n * A quad sink that writes to files using an IRI to local file system path mapping.\n */\nexport class QuadSinkFile implements IQuadSink {\n  private readonly outputFormat: string;\n  private readonly iriToPath: Record<string, string>;\n  private readonly fileWriter: ParallelFileWriter;\n  private readonly log: boolean;\n  private readonly fileExtension?: string;\n\n  private counter = 0;\n\n  public constructor(options: IQuadSinkFileOptions) {\n    this.outputFormat = options.outputFormat;\n    this.iriToPath = options.iriToPath;\n    this.log = Boolean(options.log);\n    this.fileExtension = options.fileExtension;\n\n    this.fileWriter = new ParallelFileWriter({ streams: 128 });\n\n    this.attemptLog();\n  }\n\n  protected attemptLog(newLine = false): void {\n    if (this.log && (this.counter % 1_000 === 0 || newLine)) {\n      readline.clearLine(process.stdout, 0);\n      readline.cursorTo(process.stdout, 0);\n      process.stdout.write(`\\rHandled quads: ${this.counter / 1_000}K`);\n      if (newLine) {\n        process.stdout.write(`\\n`);\n      }\n    }\n  }\n\n  protected getFilePath(iri: string): string {\n    // Find base path from the first matching baseIRI\n    let path: string | undefined;\n    for (const [ baseIRI, basePath ] of Object.entries(this.iriToPath)) {\n      if (iri.startsWith(baseIRI)) {\n        path = basePath + iri.slice(baseIRI.length);\n        break;\n      }\n    }\n\n    // Crash if we did not find a matching baseIRI\n    if (!path) {\n      throw new Error(`No IRI mapping found for ${iri}`);\n    }\n\n    // Escape illegal directory names\n    path = path.replace(/[*|\"<>?:]/ug, '_');\n\n    // Add file extension if we don't have one yet\n    if (this.fileExtension && !/\\.[a-z]$/iu.exec(this.fileExtension)) {\n      path = `${path}${this.fileExtension}`;\n    }\n\n    return path;\n  }\n\n  protected async getFileStream(path: string): Promise<Writable> {\n    return this.fileWriter.getWriteStream(path, this.outputFormat);\n  }\n\n  public async push(iri: string, quad: RDF.Quad): Promise<void> {\n    this.counter++;\n    this.attemptLog();\n\n    // Remove hash fragment\n    const posHash = iri.indexOf('#');\n    if (posHash >= 0) {\n      iri = iri.slice(0, posHash);\n    }\n\n    const path = this.getFilePath(iri);\n    const os = await this.getFileStream(path);\n    os.write(quad);\n  }\n\n  public async close(): Promise<void> {\n    await this.fileWriter.close();\n    this.attemptLog(true);\n  }\n}\n\nexport interface IQuadSinkFileOptions {\n  outputFormat: string;\n  /**\n   * @range {json}\n   */\n  iriToPath: Record<string, string>;\n  log?: boolean;\n  fileExtension?: string;\n}\n"]}
{"version":3,"file":"QuadSinkComposite.js","sourceRoot":"","sources":["QuadSinkComposite.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA;;GAEG;AACH,MAAa,iBAAiB;IAG5B,YAAmB,KAAkB;QACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACrB,CAAC;IAEY,IAAI,CAAC,GAAW,EAAE,IAAc;;YAC3C,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC7B,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;aAC5B;QACH,CAAC;KAAA;IAEY,KAAK;;YAChB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBAC7B,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;aACpB;QACH,CAAC;KAAA;CACF;AAlBD,8CAkBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IQuadSink } from './IQuadSink';\n\n/**\n * A quad sink that combines multiple quad sinks.\n */\nexport class QuadSinkComposite implements IQuadSink {\n  private readonly sinks: IQuadSink[];\n\n  public constructor(sinks: IQuadSink[]) {\n    this.sinks = sinks;\n  }\n\n  public async push(iri: string, quad: RDF.Quad): Promise<void> {\n    for (const sink of this.sinks) {\n      await sink.push(iri, quad);\n    }\n  }\n\n  public async close(): Promise<void> {\n    for (const sink of this.sinks) {\n      await sink.close();\n    }\n  }\n}\n"]}
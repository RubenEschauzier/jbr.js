{"version":3,"file":"FragmentationStrategyObject.js","sourceRoot":"","sources":["FragmentationStrategyObject.ts"],"names":[],"mappings":";;;;;;;;;;;;AAGA,iFAA8E;AAC9E,6FAA0F;AAE1F;;GAEG;AACH,MAAa,2BAA4B,SAAQ,uEAAkC;IAGjF,YAAmB,aAAa,GAAG,IAAI;QACrC,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,IAAI,2DAA4B,CAAC,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,CAAC;IAC9F,CAAC;IAEe,UAAU,CAAC,IAAc,EAAE,QAAmB;;YAC5D,4BAA4B;YAC5B,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;gBACxC,0EAA0E;gBAC1E,MAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAE7C,uGAAuG;gBACvG,MAAM,IAAI,CAAC,eAAe,CAAC,2BAA2B,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;aAC7F;YAED,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAClD,CAAC;KAAA;IAEe,KAAK,CAAC,QAAmB;;;;;YACvC,MAAM,OAAM,KAAK,YAAC,QAAQ,CAAC,CAAC;YAC5B,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;KAAA;CACF;AAzBD,kEAyBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\n\nimport type { IQuadSink } from '../io/IQuadSink';\nimport { FragmentationBlankNodeBuffer } from './FragmentationBlankNodeBuffer';\nimport { FragmentationStrategyStreamAdapter } from './FragmentationStrategyStreamAdapter';\n\n/**\n * A fragmentation strategy that places quads into their object's document.\n */\nexport class FragmentationStrategyObject extends FragmentationStrategyStreamAdapter {\n  private readonly blankNodeBuffer: FragmentationBlankNodeBuffer<'object', 'subject'>;\n\n  public constructor(eagerFlushing = true) {\n    super();\n    this.blankNodeBuffer = new FragmentationBlankNodeBuffer('object', 'subject', eagerFlushing);\n  }\n\n  protected async handleQuad(quad: RDF.Quad, quadSink: IQuadSink): Promise<void> {\n    // Only accept IRI subjects.\n    if (quad.object.termType === 'NamedNode') {\n      // If the subject is a named node, add the quad to the subject's document.\n      await quadSink.push(quad.object.value, quad);\n\n      // Save the object in our blank node buffer, as it may be needed to identify documents for other quads.\n      await this.blankNodeBuffer.materializeValueForNamedKey(quad.subject, quad.object, quadSink);\n    }\n\n    await this.blankNodeBuffer.push(quad, quadSink);\n  }\n\n  protected async flush(quadSink: IQuadSink): Promise<void> {\n    await super.flush(quadSink);\n    await this.blankNodeBuffer.flush(quadSink);\n  }\n}\n"]}
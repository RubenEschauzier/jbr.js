{"version":3,"file":"FragmentationStrategyResourceObject.js","sourceRoot":"","sources":["FragmentationStrategyResourceObject.ts"],"names":[],"mappings":";;;;;;;;;;;;AAEA,6FAA0F;AAE1F;;;;;GAKG;AACH,MAAa,mCAAoC,SAAQ,uEAAkC;IAKzF,YAAmB,oBAA4B;QAC7C,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,IAAI,MAAM,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;QAE7D,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC;IAC3B,CAAC;IAEe,UAAU,CAAC,IAAc,EAAE,QAAmB;;YAC5D,yCAAyC;YACzC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC5C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;aAC9C;YAED,yBAAyB;YACzB,MAAM,MAAM,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACvD,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;gBACzB,yBAAyB;gBACzB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;iBAAM;gBACL,6DAA6D;gBAC7D,MAAM,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;aACzC;YAED,6BAA6B;YAC7B,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;gBACnD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,EAAE;oBACxC,MAAM,IAAI,KAAK,CAAC,kEAAkE,IAAI,CAAC,OAAO,CAAC,KAAK,eAAe,IAAI,CAAC,MAAM,CAAC,KAAK,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;iBACpK;gBAED,oCAAoC;gBACpC,MAAM,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAEhF,+EAA+E;gBAC/E,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;aACvD;QACH,CAAC;KAAA;IAEe,KAAK,CAAC,QAAmB;;;;;YACvC,MAAM,OAAM,KAAK,YAAC,QAAQ,CAAC,CAAC;YAC5B,KAAK,MAAM,WAAW,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;gBAC1D,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,EAAE;oBACnD,sCAAsC;oBACtC,OAAO,CAAC,IAAI,CAAC,kCAAkC,WAAW,sCAAsC,CAAC,CAAC;iBACnG;aACF;QACH,CAAC;KAAA;IAEa,mBAAmB,CAAC,QAAmB,EAAE,WAAmB,EAAE,SAAiB;;YAC3F,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC;YAC/C,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACxB,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;oBACxB,MAAM,QAAQ,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;iBACtC;aACF;QACH,CAAC;KAAA;CACF;AA5DD,kFA4DC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IQuadSink } from '../io/IQuadSink';\nimport { FragmentationStrategyStreamAdapter } from './FragmentationStrategyStreamAdapter';\n\n/**\n * A fragmentation strategy that groups triples by (subject) resources,\n * and places quads into the document identified by the given predicate value.\n *\n * Blank nodes are not supported.\n */\nexport class FragmentationStrategyResourceObject extends FragmentationStrategyStreamAdapter {\n  private readonly targetPredicate: RegExp;\n\n  public readonly resourceBuffer: Record<string, RDF.Quad[] | RDF.NamedNode>;\n\n  public constructor(targetPredicateRegex: string) {\n    super();\n    this.targetPredicate = new RegExp(targetPredicateRegex, 'u');\n\n    this.resourceBuffer = {};\n  }\n\n  protected async handleQuad(quad: RDF.Quad, quadSink: IQuadSink): Promise<void> {\n    // Create buffer if one doesn't exist yet\n    if (!this.resourceBuffer[quad.subject.value]) {\n      this.resourceBuffer[quad.subject.value] = [];\n    }\n\n    // Handle remaining quads\n    const buffer = this.resourceBuffer[quad.subject.value];\n    if (Array.isArray(buffer)) {\n      // Buffer remaining quads\n      buffer.push(quad);\n    } else {\n      // If the target predicate was already set, flush immediately\n      await quadSink.push(buffer.value, quad);\n    }\n\n    // Match the target predicate\n    if (this.targetPredicate.exec(quad.predicate.value)) {\n      if (quad.object.termType !== 'NamedNode') {\n        throw new Error(`Expected target predicate value of type NamedNode on resource '${quad.subject.value}', but got '${quad.object.value}' (${quad.object.termType})`);\n      }\n\n      // Flush the buffer of this resource\n      await this.flushResourceBuffer(quadSink, quad.subject.value, quad.object.value);\n\n      // Indicate that further triples of this resource should be emitted immediately\n      this.resourceBuffer[quad.subject.value] = quad.object;\n    }\n  }\n\n  protected async flush(quadSink: IQuadSink): Promise<void> {\n    await super.flush(quadSink);\n    for (const resourceIri of Object.keys(this.resourceBuffer)) {\n      if (Array.isArray(this.resourceBuffer[resourceIri])) {\n        // eslint-disable-next-line no-console\n        console.warn(`Detected quads of the resource ${resourceIri} without a defined target predicate.`);\n      }\n    }\n  }\n\n  private async flushResourceBuffer(quadSink: IQuadSink, resourceIri: string, targetIri: string): Promise<void> {\n    const quads = this.resourceBuffer[resourceIri];\n    if (Array.isArray(quads)) {\n      for (const quad of quads) {\n        await quadSink.push(targetIri, quad);\n      }\n    }\n  }\n}\n"]}
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FragmentationStrategyStreamAdapter = void 0;
const stream_1 = require("stream");
/**
 * An abstract implementation of a fragmentation strategy.
 */
class FragmentationStrategyStreamAdapter {
    fragment(quadStream, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            // eslint-disable-next-line @typescript-eslint/no-this-alias,consistent-this
            const self = this;
            const transform = new stream_1.Transform({
                objectMode: true,
                // eslint-disable-next-line no-undef
                transform(quad, encoding, callback) {
                    self.handleQuad(quad, quadSink).then(() => callback(), callback);
                },
            });
            yield new Promise((resolve, reject) => {
                quadStream.on('error', error => transformed.emit('error', error));
                const transformed = quadStream.pipe(transform);
                // Enter flow-mode, but not need to attach a data-listener
                transformed.resume();
                transformed.on('error', reject);
                transformed.on('end', resolve);
            });
            yield this.flush(quadSink);
        });
    }
    flush(quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            // Do nothing, implementors of this class can optionally override this
        });
    }
}
exports.FragmentationStrategyStreamAdapter = FragmentationStrategyStreamAdapter;
//# sourceMappingURL=FragmentationStrategyStreamAdapter.js.map
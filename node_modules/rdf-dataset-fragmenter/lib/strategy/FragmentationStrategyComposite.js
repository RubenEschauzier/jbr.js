"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FragmentationStrategyComposite = void 0;
const stream_1 = require("stream");
/**
 * A fragmentation strategy that combines multiple strategies.
 * This means that all the given strategies will be executed in parallel.
 */
class FragmentationStrategyComposite {
    constructor(strategies) {
        this.strategies = strategies;
    }
    fragment(quadStream, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(this.strategies.map(strategy => {
                const clone = new stream_1.PassThrough({ objectMode: true });
                const ret = strategy.fragment(clone, quadSink);
                quadStream.on('error', error => clone.emit('error', error));
                quadStream.pipe(clone);
                return ret;
            }));
        });
    }
}
exports.FragmentationStrategyComposite = FragmentationStrategyComposite;
//# sourceMappingURL=FragmentationStrategyComposite.js.map
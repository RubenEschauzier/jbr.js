"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FragmentationBlankNodeBuffer = void 0;
const rdf_string_1 = require("rdf-string");
/**
 * Buffers quads with blank nodes keys, and makes connections to non-blank node keys.
 */
class FragmentationBlankNodeBuffer {
    /**
     * @param keyKey @ignored The quad term key that should be checked for blank nodes.
     * @param keyValue @ignored The quad term value that may have a connection to the key.
     * @param eagerFlushing @ignored If the pending quads in the buffer should be flushed as soon as possible.
     */
    constructor(keyKey, keyValue, eagerFlushing) {
        this.valueKeyLinks = {};
        this.pendingBlankKeyQuads = {};
        this.keyKey = keyKey;
        this.keyValue = keyValue;
        this.eagerFlushing = eagerFlushing;
    }
    /**
     * Add the given quad into the buffer.
     * If the quad's key is a blank node, it will be stored inside the internal buffer.
     * @param quad An RDF quad.
     * @param quadSink The quad sink to push into.
     */
    push(quad, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            // If key is a blank node, buffer it
            if (quad[this.keyKey].termType === 'BlankNode') {
                if (!(quad[this.keyKey].value in this.pendingBlankKeyQuads)) {
                    this.pendingBlankKeyQuads[quad[this.keyKey].value] = [];
                }
                this.pendingBlankKeyQuads[quad[this.keyKey].value].push(quad);
                if (this.eagerFlushing) {
                    yield this.attemptFlushQuadsForLabel(quad[this.keyKey].value, quadSink);
                }
            }
        });
    }
    /**
     * If the given term value is a blank node, it will be stored in the internal link registry.
     * @param value A quad value term.
     * @param key A quad key term.
     * @param quadSink The quad sink to push into.
     */
    materializeValueForNamedKey(value, key, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            if (value.termType === 'BlankNode') {
                if (!(value.value in this.valueKeyLinks)) {
                    this.valueKeyLinks[value.value] = [];
                }
                this.valueKeyLinks[value.value].push(key);
                if (this.eagerFlushing) {
                    yield this.attemptFlushQuadsForLabel(value.value, quadSink);
                }
            }
        });
    }
    /**
     * Try to flush all quads connected to the given blank node label.
     * All flushed quads will be removed from the queue (`pendingBlankKeyQuads`).
     * The value key links will remain unchanged.
     * @param blankNodeLabel A blank node label.
     * @param quadSink The sink to push into.
     */
    attemptFlushQuadsForLabel(blankNodeLabel, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            const quads = this.pendingBlankKeyQuads[blankNodeLabel];
            const keys = this.valueKeyLinks[blankNodeLabel];
            if (quads && keys) {
                for (const key of keys) {
                    // Add the quad to the key's document.
                    for (const quad of quads) {
                        yield quadSink.push(key.value, quad);
                        // Add a key link for the current key, as we may need it in the next iteration
                        yield this.materializeValueForNamedKey(quad[this.keyValue], key, quadSink);
                    }
                }
                // Remove the blank node label from the queue, and indicate that we need to repeat the loop
                delete this.pendingBlankKeyQuads[blankNodeLabel];
                return true;
            }
            return false;
        });
    }
    /**
     * Iterate over the buffer, and emit all quads with blank node keys that have a connection to a non-blank node key.
     * @param quadSink The quad sink to push into.
     */
    flush(quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            // Loop until the pendingBlankSubjectQuads queue does not change anymore
            let changed = true;
            while (changed) {
                changed = false;
                for (const blankNodeLabel of Object.keys(this.pendingBlankKeyQuads)) {
                    if (yield this.attemptFlushQuadsForLabel(blankNodeLabel, quadSink)) {
                        changed = true;
                    }
                }
            }
            // Error if there are unowned blank nodes
            if (Object.keys(this.pendingBlankKeyQuads).length > 0) {
                // eslint-disable-next-line no-console
                console.warn(`Detected quads with blank node ${this.keyKey} that has no link to an IRI ${this.keyKey}:`);
                for (const quads of Object.values(this.pendingBlankKeyQuads)) {
                    for (const quad of quads) {
                        // eslint-disable-next-line no-console
                        console.warn(`  ${JSON.stringify((0, rdf_string_1.quadToStringQuad)(quad))}`);
                    }
                }
            }
        });
    }
}
exports.FragmentationBlankNodeBuffer = FragmentationBlankNodeBuffer;
//# sourceMappingURL=FragmentationBlankNodeBuffer.js.map
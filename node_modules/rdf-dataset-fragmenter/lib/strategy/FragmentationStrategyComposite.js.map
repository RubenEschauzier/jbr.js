{"version":3,"file":"FragmentationStrategyComposite.js","sourceRoot":"","sources":["FragmentationStrategyComposite.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,mCAAqC;AAKrC;;;GAGG;AACH,MAAa,8BAA8B;IAGzC,YAAmB,UAAoC;QACrD,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEY,QAAQ,CAAC,UAAiC,EAAE,QAAmB;;YAC1E,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAC/C,MAAM,KAAK,GAAG,IAAI,oBAAW,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;gBACpD,MAAM,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAC/C,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBAC5D,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACvB,OAAO,GAAG,CAAC;YACb,CAAC,CAAC,CAAC,CAAC;QACN,CAAC;KAAA;CACF;AAhBD,wEAgBC","sourcesContent":["import type { Readable } from 'stream';\nimport { PassThrough } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport type { IQuadSink } from '../io/IQuadSink';\nimport type { IFragmentationStrategy } from './IFragmentationStrategy';\n\n/**\n * A fragmentation strategy that combines multiple strategies.\n * This means that all the given strategies will be executed in parallel.\n */\nexport class FragmentationStrategyComposite implements IFragmentationStrategy {\n  private readonly strategies: IFragmentationStrategy[];\n\n  public constructor(strategies: IFragmentationStrategy[]) {\n    this.strategies = strategies;\n  }\n\n  public async fragment(quadStream: RDF.Stream & Readable, quadSink: IQuadSink): Promise<void> {\n    await Promise.all(this.strategies.map(strategy => {\n      const clone = new PassThrough({ objectMode: true });\n      const ret = strategy.fragment(clone, quadSink);\n      quadStream.on('error', error => clone.emit('error', error));\n      quadStream.pipe(clone);\n      return ret;\n    }));\n  }\n}\n"]}
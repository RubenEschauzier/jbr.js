"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FragmentationStrategyResourceObject = void 0;
const FragmentationStrategyStreamAdapter_1 = require("./FragmentationStrategyStreamAdapter");
/**
 * A fragmentation strategy that groups triples by (subject) resources,
 * and places quads into the document identified by the given predicate value.
 *
 * Blank nodes are not supported.
 */
class FragmentationStrategyResourceObject extends FragmentationStrategyStreamAdapter_1.FragmentationStrategyStreamAdapter {
    constructor(targetPredicateRegex) {
        super();
        this.targetPredicate = new RegExp(targetPredicateRegex, 'u');
        this.resourceBuffer = {};
    }
    handleQuad(quad, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            // Create buffer if one doesn't exist yet
            if (!this.resourceBuffer[quad.subject.value]) {
                this.resourceBuffer[quad.subject.value] = [];
            }
            // Handle remaining quads
            const buffer = this.resourceBuffer[quad.subject.value];
            if (Array.isArray(buffer)) {
                // Buffer remaining quads
                buffer.push(quad);
            }
            else {
                // If the target predicate was already set, flush immediately
                yield quadSink.push(buffer.value, quad);
            }
            // Match the target predicate
            if (this.targetPredicate.exec(quad.predicate.value)) {
                if (quad.object.termType !== 'NamedNode') {
                    throw new Error(`Expected target predicate value of type NamedNode on resource '${quad.subject.value}', but got '${quad.object.value}' (${quad.object.termType})`);
                }
                // Flush the buffer of this resource
                yield this.flushResourceBuffer(quadSink, quad.subject.value, quad.object.value);
                // Indicate that further triples of this resource should be emitted immediately
                this.resourceBuffer[quad.subject.value] = quad.object;
            }
        });
    }
    flush(quadSink) {
        const _super = Object.create(null, {
            flush: { get: () => super.flush }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.flush.call(this, quadSink);
            for (const resourceIri of Object.keys(this.resourceBuffer)) {
                if (Array.isArray(this.resourceBuffer[resourceIri])) {
                    // eslint-disable-next-line no-console
                    console.warn(`Detected quads of the resource ${resourceIri} without a defined target predicate.`);
                }
            }
        });
    }
    flushResourceBuffer(quadSink, resourceIri, targetIri) {
        return __awaiter(this, void 0, void 0, function* () {
            const quads = this.resourceBuffer[resourceIri];
            if (Array.isArray(quads)) {
                for (const quad of quads) {
                    yield quadSink.push(targetIri, quad);
                }
            }
        });
    }
}
exports.FragmentationStrategyResourceObject = FragmentationStrategyResourceObject;
//# sourceMappingURL=FragmentationStrategyResourceObject.js.map
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FragmentationStrategySubject = void 0;
const relative_to_absolute_iri_1 = require("relative-to-absolute-iri");
const FragmentationBlankNodeBuffer_1 = require("./FragmentationBlankNodeBuffer");
const FragmentationStrategyStreamAdapter_1 = require("./FragmentationStrategyStreamAdapter");
/**
 * A fragmentation strategy that places quads into their subject's document.
 */
class FragmentationStrategySubject extends FragmentationStrategyStreamAdapter_1.FragmentationStrategyStreamAdapter {
    // eslint-disable-next-line default-param-last
    constructor(eagerFlushing = true, relativePath) {
        super();
        this.blankNodeBuffer = new FragmentationBlankNodeBuffer_1.FragmentationBlankNodeBuffer('subject', 'object', eagerFlushing);
        this.relativePath = relativePath;
    }
    handleQuad(quad, quadSink) {
        return __awaiter(this, void 0, void 0, function* () {
            // Only accept IRI subjects.
            if (quad.subject.termType === 'NamedNode') {
                // If the subject is a named node, add the quad to the subject's document.
                const baseIri = quad.subject.value.endsWith('/') ? quad.subject.value : `${quad.subject.value}/`;
                const iri = this.relativePath ? (0, relative_to_absolute_iri_1.resolve)(this.relativePath, baseIri) : quad.subject.value;
                yield quadSink.push(iri, quad);
                // Save the subject in our blank node buffer, as it may be needed to identify documents for other quads.
                yield this.blankNodeBuffer.materializeValueForNamedKey(quad.object, quad.subject, quadSink);
            }
            yield this.blankNodeBuffer.push(quad, quadSink);
        });
    }
    flush(quadSink) {
        const _super = Object.create(null, {
            flush: { get: () => super.flush }
        });
        return __awaiter(this, void 0, void 0, function* () {
            yield _super.flush.call(this, quadSink);
            yield this.blankNodeBuffer.flush(quadSink);
        });
    }
}
exports.FragmentationStrategySubject = FragmentationStrategySubject;
//# sourceMappingURL=FragmentationStrategySubject.js.map
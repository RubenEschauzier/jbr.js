{"version":3,"file":"FragmentationStrategySubject.js","sourceRoot":"","sources":["FragmentationStrategySubject.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,uEAAmD;AAEnD,iFAA8E;AAC9E,6FAA0F;AAE1F;;GAEG;AACH,MAAa,4BAA6B,SAAQ,uEAAkC;IAIlF,8CAA8C;IAC9C,YAAmB,aAAa,GAAG,IAAI,EAAE,YAAqB;QAC5D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,eAAe,GAAG,IAAI,2DAA4B,CAAC,SAAS,EAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;QAC5F,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEe,UAAU,CAAC,IAAc,EAAE,QAAmB;;YAC5D,4BAA4B;YAC5B,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,WAAW,EAAE;gBACzC,0EAA0E;gBAC1E,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC;gBACjG,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,IAAA,kCAAO,EAAC,IAAI,CAAC,YAAY,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;gBACzF,MAAM,QAAQ,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;gBAE/B,wGAAwG;gBACxG,MAAM,IAAI,CAAC,eAAe,CAAC,2BAA2B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;aAC7F;YAED,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAClD,CAAC;KAAA;IAEe,KAAK,CAAC,QAAmB;;;;;YACvC,MAAM,OAAM,KAAK,YAAC,QAAQ,CAAC,CAAC;YAC5B,MAAM,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QAC7C,CAAC;KAAA;CACF;AA9BD,oEA8BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { resolve } from 'relative-to-absolute-iri';\nimport type { IQuadSink } from '../io/IQuadSink';\nimport { FragmentationBlankNodeBuffer } from './FragmentationBlankNodeBuffer';\nimport { FragmentationStrategyStreamAdapter } from './FragmentationStrategyStreamAdapter';\n\n/**\n * A fragmentation strategy that places quads into their subject's document.\n */\nexport class FragmentationStrategySubject extends FragmentationStrategyStreamAdapter {\n  private readonly blankNodeBuffer: FragmentationBlankNodeBuffer<'subject', 'object'>;\n  private readonly relativePath?: string;\n\n  // eslint-disable-next-line default-param-last\n  public constructor(eagerFlushing = true, relativePath?: string) {\n    super();\n    this.blankNodeBuffer = new FragmentationBlankNodeBuffer('subject', 'object', eagerFlushing);\n    this.relativePath = relativePath;\n  }\n\n  protected async handleQuad(quad: RDF.Quad, quadSink: IQuadSink): Promise<void> {\n    // Only accept IRI subjects.\n    if (quad.subject.termType === 'NamedNode') {\n      // If the subject is a named node, add the quad to the subject's document.\n      const baseIri = quad.subject.value.endsWith('/') ? quad.subject.value : `${quad.subject.value}/`;\n      const iri = this.relativePath ? resolve(this.relativePath, baseIri) : quad.subject.value;\n      await quadSink.push(iri, quad);\n\n      // Save the subject in our blank node buffer, as it may be needed to identify documents for other quads.\n      await this.blankNodeBuffer.materializeValueForNamedKey(quad.object, quad.subject, quadSink);\n    }\n\n    await this.blankNodeBuffer.push(quad, quadSink);\n  }\n\n  protected async flush(quadSink: IQuadSink): Promise<void> {\n    await super.flush(quadSink);\n    await this.blankNodeBuffer.flush(quadSink);\n  }\n}\n"]}
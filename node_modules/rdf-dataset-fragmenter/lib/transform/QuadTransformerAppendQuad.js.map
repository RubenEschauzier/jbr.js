{"version":3,"file":"QuadTransformerAppendQuad.js","sourceRoot":"","sources":["QuadTransformerAppendQuad.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAK/C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,yBAAyB;IACpC,YACkB,OAAqB,EACrB,OAAsB,EACtB,SAAwB,EACxB,MAAqB,EACrB,KAAoB;QAJpB,YAAO,GAAP,OAAO,CAAc;QACrB,YAAO,GAAP,OAAO,CAAe;QACtB,cAAS,GAAT,SAAS,CAAe;QACxB,WAAM,GAAN,MAAM,CAAe;QACrB,UAAK,GAAL,KAAK,CAAe;IACnC,CAAC;IAEG,SAAS,CAAC,IAAc;QAC7B,MAAM,KAAK,GAAG,CAAE,IAAI,CAAE,CAAC;QAEvB,6BAA6B;QAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC/B;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAES,WAAW,CAAC,QAAkB,EAAE,OAAmB;QAC3D,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CACC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAC5B,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,EACnC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,EAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAC9C,CAAC,CAAC;IACL,CAAC;CACF;AA5BD,8DA4BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { IQuadMatcher } from '../quadmatcher/IQuadMatcher';\nimport type { IQuadTransformer } from './IQuadTransformer';\nimport type { ITermTemplate } from './termtemplate/ITermTemplate';\n\nconst DF = new DataFactory();\n\n/**\n * A quad transformer that appends a quad to matching quads.\n */\nexport class QuadTransformerAppendQuad implements IQuadTransformer {\n  public constructor(\n    public readonly matcher: IQuadMatcher,\n    public readonly subject: ITermTemplate,\n    public readonly predicate: ITermTemplate,\n    public readonly object: ITermTemplate,\n    public readonly graph: ITermTemplate,\n  ) {}\n\n  public transform(quad: RDF.Quad): RDF.Quad[] {\n    const quads = [ quad ];\n\n    // Append to applicable quads\n    if (this.matcher.matches(quad)) {\n      this.appendQuads(quad, quads);\n    }\n\n    return quads;\n  }\n\n  protected appendQuads(original: RDF.Quad, results: RDF.Quad[]): void {\n    results.push(DF.quad(\n      <RDF.Quad_Subject> this.subject.getTerm(original),\n      <RDF.Quad_Predicate> this.predicate.getTerm(original),\n      <RDF.Quad_Object> this.object.getTerm(original),\n      <RDF.Quad_Graph> this.graph.getTerm(original),\n    ));\n  }\n}\n"]}
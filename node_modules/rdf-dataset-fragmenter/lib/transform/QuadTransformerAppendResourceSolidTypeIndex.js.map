{"version":3,"file":"QuadTransformerAppendResourceSolidTypeIndex.js","sourceRoot":"","sources":["QuadTransformerAppendResourceSolidTypeIndex.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\n\nimport { resolve } from 'relative-to-absolute-iri';\nimport { ResourceIdentifier } from './identifier/ResourceIdentifier';\nimport type { IQuadTransformer } from './IQuadTransformer';\n\nconst DF = new DataFactory();\n\n/**\n * A quad transformer that appends SCL policies to resources of the given type.\n */\nexport class QuadTransformerAppendResourceSolidTypeIndex implements IQuadTransformer {\n  public static readonly PREFIX_SOLID = 'http://www.w3.org/ns/solid/terms#';\n  public static readonly IRI_SOLID_PUBLIC_TYPE_INDEX = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}publicTypeIndex`);\n  public static readonly IRI_SOLID_TYPE_INDEX = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}TypeIndex`);\n  public static readonly IRI_SOLID_LISTED_DOCUMENT = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}ListedDocument`);\n  public static readonly IRI_SOLID_TYPE_REGISTRATION = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}TypeRegistration`);\n  public static readonly IRI_SOLID_FOR_CLASS = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}forClass`);\n  public static readonly IRI_SOLID_INSTANCE = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}instance`);\n  public static readonly IRI_SOLID_INSTANCE_CONTAINER = DF.namedNode(`${QuadTransformerAppendResourceSolidTypeIndex.PREFIX_SOLID}instanceContainer`);\n  public static readonly IRI_A = DF.namedNode(`http://www.w3.org/1999/02/22-rdf-syntax-ns#type`);\n\n  public readonly resourceIdentifier: ResourceIdentifier<boolean>;\n  private readonly typeIndex: string;\n  private readonly entrySuffix: string;\n  private readonly entryReference: string;\n  private readonly entryContainer: boolean;\n\n  /**\n   * @param typeRegex The RDF type that should be used to capture resources.\n   * @param profilePredicateRegex Predicate regex on the resource that contains a reference to the relevant Solid\n   *                              profile.\n   * @param typeIndex URL relative to the Solid profile URL for the type index.\n   * @param entrySuffix String to append to the type index entry.\n   * @param entryReference URL relative to the Solid profile URL for the type index instances reference.\n   * @param entryContainer If the `entryReference` refers to a Solid container, otherwise it refers to a single index\n   *                       file.\n   */\n  public constructor(\n    typeRegex: string,\n    profilePredicateRegex: string,\n    typeIndex: string,\n    entrySuffix: string,\n    entryReference: string,\n    entryContainer: boolean,\n  ) {\n    this.resourceIdentifier = new ResourceIdentifier<boolean>(\n      typeRegex,\n      profilePredicateRegex,\n    );\n    this.typeIndex = typeIndex;\n    this.entrySuffix = entrySuffix;\n    this.entryReference = entryReference;\n    this.entryContainer = entryContainer;\n  }\n\n  public transform(quad: RDF.Quad): RDF.Quad[] {\n    const returnQuads: RDF.Quad[] = [ quad ];\n\n    // Add buffer entry on applicable resource type\n    this.resourceIdentifier.tryInitializingBuffer(quad);\n\n    // If this resource is buffered\n    if (this.resourceIdentifier.isQuadBuffered(quad)) {\n      const resource = this.resourceIdentifier.getBufferResource(quad);\n\n      // Try to set the target\n      this.resourceIdentifier.tryStoringTarget(resource, quad);\n\n      // Check if resource is complete\n      if (resource.target) {\n        const typeIndex = DF.namedNode(resolve(this.typeIndex, resource.target.value));\n\n        // Push quad for link from target profile to type index\n        returnQuads.push(DF.quad(\n          resource.target,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_PUBLIC_TYPE_INDEX,\n          typeIndex,\n        ));\n\n        // Push quads for the type index definition\n        returnQuads.push(DF.quad(\n          typeIndex,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_A,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_TYPE_INDEX,\n        ));\n        returnQuads.push(DF.quad(\n          typeIndex,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_A,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_LISTED_DOCUMENT,\n        ));\n\n        // Push quads for type index entry\n        const typeIndexEntry = DF.namedNode(typeIndex.value + this.entrySuffix);\n        returnQuads.push(DF.quad(\n          typeIndexEntry,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_A,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_TYPE_REGISTRATION,\n        ));\n        returnQuads.push(DF.quad(\n          typeIndexEntry,\n          QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_FOR_CLASS,\n          resource.type,\n        ));\n        returnQuads.push(DF.quad(\n          typeIndexEntry,\n          this.entryContainer ?\n            QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_INSTANCE_CONTAINER :\n            QuadTransformerAppendResourceSolidTypeIndex.IRI_SOLID_INSTANCE,\n          DF.namedNode(resolve(this.entryReference, resource.target.value)),\n        ));\n\n        // Clear the buffer, and set rewriting rule\n        this.resourceIdentifier.applyMapping(quad, true);\n      }\n    }\n\n    return returnQuads;\n  }\n}\n"]}
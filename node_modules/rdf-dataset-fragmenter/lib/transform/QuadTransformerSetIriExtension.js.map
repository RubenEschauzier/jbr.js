{"version":3,"file":"QuadTransformerSetIriExtension.js","sourceRoot":"","sources":["QuadTransformerSetIriExtension.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAC/C,iEAA8D;AAE9D,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;;GAGG;AACH,MAAa,8BAA+B,SAAQ,2CAAoB;IAItE,YAAmB,SAAiB,EAAE,UAAmB;QACvD,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IACzE,CAAC;IAES,aAAa,CAAC,IAAc;QACpC,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW,IAAI,CAAC,CAAC,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;YAC3F,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YACvB,MAAM,cAAc,GAAG,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,cAAc,EAAE;gBAClB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;aACjE;YACD,OAAO,EAAE,CAAC,SAAS,CAAC,GAAG,KAAK,IAAI,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;SACnD;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AArBD,wEAqBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { QuadTransformerTerms } from './QuadTransformerTerms';\n\nconst DF = new DataFactory();\n\n/**\n * A quad transformer that enforces the configured extension on all named nodes.\n * The given extension should not start with `.`.\n */\nexport class QuadTransformerSetIriExtension extends QuadTransformerTerms {\n  private readonly extension: string;\n  private readonly iriPattern?: RegExp;\n\n  public constructor(extension: string, iriPattern?: string) {\n    super();\n    this.extension = extension;\n    this.iriPattern = iriPattern ? new RegExp(iriPattern, 'u') : undefined;\n  }\n\n  protected transformTerm(term: RDF.Term): RDF.Term {\n    if (term.termType === 'NamedNode' && (!this.iriPattern || this.iriPattern.exec(term.value))) {\n      let value = term.value;\n      const extensionMatch = /\\.[a-z]*$/iu.exec(value);\n      if (extensionMatch) {\n        value = value.slice(0, value.length - extensionMatch[0].length);\n      }\n      return DF.namedNode(`${value}.${this.extension}`);\n    }\n    return term;\n  }\n}\n"]}
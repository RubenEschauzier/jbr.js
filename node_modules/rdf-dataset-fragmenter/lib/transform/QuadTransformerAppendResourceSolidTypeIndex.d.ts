import type * as RDF from '@rdfjs/types';
import { ResourceIdentifier } from './identifier/ResourceIdentifier';
import type { IQuadTransformer } from './IQuadTransformer';
/**
 * A quad transformer that appends SCL policies to resources of the given type.
 */
export declare class QuadTransformerAppendResourceSolidTypeIndex implements IQuadTransformer {
    static readonly PREFIX_SOLID = "http://www.w3.org/ns/solid/terms#";
    static readonly IRI_SOLID_PUBLIC_TYPE_INDEX: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#publicTypeIndex">;
    static readonly IRI_SOLID_TYPE_INDEX: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#TypeIndex">;
    static readonly IRI_SOLID_LISTED_DOCUMENT: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#ListedDocument">;
    static readonly IRI_SOLID_TYPE_REGISTRATION: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#TypeRegistration">;
    static readonly IRI_SOLID_FOR_CLASS: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#forClass">;
    static readonly IRI_SOLID_INSTANCE: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#instance">;
    static readonly IRI_SOLID_INSTANCE_CONTAINER: import("rdf-data-factory").NamedNode<"http://www.w3.org/ns/solid/terms#instanceContainer">;
    static readonly IRI_A: import("rdf-data-factory").NamedNode<"http://www.w3.org/1999/02/22-rdf-syntax-ns#type">;
    readonly resourceIdentifier: ResourceIdentifier<boolean>;
    private readonly typeIndex;
    private readonly entrySuffix;
    private readonly entryReference;
    private readonly entryContainer;
    /**
     * @param typeRegex The RDF type that should be used to capture resources.
     * @param profilePredicateRegex Predicate regex on the resource that contains a reference to the relevant Solid
     *                              profile.
     * @param typeIndex URL relative to the Solid profile URL for the type index.
     * @param entrySuffix String to append to the type index entry.
     * @param entryReference URL relative to the Solid profile URL for the type index instances reference.
     * @param entryContainer If the `entryReference` refers to a Solid container, otherwise it refers to a single index
     *                       file.
     */
    constructor(typeRegex: string, profilePredicateRegex: string, typeIndex: string, entrySuffix: string, entryReference: string, entryContainer: boolean);
    transform(quad: RDF.Quad): RDF.Quad[];
}

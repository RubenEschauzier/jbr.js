{"version":3,"file":"QuadTransformStream.js","sourceRoot":"","sources":["QuadTransformStream.ts"],"names":[],"mappings":";;;AACA,mCAAmC;AAInC;;GAEG;AACH,MAAa,mBAAoB,SAAQ,kBAAS;IAGhD,YAAmB,YAAgC;QACjD,KAAK,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;QAC5B,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,eAAe,CAAC,IAAc;QACnC,IAAI,KAAK,GAAG,CAAE,IAAI,CAAE,CAAC;QACrB,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YAC3C,MAAM,QAAQ,GAAe,EAAE,CAAC;YAChC,KAAK,MAAM,MAAM,IAAI,KAAK,EAAE;gBAC1B,KAAK,MAAM,OAAO,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;oBACnD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACxB;aACF;YACD,KAAK,GAAG,QAAQ,CAAC;SAClB;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,oCAAoC;IAC7B,UAAU,CAAC,IAAc,EAAE,QAAwB,EAAE,QAA2B;QACrF,KAAK,MAAM,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;YACxD,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SAC5B;QACD,QAAQ,EAAE,CAAC;IACb,CAAC;IAEM,MAAM,CAAC,QAA2B;QACvC,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YAC3C,IAAI,WAAW,CAAC,GAAG,EAAE;gBACnB,WAAW,CAAC,GAAG,EAAE,CAAC;aACnB;SACF;QACD,QAAQ,EAAE,CAAC;IACb,CAAC;CACF;AAtCD,kDAsCC","sourcesContent":["import type { TransformCallback } from 'stream';\nimport { Transform } from 'stream';\nimport type * as RDF from '@rdfjs/types';\nimport type { IQuadTransformer } from './IQuadTransformer';\n\n/**\n * A transform stream that runs quads through an array of transformers.\n */\nexport class QuadTransformStream extends Transform {\n  private readonly transformers: IQuadTransformer[];\n\n  public constructor(transformers: IQuadTransformer[]) {\n    super({ objectMode: true });\n    this.transformers = transformers;\n  }\n\n  public runTransformers(quad: RDF.Quad): RDF.Quad[] {\n    let quads = [ quad ];\n    for (const transformer of this.transformers) {\n      const newQuads: RDF.Quad[] = [];\n      for (const quadIn of quads) {\n        for (const quadOut of transformer.transform(quadIn)) {\n          newQuads.push(quadOut);\n        }\n      }\n      quads = newQuads;\n    }\n    return quads;\n  }\n\n  // eslint-disable-next-line no-undef\n  public _transform(quad: RDF.Quad, encoding: BufferEncoding, callback: TransformCallback): void {\n    for (const transformedQuad of this.runTransformers(quad)) {\n      this.push(transformedQuad);\n    }\n    callback();\n  }\n\n  public _flush(callback: TransformCallback): void {\n    for (const transformer of this.transformers) {\n      if (transformer.end) {\n        transformer.end();\n      }\n    }\n    callback();\n  }\n}\n"]}
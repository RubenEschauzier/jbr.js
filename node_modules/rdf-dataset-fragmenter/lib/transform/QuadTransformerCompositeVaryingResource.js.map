{"version":3,"file":"QuadTransformerCompositeVaryingResource.js","sourceRoot":"","sources":["QuadTransformerCompositeVaryingResource.ts"],"names":[],"mappings":"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","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { ResourceIdentifier } from './identifier/ResourceIdentifier';\nimport type { IQuadTransformer } from './IQuadTransformer';\n\nconst DF = new DataFactory();\n\n/**\n * A quad transformer that wraps over other quad transformers,\n * and varies between based based on the configured resource type.\n *\n * Concretely, it will match all resources of the given type,\n * and evenly distribute these resources to the different quad transformers.\n * It will make sure that different triples from a given resources will remain coupled.\n *\n * WARNING: This transformer assumes that all the applicable resources\n * have `rdf:type` occurring as first triple with the resource IRI as subject.\n */\nexport class QuadTransformerCompositeVaryingResource implements IQuadTransformer {\n  private readonly transformers: IQuadTransformer[];\n  public readonly resourceIdentifier: ResourceIdentifier<IQuadTransformer>;\n\n  public constructor(\n    typeRegex: string,\n    targetPredicateRegex: string,\n    transformers: IQuadTransformer[],\n  ) {\n    this.transformers = transformers;\n    this.resourceIdentifier = new ResourceIdentifier<IQuadTransformer>(\n      typeRegex,\n      targetPredicateRegex,\n    );\n  }\n\n  public transform(quad: RDF.Quad): RDF.Quad[] {\n    // If a subject or object in the quad has been remapped (resource has been fully defined before)\n    const isBuffered = this.resourceIdentifier.isQuadBuffered(quad);\n    if (!isBuffered) {\n      let quads = [ quad ];\n      const modified = this.resourceIdentifier.forEachMappedResource(quad, transformer => {\n        quads = quads.flatMap(subQuad => transformer.transform(subQuad));\n      });\n      if (modified) {\n        return quads;\n      }\n    }\n\n    // Add buffer entry on applicable resource type\n    if (this.resourceIdentifier.tryInitializingBuffer(quad)) {\n      // We will emit the quad later\n      return [];\n    }\n\n    // If this resource is buffered\n    if (isBuffered) {\n      const resource = this.resourceIdentifier.getBufferResource(quad);\n\n      // Try to set the target\n      this.resourceIdentifier.tryStoringTarget(resource, quad);\n\n      // Check if resource is complete\n      if (resource.target) {\n        // Determine a transformer based on the creator IRI\n        let creatorHash = 0;\n        for (let i = 0; i < resource.target.value.length; i++) {\n          // eslint-disable-next-line no-bitwise\n          creatorHash += resource.target.value.charCodeAt(i);\n        }\n        creatorHash = Math.abs(creatorHash);\n        const transformerIndex = creatorHash % this.transformers.length;\n        const transformer = this.transformers[transformerIndex];\n\n        // Clear the buffer, and set rewriting rule\n        this.resourceIdentifier.applyMapping(quad, transformer);\n\n        // Flush buffered quads\n        return resource.quads.flatMap(subQuad => {\n          // Run through transformers in a loop until the quads don't change anymore\n          let subQuadsOut = [];\n          let subQuadsLoop = [ subQuad ];\n          while (subQuadsOut.length !== subQuadsLoop.length) {\n            subQuadsOut = subQuadsLoop;\n            for (const subQuadLoop of subQuadsOut) {\n              // eslint-disable-next-line @typescript-eslint/no-loop-func\n              this.resourceIdentifier.forEachMappedResource(subQuadLoop, (subTransformer, component) => {\n                // Pass the current quad component as allowed component to the transformer,\n                // so that no other components of that quad are considered by the transformer.\n                subQuadsLoop = subQuadsLoop\n                  .flatMap(subSubQuadLoop => subTransformer.transform(subSubQuadLoop, component));\n              });\n            }\n          }\n          subQuadsOut = subQuadsLoop;\n\n          return subQuadsOut;\n        });\n      }\n\n      // Don't emit anything if our buffer is incomplete\n      return [];\n    }\n\n    return [ quad ];\n  }\n\n  public end(): void {\n    this.resourceIdentifier.onEnd();\n\n    // Terminate all transformers\n    for (const transformer of this.transformers) {\n      if (transformer.end) {\n        transformer.end();\n      }\n    }\n  }\n}\n"]}
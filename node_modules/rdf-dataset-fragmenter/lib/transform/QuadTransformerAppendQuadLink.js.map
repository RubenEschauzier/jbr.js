{"version":3,"file":"QuadTransformerAppendQuadLink.js","sourceRoot":"","sources":["QuadTransformerAppendQuadLink.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAE/C,uEAAmD;AAInD,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,6BAA6B;IAWxC,YACE,OAAqB,EACrB,UAAwB,EACxB,SAAiB,EACjB,IAAY,EACZ,QAAiB,EACjB,OAAiB,EACjB,uBAAiC;QAEjC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAC9D,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;IACzD,CAAC;IAEM,SAAS,CAAC,IAAc;QAC7B,MAAM,KAAK,GAAG,CAAE,IAAI,CAAE,CAAC;QAEvB,6BAA6B;QAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC/B;QAED,OAAO,KAAK,CAAC;IACf,CAAC;IAES,WAAW,CAAC,QAAkB,EAAE,OAAmB;QAC3D,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAE7C,uBAAuB;QACvB,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,UAAU,CAAC,KAAK,GAAG,CAAC;QAC3F,IAAI,SAAS,GAAG,IAAA,kCAAO,EAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;QAC5C,IAAI,IAAI,CAAC,uBAAuB,IAAI,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;YAC3D,SAAS,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACpC;QACD,MAAM,MAAM,GAAG,EAAE,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QAEvC,+BAA+B;QAC/B,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAO,UAAU,CAAC,CAAC,CAAC;SAChE;aAAM;YACL,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAM,UAAU,EAAE,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;SAChE;QAED,2CAA2C;QAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,6BAA6B,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;SACtF;IACH,CAAC;;AA9DH,sEA+DC;AA9DyB,sCAAQ,GAAG,EAAE,CAAC,SAAS,CAAC,iDAAiD,CAAC,CAAC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport type { QuadTermName } from 'rdf-terms';\nimport { resolve } from 'relative-to-absolute-iri';\nimport type { IQuadMatcher } from '../quadmatcher/IQuadMatcher';\nimport type { IQuadTransformer } from './IQuadTransformer';\n\nconst DF = new DataFactory();\n\n/**\n * A quad transformer that appends a link to matching quads.\n */\nexport class QuadTransformerAppendQuadLink implements IQuadTransformer {\n  private static readonly RDF_TYPE = DF.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\n\n  private readonly matcher: IQuadMatcher;\n  private readonly identifier: QuadTermName;\n  private readonly predicate: RDF.NamedNode;\n  private readonly link: string;\n  private readonly linkType?: RDF.NamedNode;\n  private readonly reverse?: boolean;\n  private readonly linkRemoveTrailingSlash?: boolean;\n\n  public constructor(\n    matcher: IQuadMatcher,\n    identifier: QuadTermName,\n    predicate: string,\n    link: string,\n    linkType?: string,\n    reverse?: boolean,\n    linkRemoveTrailingSlash?: boolean,\n  ) {\n    this.matcher = matcher;\n    this.identifier = identifier;\n    this.predicate = DF.namedNode(predicate);\n    this.link = link;\n    this.linkType = linkType ? DF.namedNode(linkType) : undefined;\n    this.reverse = reverse;\n    this.linkRemoveTrailingSlash = linkRemoveTrailingSlash;\n  }\n\n  public transform(quad: RDF.Quad): RDF.Quad[] {\n    const quads = [ quad ];\n\n    // Append to applicable quads\n    if (this.matcher.matches(quad)) {\n      this.appendQuads(quad, quads);\n    }\n\n    return quads;\n  }\n\n  protected appendQuads(original: RDF.Quad, results: RDF.Quad[]): void {\n    const newSubject = original[this.identifier];\n\n    // Determine target IRI\n    const baseIri = newSubject.value.endsWith('/') ? newSubject.value : `${newSubject.value}/`;\n    let targetIri = resolve(this.link, baseIri);\n    if (this.linkRemoveTrailingSlash && targetIri.endsWith('/')) {\n      targetIri = targetIri.slice(0, -1);\n    }\n    const target = DF.namedNode(targetIri);\n\n    // Link from resource to target\n    if (this.reverse) {\n      results.push(DF.quad(target, this.predicate, <any>newSubject));\n    } else {\n      results.push(DF.quad(<any>newSubject, this.predicate, target));\n    }\n\n    // Optionally define the type of the target\n    if (this.linkType) {\n      results.push(DF.quad(target, QuadTransformerAppendQuadLink.RDF_TYPE, this.linkType));\n    }\n  }\n}\n"]}
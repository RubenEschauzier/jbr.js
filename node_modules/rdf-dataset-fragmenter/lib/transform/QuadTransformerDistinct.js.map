{"version":3,"file":"QuadTransformerDistinct.js","sourceRoot":"","sources":["QuadTransformerDistinct.ts"],"names":[],"mappings":";;;AAEA,2CAA8C;AAG9C;;;GAGG;AACH,MAAa,uBAAuB;IAIlC,YAAmB,WAA6B;QAC9C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,CAAC;IAEM,SAAS,CAAC,IAAc,EAAE,gBAAuC;QACtE,OAAO,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,IAAI,CAAC;aACpC,MAAM,CAAC,OAAO,CAAC,EAAE;YAChB,wDAAwD;YACxD,IAAI,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;gBACxB,OAAO,IAAI,CAAC;aACb;YAED,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,iCAAM,IAAA,6BAAgB,EAAC,OAAO,CAAC,KAAE,gBAAgB,IAAG,CAAC;YAChF,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC9B,OAAO,KAAK,CAAC;aACd;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAC3B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,GAAG;QACR,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE;YACxB,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC;SACxB;IACH,CAAC;CACF;AA/BD,0DA+BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\n\nimport { quadToStringQuad } from 'rdf-string';\nimport type { IQuadTransformer } from './IQuadTransformer';\n\n/**\n * A quad transformer that wraps over another quad transformer and removes duplicates produced by the transformer.\n * Only quads that are produced by the quad transformer (and are unequal to the incoming quad) will be filtered away.\n */\nexport class QuadTransformerDistinct implements IQuadTransformer {\n  private readonly transformer: IQuadTransformer;\n  private readonly passedQuads: Set<string>;\n\n  public constructor(transformer: IQuadTransformer) {\n    this.transformer = transformer;\n    this.passedQuads = new Set();\n  }\n\n  public transform(quad: RDF.Quad, allowedComponent?: 'subject' | 'object'): RDF.Quad[] {\n    return this.transformer.transform(quad)\n      .filter(quadOut => {\n        // Always let through quads that equal the incoming quad\n        if (quadOut.equals(quad)) {\n          return true;\n        }\n\n        const hash = JSON.stringify({ ...quadToStringQuad(quadOut), allowedComponent });\n        if (this.passedQuads.has(hash)) {\n          return false;\n        }\n        this.passedQuads.add(hash);\n        return true;\n      });\n  }\n\n  public end(): void {\n    if (this.transformer.end) {\n      this.transformer.end();\n    }\n  }\n}\n"]}
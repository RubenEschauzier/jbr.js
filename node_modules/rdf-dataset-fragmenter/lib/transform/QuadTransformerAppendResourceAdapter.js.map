{"version":3,"file":"QuadTransformerAppendResourceAdapter.js","sourceRoot":"","sources":["QuadTransformerAppendResourceAdapter.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAI/C,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAsB,oCAAoC;IAGxD,YACE,SAAiB;QAEjB,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACzC,CAAC;IAIM,SAAS,CAAC,IAAc;QAC7B,MAAM,KAAK,GAAG,CAAE,IAAI,CAAE,CAAC;QAEvB,gDAAgD;QAChD,IAAI,IAAI,CAAC,OAAO,CAAC,QAAQ,KAAK,WAAW;YACvC,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,iDAAiD;YAC1E,IAAI,CAAC,MAAM,CAAC,QAAQ,KAAK,WAAW,IAAI,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;YAC3E,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;SAC/B;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAvBD,oFAuBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\n\nimport type { IQuadTransformer } from './IQuadTransformer';\n\nconst DF = new DataFactory();\n\n/**\n * An abstract quad transformer that appends something to resources of the given type.\n */\nexport abstract class QuadTransformerAppendResourceAdapter implements IQuadTransformer {\n  private readonly type: RegExp;\n\n  public constructor(\n    typeRegex: string,\n  ) {\n    this.type = new RegExp(typeRegex, 'u');\n  }\n\n  protected abstract appendQuads(original: RDF.Quad, results: RDF.Quad[]): void;\n\n  public transform(quad: RDF.Quad): RDF.Quad[] {\n    const quads = [ quad ];\n\n    // Append SCL policy to applicable resource type\n    if (quad.subject.termType === 'NamedNode' &&\n      quad.predicate.value === 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type' &&\n      quad.object.termType === 'NamedNode' && this.type.exec(quad.object.value)) {\n      this.appendQuads(quad, quads);\n    }\n\n    return quads;\n  }\n}\n"]}
{"version":3,"file":"QuadTransformerCompositeSequential.js","sourceRoot":"","sources":["QuadTransformerCompositeSequential.ts"],"names":[],"mappings":";;;AAGA;;GAEG;AACH,MAAa,kCAAkC;IAG7C,YACE,YAAgC;QAEhC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;IACnC,CAAC;IAEM,SAAS,CAAC,IAAc,EAAE,gBAAuC;QACtE,qCAAqC;QACrC,IAAI,KAAK,GAAG,CAAE,IAAI,CAAE,CAAC;QACrB,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YAC3C,KAAK,GAAG,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC,CAAC;SACpF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,GAAG;QACR,6BAA6B;QAC7B,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,YAAY,EAAE;YAC3C,IAAI,WAAW,CAAC,GAAG,EAAE;gBACnB,WAAW,CAAC,GAAG,EAAE,CAAC;aACnB;SACF;IACH,CAAC;CACF;AA1BD,gFA0BC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport type { IQuadTransformer } from './IQuadTransformer';\n\n/**\n * Executes a collection of transformers in sequence.\n */\nexport class QuadTransformerCompositeSequential implements IQuadTransformer {\n  private readonly transformers: IQuadTransformer[];\n\n  public constructor(\n    transformers: IQuadTransformer[],\n  ) {\n    this.transformers = transformers;\n  }\n\n  public transform(quad: RDF.Quad, allowedComponent?: 'subject' | 'object'): RDF.Quad[] {\n    // Pipe quad through all transformers\n    let quads = [ quad ];\n    for (const transformer of this.transformers) {\n      quads = quads.flatMap(subQuad => transformer.transform(subQuad, allowedComponent));\n    }\n    return quads;\n  }\n\n  public end(): void {\n    // Terminate all transformers\n    for (const transformer of this.transformers) {\n      if (transformer.end) {\n        transformer.end();\n      }\n    }\n  }\n}\n"]}
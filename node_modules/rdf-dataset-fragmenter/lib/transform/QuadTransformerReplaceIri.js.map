{"version":3,"file":"QuadTransformerReplaceIri.js","sourceRoot":"","sources":["QuadTransformerReplaceIri.ts"],"names":[],"mappings":";;;AACA,uDAA+C;AAC/C,iEAA8D;AAE9D,MAAM,EAAE,GAAG,IAAI,8BAAW,EAAE,CAAC;AAE7B;;GAEG;AACH,MAAa,yBAA0B,SAAQ,2CAAoB;IAIjE,YAAmB,WAAmB,EAAE,iBAAyB;QAC/D,KAAK,EAAE,CAAC;QACR,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,WAAW,GAAG,iBAAiB,CAAC;IACvC,CAAC;IAES,aAAa,CAAC,IAAc;QACpC,IAAI,IAAI,CAAC,QAAQ,KAAK,WAAW,EAAE;YACjC,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAChE,OAAO,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;SAC5B;QACD,OAAO,IAAI,CAAC;IACd,CAAC;CACF;AAjBD,8DAiBC","sourcesContent":["import type * as RDF from '@rdfjs/types';\nimport { DataFactory } from 'rdf-data-factory';\nimport { QuadTransformerTerms } from './QuadTransformerTerms';\n\nconst DF = new DataFactory();\n\n/**\n * A quad transformer that replaces (parts of) IRIs.\n */\nexport class QuadTransformerReplaceIri extends QuadTransformerTerms {\n  private readonly search: RegExp;\n  private readonly replacement: string;\n\n  public constructor(searchRegex: string, replacementString: string) {\n    super();\n    this.search = new RegExp(searchRegex, 'u');\n    this.replacement = replacementString;\n  }\n\n  protected transformTerm(term: RDF.Term): RDF.Term {\n    if (term.termType === 'NamedNode') {\n      const value = term.value.replace(this.search, this.replacement);\n      return DF.namedNode(value);\n    }\n    return term;\n  }\n}\n"]}
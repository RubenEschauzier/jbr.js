"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.overrides = exports.rules = exports.settings = exports.plugins = exports.globals = exports.env = exports.parserOptions = void 0;
const betterRules_1 = require("./betterRules");
const isInstalled_1 = require("./isInstalled");
const lodash_1 = require("lodash");
const path_1 = __importDefault(require("path"));
const rules_1 = require("./rules");
const parserOptions = {
    sourceType: 'script',
    // TODO [@types/eslint@>=7.28.3] The ts-expect-error can be removed once our
    // PR gets merged: https://github.com/DefinitelyTyped/DefinitelyTyped/pull/57037
    // @ts-expect-error This is a bug in the ESLint-Typings
    // A string "latest" is actually allowed (the types only specify numbers)
    // see: https://eslint.org/docs/user-guide/configuring/language-options#specifying-parser-options
    ecmaVersion: 'latest',
    ecmaFeatures: {
        globalReturn: false,
        impliedStrict: false,
        jsx: true
    }
};
exports.parserOptions = parserOptions;
const env = {
    es6: true,
    mocha: true,
    node: true
};
exports.env = env;
const globals = {};
exports.globals = globals;
const plugins = ['eslint-comments', 'extended', 'mocha', 'unicorn'];
exports.plugins = plugins;
const settings = {};
exports.settings = settings;
if ((0, isInstalled_1.isInstalled)('react')) {
    plugins.push('react');
    // @ts-expect-error react is actually set by the plugin.
    settings.react = { version: 'detect' };
}
let rules = (0, betterRules_1.compile)({
    ...rules_1.comments,
    ...rules_1.coreRules,
    ...rules_1.extended,
    ...rules_1.mochaRules,
    ...rules_1.unicorn,
    ...(0, rules_1.createSharedRulesFor)({ language: 'javascript' })
});
exports.rules = rules;
// The ruleName of "react/prefer-es6-class" is wrongly converted to kebab-case
// as lodash's kebab function treats the "6" as its own word, resulting in prefer-es-6-class.
// The workaround below fixes this.
const fixReactEs6Rule = (reactRulesRecord) => (0, lodash_1.mapKeys)(reactRulesRecord, (value, key) => {
    if (key === 'react/prefer-es-6-class') {
        return 'react/prefer-es6-class';
    }
    return key;
});
if (plugins.includes('react')) {
    exports.rules = rules = {
        ...rules,
        ...fixReactEs6Rule((0, betterRules_1.compile)(rules_1.react))
    };
}
const overrides = [
    {
        files: ['*.ts', '*.tsx'],
        parser: '@typescript-eslint/parser',
        parserOptions: {
            ...parserOptions,
            sourceType: 'module',
            project: path_1.default.join('.', 'tsconfig.json')
        },
        // eslint-disable-next-line @typescript-eslint/naming-convention
        globals: { ...globals, NodeJS: true },
        plugins: [...plugins, '@typescript-eslint'],
        rules: (0, betterRules_1.compile)({
            ...rules_1.typescript,
            ...(0, rules_1.createSharedRulesFor)({ language: 'typescript' })
        })
    }
];
exports.overrides = overrides;

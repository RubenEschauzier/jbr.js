"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeBenchmarkResults = exports.readQueries = void 0;
const fs = require("fs");
const Path = require("path");
/**
 * Read query sets from a given directory.
 *
 * A directory can contain multiple files ending with the .txt or .sparql suffix.
 * Each of those files can contain multiple SPARQL queries, separated by empty lines.
 *
 * @param queryDirectory Path to a query directory.
 * @return Mapping of query set name to an array of SPARQL query strings in this set.
 */
async function readQueries(queryDirectory) {
    const querySets = {};
    const filenames = (await fs.promises.readdir(queryDirectory))
        .filter((filename) => filename.endsWith('.txt') || filename.endsWith('.sparql'));
    for (const filename of filenames) {
        const queries = (await fs.promises.readFile(Path.join(queryDirectory, filename), 'utf8'))
            .split('\n\n')
            .filter(query => query.length > 0);
        const queryName = filename.replace(/\..*$/u, '');
        querySets[queryName] = queries;
    }
    return querySets;
}
exports.readQueries = readQueries;
/**
 * Write benchmark results to a CSV file.
 * @param results Benchmark results.
 * @param outputFile Destination CSV file path.
 * @param timestampsRecording If timestamps were recorded during benchmarking.
 * @param metadataKeys The keys inside the metadata to emit. These will also be added to the CSV file header.
 */
async function writeBenchmarkResults(results, outputFile, timestampsRecording, metadataKeys = []) {
    const out = fs.createWriteStream(outputFile);
    out.write(`name;id;results;time;error${timestampsRecording ? ';timestamps' : ''}${metadataKeys.length > 0 ? `;${metadataKeys.join(';')}` : ''}\n`);
    for (const key in results) {
        const { name, id, count, time, error, timestamps, metadata } = results[key];
        out.write(`${name};${id};${count};${time};${error}${timestampsRecording ?
            `;${timestamps.join(' ')}` :
            ''}${metadataKeys.length > 0 ?
            `;${metadataKeys.map(metadataKey => metadata[metadataKey]).join(';')}` :
            ''}\n`);
    }
    out.end();
}
exports.writeBenchmarkResults = writeBenchmarkResults;
//# sourceMappingURL=BenchmarkInputOutput.js.map
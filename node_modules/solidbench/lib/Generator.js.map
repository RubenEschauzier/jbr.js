{"version":3,"file":"Generator.js","sourceRoot":"","sources":["Generator.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport { request } from 'https';\nimport * as Path from 'path';\nimport Dockerode from 'dockerode';\nimport { runConfig as runEnhancer } from 'ldbc-snb-enhancer';\nimport { runConfig as runValidationGenerator } from 'ldbc-snb-validation-generator';\nimport { runConfig as runFragmenter } from 'rdf-dataset-fragmenter';\nimport { runConfig as runQueryInstantiator } from 'sparql-query-parameter-instantiator';\nimport { Extract } from 'unzipper';\n\n/**\n * Generates decentralized social network data in different phases.\n */\nexport class Generator {\n  public static readonly COLOR_RESET: string = '\\u001B[0m';\n  public static readonly COLOR_RED: string = '\\u001B[31m';\n  public static readonly COLOR_GREEN: string = '\\u001B[32m';\n  public static readonly COLOR_YELLOW: string = '\\u001B[33m';\n  public static readonly COLOR_BLUE: string = '\\u001B[34m';\n  public static readonly COLOR_MAGENTA: string = '\\u001B[35m';\n  public static readonly COLOR_CYAN: string = '\\u001B[36m';\n  public static readonly COLOR_GRAY: string = '\\u001B[90m';\n  public static readonly LDBC_SNB_DATAGEN_DOCKER_IMAGE: string = 'rubensworks/ldbc_snb_datagen:latest';\n\n  private readonly cwd: string;\n  private readonly verbose: boolean;\n  private readonly overwrite: boolean;\n  private readonly scale: string;\n  private readonly enhancementConfig: string;\n  private readonly fragmentConfig: string;\n  private readonly enhancementFragmentConfig: string;\n  private readonly queryConfig: string;\n  private readonly validationParams: string;\n  private readonly validationConfig: string;\n  private readonly hadoopMemory: string;\n  private readonly mainModulePath: string;\n\n  public constructor(opts: IGeneratorOptions) {\n    this.cwd = opts.cwd;\n    this.verbose = opts.verbose;\n    this.overwrite = opts.overwrite;\n    this.scale = opts.scale;\n    this.enhancementConfig = opts.enhancementConfig;\n    this.fragmentConfig = opts.fragmentConfig;\n    this.enhancementFragmentConfig = opts.enhancementFragmentConfig;\n    this.queryConfig = opts.queryConfig;\n    this.validationParams = opts.validationParams;\n    this.validationConfig = opts.validationConfig;\n    this.hadoopMemory = opts.hadoopMemory;\n    this.mainModulePath = Path.join(__dirname, '..');\n  }\n\n  protected async targetExists(path: string): Promise<boolean> {\n    try {\n      await fs.promises.stat(path);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  protected log(phase: string, status: string): void {\n    process.stdout.write(`${Generator.withColor(`[${phase}]`, Generator.COLOR_CYAN)} ${status}\\n`);\n  }\n\n  protected async runPhase(name: string, directory: string, runner: () => Promise<void>): Promise<void> {\n    if (this.overwrite || !await this.targetExists(Path.join(this.cwd, directory))) {\n      this.log(name, 'Started');\n      const timeStart = process.hrtime();\n      await runner();\n      const timeEnd = process.hrtime(timeStart);\n      this.log(name, `Done in ${timeEnd[0] + (timeEnd[1] / 1_000_000_000)} seconds`);\n    } else {\n      this.log(name, `Skipped (/${directory} already exists, remove to regenerate)`);\n    }\n  }\n\n  /**\n   * Run all generator phases.\n   */\n  public async generate(): Promise<void> {\n    const timeStart = process.hrtime();\n    await this.runPhase('SNB dataset generator', 'out-snb', () => this.generateSnbDataset());\n    await this.runPhase('SNB dataset enhancer', 'out-enhanced', () => this.enhanceSnbDataset());\n    await this.runPhase('SNB dataset fragmenter', 'out-fragments', () => this.fragmentSnbDataset());\n    await this.runPhase('SPARQL query instantiator', 'out-queries', () => this.instantiateQueries());\n    await this.runPhase('SNB validation downloader', 'out-validate-params', () => this.downloadValidationParams());\n    await this.runPhase('SNB validation generator', 'out-validate', () => this.generateValidation());\n    const timeEnd = process.hrtime(timeStart);\n    this.log('All', `Done in ${timeEnd[0] + (timeEnd[1] / 1_000_000_000)} seconds`);\n  }\n\n  /**\n   * Invoke the LDBC SNB generator.\n   */\n  public async generateSnbDataset(): Promise<void> {\n    // Create params.ini file\n    const paramsTemplate = await fs.promises.readFile(Path.join(__dirname, '../templates/params.ini'), 'utf8');\n    const paramsPath = Path.join(this.cwd, 'params.ini');\n    // TODO: remove once we drop Node 14 support\n    // eslint-disable-next-line unicorn/prefer-string-replace-all\n    await fs.promises.writeFile(paramsPath, paramsTemplate.replace(/SCALE/ug, this.scale), 'utf8');\n\n    // Pull the base Docker image\n    const dockerode = new Dockerode();\n    const buildStream = await dockerode.pull(Generator.LDBC_SNB_DATAGEN_DOCKER_IMAGE);\n    await new Promise((resolve, reject) => {\n      dockerode.modem.followProgress(buildStream,\n        (err: Error | null, res: any[]) => err ? reject(err) : resolve(res));\n    });\n\n    // Start Docker container\n    const container = await dockerode.createContainer({\n      Image: Generator.LDBC_SNB_DATAGEN_DOCKER_IMAGE,\n      Tty: true,\n      AttachStdout: true,\n      AttachStderr: true,\n      Env: [ `HADOOP_CLIENT_OPTS=-Xmx${this.hadoopMemory}` ],\n      HostConfig: {\n        Binds: [\n          `${this.cwd}/out-snb/:/opt/ldbc_snb_datagen/out`,\n          `${paramsPath}:/opt/ldbc_snb_datagen/params.ini`,\n        ],\n      },\n    });\n    await container.start();\n\n    // Stop process on force-exit\n    let containerEnded = false;\n    process.on('SIGINT', async() => {\n      if (!containerEnded) {\n        await container.kill();\n        await cleanup();\n      }\n    });\n    async function cleanup(): Promise<void> {\n      await container.remove();\n      await fs.promises.unlink(paramsPath);\n    }\n\n    // Attach output to stdout\n    const out = await container.attach({\n      stream: true,\n      stdout: true,\n      stderr: true,\n    });\n    if (this.verbose) {\n      out.pipe(process.stdout);\n    } else {\n      out.resume();\n    }\n\n    // Wait until generation ends\n    await new Promise((resolve, reject) => {\n      out.on('end', resolve);\n      out.on('error', reject);\n    });\n    containerEnded = true;\n\n    // Cleanup\n    await cleanup();\n  }\n\n  /**\n   * Enhance the generated LDBC SNB dataset.\n   */\n  public async enhanceSnbDataset(): Promise<void> {\n    // Create target directory\n    await fs.promises.mkdir(Path.join(this.cwd, 'out-enhanced'));\n\n    // Run enhancer\n    const oldCwd = process.cwd();\n    process.chdir(this.cwd);\n    await runEnhancer(this.enhancementConfig, { mainModulePath: this.mainModulePath });\n    process.chdir(oldCwd);\n  }\n\n  /**\n   * Fragment the generated and enhanced LDBC SNB datasets.\n   */\n  public async fragmentSnbDataset(): Promise<void> {\n    const oldCwd = process.cwd();\n    process.chdir(this.cwd);\n\n    // Initial fragmentation\n    await runFragmenter(this.fragmentConfig, { mainModulePath: this.mainModulePath });\n\n    // Auxiliary fragmentation\n    this.log('SNB dataset fragmenter', 'Starting auxiliary phase');\n    await runFragmenter(this.enhancementFragmentConfig, { mainModulePath: this.mainModulePath });\n\n    process.chdir(oldCwd);\n  }\n\n  /**\n   * Instantiate queries based on the LDBC SNB datasets.\n   */\n  public async instantiateQueries(): Promise<void> {\n    // Create target directory\n    await fs.promises.mkdir(Path.join(this.cwd, 'out-queries'));\n\n    // Run instantiator\n    const oldCwd = process.cwd();\n    process.chdir(this.cwd);\n    await runQueryInstantiator(this.queryConfig, { mainModulePath: this.mainModulePath }, {\n      variables: await this.generateVariables(),\n    });\n    process.chdir(oldCwd);\n  }\n\n  /**\n   * Download validation parameters\n   */\n  public async downloadValidationParams(): Promise<void> {\n    // Create target directory\n    const target = Path.join(this.cwd, 'out-validate-params');\n    await fs.promises.mkdir(target);\n\n    // Download and extract zip file\n    return new Promise((resolve, reject) => {\n      request(this.validationParams, res => {\n        res\n          .on('error', reject)\n          .pipe(Extract({ path: target }))\n          .on('error', reject)\n          .on('close', resolve);\n      }).end();\n    });\n  }\n\n  /**\n   * Generate validation queries and results.\n   */\n  public async generateValidation(): Promise<void> {\n    // Create target directory\n    await fs.promises.mkdir(Path.join(this.cwd, 'out-validate'));\n\n    // Run generator\n    const oldCwd = process.cwd();\n    process.chdir(this.cwd);\n    await runValidationGenerator(this.validationConfig, { mainModulePath: this.mainModulePath }, {\n      variables: await this.generateVariables(),\n    });\n    process.chdir(oldCwd);\n  }\n\n  protected async generateVariables(): Promise<Record<string, string>> {\n    return Object.fromEntries((await fs.promises.readdir(Path.join(__dirname, '../templates/queries/')))\n      .map(name => [ `urn:variables:query-templates:${name}`, Path.join(__dirname, `../templates/queries/${name}`) ]));\n  }\n\n  /**\n   * Return a string in a given color\n   * @param str The string that should be printed in\n   * @param color A given color\n   */\n  public static withColor(str: any, color: string): string {\n    return `${color}${str}${Generator.COLOR_RESET}`;\n  }\n}\n\nexport interface IGeneratorOptions {\n  cwd: string;\n  verbose: boolean;\n  overwrite: boolean;\n  scale: string;\n  enhancementConfig: string;\n  fragmentConfig: string;\n  enhancementFragmentConfig: string;\n  queryConfig: string;\n  validationParams: string;\n  validationConfig: string;\n  hadoopMemory: string;\n}\n"]}
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const Generator_1 = require("../Generator");
const Templates_1 = require("../Templates");
exports.command = 'generate';
exports.desc = 'Generate social network data';
const builder = (yargs) => yargs
    .options({
    overwrite: {
        type: 'string',
        alias: 'o',
        describe: 'If existing files should be overwritten',
        default: false,
    },
    scale: {
        type: 'number',
        alias: 's',
        describe: 'The SNB scale factor',
        default: 0.1,
    },
    enhancementConfig: {
        type: 'string',
        alias: 'e',
        describe: 'Path to enhancement config',
        default: Templates_1.Templates.ENHANCEMENT_CONFIG,
        defaultDescription: 'enhancer-config-pod.json',
    },
    fragmentConfig: {
        type: 'string',
        alias: 'f',
        describe: 'Path to fragmentation config',
        default: Templates_1.Templates.FRAGMENT_CONFIG,
        defaultDescription: 'fragmenter-config-pod.json',
    },
    enhancementFragmentConfig: {
        type: 'string',
        alias: 'g',
        describe: 'Path to enhancement\'s fragmentation config',
        default: Templates_1.Templates.ENHANCEMENT_FRAGMENT_CONFIG,
        defaultDescription: 'fragmenter-auxiliary-config-subject.json',
    },
    queryConfig: {
        type: 'string',
        alias: 'q',
        describe: 'Path to query instantiation config',
        default: Templates_1.Templates.QUERY_CONFIG,
        defaultDescription: 'query-config.json',
    },
    validationParams: {
        type: 'string',
        describe: 'URL of the validation parameters zip file',
        default: Templates_1.Templates.VALIDATION_PARAMS_URL,
        defaultDescription: 'https://.../validation_params.zip',
    },
    validationConfig: {
        type: 'string',
        alias: 'v',
        describe: 'Path to validation generator config',
        default: Templates_1.Templates.VALIDATION_CONFIG,
        defaultDescription: 'validation-config.json',
    },
    hadoopMemory: {
        type: 'string',
        describe: 'Memory limit for Hadoop',
        default: '4G',
    },
})
    .check((args, options) => {
    const scales = [0.1, 1, 3, 10, 30, 100, 300, 1000];
    if (!scales.includes(args.scale)) {
        throw new Error(`Invalid SNB scale factor '${args.type}'. Must be one of '${Object.keys(scales).join(', ')}'`);
    }
    return true;
});
exports.builder = builder;
const handler = (argv) => new Generator_1.Generator({
    verbose: argv.verbose,
    cwd: argv.cwd,
    overwrite: argv.overwrite,
    scale: argv.scale,
    enhancementConfig: argv.enhancementConfig,
    fragmentConfig: argv.fragmentConfig,
    enhancementFragmentConfig: argv.enhancementFragmentConfig,
    queryConfig: argv.queryConfig,
    validationParams: argv.validationParams,
    validationConfig: argv.validationConfig,
    hadoopMemory: argv.hadoopMemory,
}).generate();
exports.handler = handler;
//# sourceMappingURL=CommandGenerate.js.map
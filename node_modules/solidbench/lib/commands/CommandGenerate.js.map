{"version":3,"file":"CommandGenerate.js","sourceRoot":"","sources":["CommandGenerate.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Argv } from 'yargs';\nimport { Generator } from '../Generator';\nimport { Templates } from '../Templates';\n\nexport const command = 'generate';\nexport const desc = 'Generate social network data';\nexport const builder = (yargs: Argv<any>): Argv<any> =>\n  yargs\n    .options({\n      overwrite: {\n        type: 'string',\n        alias: 'o',\n        describe: 'If existing files should be overwritten',\n        default: false,\n      },\n      scale: {\n        type: 'number',\n        alias: 's',\n        describe: 'The SNB scale factor',\n        default: 0.1,\n      },\n      enhancementConfig: {\n        type: 'string',\n        alias: 'e',\n        describe: 'Path to enhancement config',\n        default: Templates.ENHANCEMENT_CONFIG,\n        defaultDescription: 'enhancer-config-pod.json',\n      },\n      fragmentConfig: {\n        type: 'string',\n        alias: 'f',\n        describe: 'Path to fragmentation config',\n        default: Templates.FRAGMENT_CONFIG,\n        defaultDescription: 'fragmenter-config-pod.json',\n      },\n      enhancementFragmentConfig: {\n        type: 'string',\n        alias: 'g',\n        describe: 'Path to enhancement\\'s fragmentation config',\n        default: Templates.ENHANCEMENT_FRAGMENT_CONFIG,\n        defaultDescription: 'fragmenter-auxiliary-config-subject.json',\n      },\n      queryConfig: {\n        type: 'string',\n        alias: 'q',\n        describe: 'Path to query instantiation config',\n        default: Templates.QUERY_CONFIG,\n        defaultDescription: 'query-config.json',\n      },\n      validationParams: {\n        type: 'string',\n        describe: 'URL of the validation parameters zip file',\n        default: Templates.VALIDATION_PARAMS_URL,\n        defaultDescription: 'https://.../validation_params.zip',\n      },\n      validationConfig: {\n        type: 'string',\n        alias: 'v',\n        describe: 'Path to validation generator config',\n        default: Templates.VALIDATION_CONFIG,\n        defaultDescription: 'validation-config.json',\n      },\n      hadoopMemory: {\n        type: 'string',\n        describe: 'Memory limit for Hadoop',\n        default: '4G',\n      },\n    })\n    .check((args, options): boolean => {\n      const scales = [ 0.1, 1, 3, 10, 30, 100, 300, 1_000 ];\n      if (!scales.includes(args.scale)) {\n        throw new Error(`Invalid SNB scale factor '${args.type}'. Must be one of '${Object.keys(scales).join(', ')}'`);\n      }\n      return true;\n    });\nexport const handler = (argv: Record<string, any>): Promise<void> => new Generator({\n  verbose: argv.verbose,\n  cwd: argv.cwd,\n  overwrite: argv.overwrite,\n  scale: argv.scale,\n  enhancementConfig: argv.enhancementConfig,\n  fragmentConfig: argv.fragmentConfig,\n  enhancementFragmentConfig: argv.enhancementFragmentConfig,\n  queryConfig: argv.queryConfig,\n  validationParams: argv.validationParams,\n  validationConfig: argv.validationConfig,\n  hadoopMemory: argv.hadoopMemory,\n}).generate();\n"]}
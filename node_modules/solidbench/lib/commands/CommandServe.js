"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = exports.builder = exports.desc = exports.command = void 0;
const Server_1 = require("../Server");
const Templates_1 = require("../Templates");
exports.command = 'serve';
exports.desc = 'Serves the fragmented dataset via an HTTP server';
const builder = (yargs) => yargs
    .options({
    port: {
        type: 'number',
        alias: 'p',
        describe: 'The HTTP port to run on',
        default: 3000,
    },
    baseUrl: {
        type: 'string',
        alias: 'b',
        describe: 'The base URL of the server',
    },
    rootFilePath: {
        type: 'string',
        alias: 'r',
        describe: 'Path to the root of the files to serve',
        default: 'out-fragments/http/localhost_3000/',
    },
    config: {
        type: 'string',
        alias: 'c',
        describe: 'Path to server config',
        default: Templates_1.Templates.SERVER_CONFIG,
        defaultDescription: 'server-config.json',
    },
    logLevel: {
        type: 'string',
        alias: 'l',
        describe: 'Logging level (error, warn, info, verbose, debug, silly)',
        default: 'info',
    },
});
exports.builder = builder;
const handler = (argv) => __awaiter(void 0, void 0, void 0, function* () {
    return new Server_1.Server({
        configPath: argv.config,
        port: argv.port,
        baseUrl: argv.baseUrl,
        rootFilePath: argv.rootFilePath,
        logLevel: argv.logLevel,
    }).serve();
});
exports.handler = handler;
//# sourceMappingURL=CommandServe.js.map
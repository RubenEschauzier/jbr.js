{"version":3,"file":"CommandServe.js","sourceRoot":"","sources":["CommandServe.ts"],"names":[],"mappings":";;;;;;;;;;;;AACA,sCAAmC;AACnC,4CAAyC;AAE5B,QAAA,OAAO,GAAG,OAAO,CAAC;AAClB,QAAA,IAAI,GAAG,kDAAkD,CAAC;AAChE,MAAM,OAAO,GAAG,CAAC,KAAgB,EAAa,EAAE,CACrD,KAAK;KACF,OAAO,CAAC;IACP,IAAI,EAAE;QACJ,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,yBAAyB;QACnC,OAAO,EAAE,IAAK;KACf;IACD,OAAO,EAAE;QACP,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,4BAA4B;KACvC;IACD,YAAY,EAAE;QACZ,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,wCAAwC;QAClD,OAAO,EAAE,oCAAoC;KAC9C;IACD,MAAM,EAAE;QACN,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,uBAAuB;QACjC,OAAO,EAAE,qBAAS,CAAC,aAAa;QAChC,kBAAkB,EAAE,oBAAoB;KACzC;IACD,QAAQ,EAAE;QACR,IAAI,EAAE,QAAQ;QACd,KAAK,EAAE,GAAG;QACV,QAAQ,EAAE,0DAA0D;QACpE,OAAO,EAAE,MAAM;KAChB;CACF,CAAC,CAAC;AAjCM,QAAA,OAAO,WAiCb;AACA,MAAM,OAAO,GAAG,CAAM,IAAyB,EAAiB,EAAE;IAAC,OAAA,IAAI,eAAM,CAAC;QACnF,UAAU,EAAE,IAAI,CAAC,MAAM;QACvB,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,OAAO,EAAE,IAAI,CAAC,OAAO;QACrB,YAAY,EAAE,IAAI,CAAC,YAAY;QAC/B,QAAQ,EAAE,IAAI,CAAC,QAAQ;KACxB,CAAC,CAAC,KAAK,EAAE,CAAA;EAAA,CAAC;AANE,QAAA,OAAO,WAMT","sourcesContent":["import type { Argv } from 'yargs';\nimport { Server } from '../Server';\nimport { Templates } from '../Templates';\n\nexport const command = 'serve';\nexport const desc = 'Serves the fragmented dataset via an HTTP server';\nexport const builder = (yargs: Argv<any>): Argv<any> =>\n  yargs\n    .options({\n      port: {\n        type: 'number',\n        alias: 'p',\n        describe: 'The HTTP port to run on',\n        default: 3_000,\n      },\n      baseUrl: {\n        type: 'string',\n        alias: 'b',\n        describe: 'The base URL of the server',\n      },\n      rootFilePath: {\n        type: 'string',\n        alias: 'r',\n        describe: 'Path to the root of the files to serve',\n        default: 'out-fragments/http/localhost_3000/',\n      },\n      config: {\n        type: 'string',\n        alias: 'c',\n        describe: 'Path to server config',\n        default: Templates.SERVER_CONFIG,\n        defaultDescription: 'server-config.json',\n      },\n      logLevel: {\n        type: 'string',\n        alias: 'l',\n        describe: 'Logging level (error, warn, info, verbose, debug, silly)',\n        default: 'info',\n      },\n    });\nexport const handler = async(argv: Record<string, any>): Promise<void> => new Server({\n  configPath: argv.config,\n  port: argv.port,\n  baseUrl: argv.baseUrl,\n  rootFilePath: argv.rootFilePath,\n  logLevel: argv.logLevel,\n}).serve();\n"]}
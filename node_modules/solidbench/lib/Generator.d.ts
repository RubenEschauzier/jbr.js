/**
 * Generates decentralized social network data in different phases.
 */
export declare class Generator {
    static readonly COLOR_RESET: string;
    static readonly COLOR_RED: string;
    static readonly COLOR_GREEN: string;
    static readonly COLOR_YELLOW: string;
    static readonly COLOR_BLUE: string;
    static readonly COLOR_MAGENTA: string;
    static readonly COLOR_CYAN: string;
    static readonly COLOR_GRAY: string;
    static readonly LDBC_SNB_DATAGEN_DOCKER_IMAGE: string;
    private readonly cwd;
    private readonly verbose;
    private readonly overwrite;
    private readonly scale;
    private readonly enhancementConfig;
    private readonly fragmentConfig;
    private readonly enhancementFragmentConfig;
    private readonly queryConfig;
    private readonly validationParams;
    private readonly validationConfig;
    private readonly hadoopMemory;
    private readonly mainModulePath;
    constructor(opts: IGeneratorOptions);
    protected targetExists(path: string): Promise<boolean>;
    protected log(phase: string, status: string): void;
    protected runPhase(name: string, directory: string, runner: () => Promise<void>): Promise<void>;
    /**
     * Run all generator phases.
     */
    generate(): Promise<void>;
    /**
     * Invoke the LDBC SNB generator.
     */
    generateSnbDataset(): Promise<void>;
    /**
     * Enhance the generated LDBC SNB dataset.
     */
    enhanceSnbDataset(): Promise<void>;
    /**
     * Fragment the generated and enhanced LDBC SNB datasets.
     */
    fragmentSnbDataset(): Promise<void>;
    /**
     * Instantiate queries based on the LDBC SNB datasets.
     */
    instantiateQueries(): Promise<void>;
    /**
     * Download validation parameters
     */
    downloadValidationParams(): Promise<void>;
    /**
     * Generate validation queries and results.
     */
    generateValidation(): Promise<void>;
    protected generateVariables(): Promise<Record<string, string>>;
    /**
     * Return a string in a given color
     * @param str The string that should be printed in
     * @param color A given color
     */
    static withColor(str: any, color: string): string;
}
export interface IGeneratorOptions {
    cwd: string;
    verbose: boolean;
    overwrite: boolean;
    scale: string;
    enhancementConfig: string;
    fragmentConfig: string;
    enhancementFragmentConfig: string;
    queryConfig: string;
    validationParams: string;
    validationConfig: string;
    hadoopMemory: string;
}

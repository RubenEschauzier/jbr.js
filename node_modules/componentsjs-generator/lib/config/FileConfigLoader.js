"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileConfigLoader = void 0;
const Path = require("path");
/**
 * Loads the `.componentsjs-generator-config.json` config file from the file system.
 */
class FileConfigLoader {
    constructor(args) {
        this.resolutionContext = args.resolutionContext;
    }
    /**
     * Get the closest config file, starting from the current working directory and following parent directory links.
     * @param cwd The current working directory
     */
    async getClosestConfigFile(cwd) {
        for (const directory of this.getConsideredDirectories(cwd)) {
            const configPath = Path.join(directory, FileConfigLoader.DEFAULT_CONFIG_NAME);
            try {
                const textContents = await this.resolutionContext.getFileContent(configPath);
                return JSON.parse(textContents);
            }
            catch {
                // Ignore error
            }
        }
    }
    /**
     * All directories that need to be considered when looking for the config file.
     * @param cwd The current working directory
     */
    getConsideredDirectories(cwd) {
        // Since Windows paths can have `/` or `\` depending on the operations done so far
        // it is safest to split on both possible separators.
        const sections = cwd.split(/[/\\]/u);
        const paths = [];
        for (let i = sections.length; i > 1; i--) {
            // Slash is valid on both platforms and keeps results consistent
            paths.push(sections.slice(0, i).join('/'));
        }
        return paths;
    }
}
exports.FileConfigLoader = FileConfigLoader;
FileConfigLoader.DEFAULT_CONFIG_NAME = '.componentsjs-generator-config.json';
//# sourceMappingURL=FileConfigLoader.js.map
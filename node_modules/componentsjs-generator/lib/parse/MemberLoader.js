"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemberLoader = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
/**
 * Loads the member data of classes.
 */
class MemberLoader {
    constructor(args) {
        this.parameterLoader = args.parameterLoader;
    }
    /**
     * Create a class index containing all member data from the classes in the given index.
     * @param classIndex An index of loaded classes.
     */
    getMembers(classIndex) {
        const membersIndex = {};
        for (const [className, classLoadedRoot] of Object.entries(classIndex)) {
            if (classLoadedRoot.type === 'class' || classLoadedRoot.type === 'interface') {
                membersIndex[className] = {
                    members: this.collectClassFields(classLoadedRoot),
                    classLoaded: classLoadedRoot,
                };
            }
        }
        return membersIndex;
    }
    /**
     * Obtain the class member fields.
     * This should correspond to the keys that are available within the `keyof` range of this class
     * @param classLoaded A class or interface
     */
    collectClassFields(classLoaded) {
        var _a;
        const members = [];
        for (const element of classLoaded.declaration.body.body) {
            // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check
            switch (element.type) {
                case typescript_estree_1.AST_NODE_TYPES.PropertyDefinition:
                case typescript_estree_1.AST_NODE_TYPES.TSAbstractPropertyDefinition:
                case typescript_estree_1.AST_NODE_TYPES.MethodDefinition:
                case typescript_estree_1.AST_NODE_TYPES.TSAbstractMethodDefinition:
                case typescript_estree_1.AST_NODE_TYPES.TSPropertySignature:
                case typescript_estree_1.AST_NODE_TYPES.TSMethodSignature:
                    if (element.key.type === 'Identifier') {
                        // TODO: more types may be needed here, such as AST_NODE_TYPES.TSPropertySignature
                        const typeNode = element.type === typescript_estree_1.AST_NODE_TYPES.PropertyDefinition ||
                            element.type === typescript_estree_1.AST_NODE_TYPES.TSAbstractPropertyDefinition ?
                            (_a = element.typeAnnotation) === null || _a === void 0 ? void 0 : _a.typeAnnotation :
                            undefined;
                        members.push({
                            name: element.key.name,
                            range: typeNode ?
                                this.parameterLoader.getRangeFromTypeNode(classLoaded, typeNode, `field ${element.key.name}`) :
                                undefined,
                        });
                    }
                    break;
            }
        }
        return members;
    }
}
exports.MemberLoader = MemberLoader;
//# sourceMappingURL=MemberLoader.js.map
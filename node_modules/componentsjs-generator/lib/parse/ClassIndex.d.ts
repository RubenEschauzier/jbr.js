import type { AST, TSESTreeOptions, TSESTree } from '@typescript-eslint/typescript-estree';
/**
 * A collection of classes, with exported name as key.
 */
export declare type ClassIndex<T> = Record<string, T>;
/**
 * The name and location of a class.
 */
export interface ClassReference {
    packageName: string;
    localName: string;
    qualifiedPath?: string[];
    fileName: string;
    fileNameReferenced: string;
}
/**
 * A loaded reference.
 */
export declare type ClassReferenceLoaded = ClassLoaded | InterfaceLoaded | TypeLoaded | EnumLoaded;
/**
 * A loaded reference without type aliases and enums.
 */
export declare type ClassReferenceLoadedClassOrInterface = ClassLoaded | InterfaceLoaded;
/**
 * A loaded class with a full class declaration.
 */
export interface ClassLoaded extends ClassReference {
    type: 'class';
    localName: string;
    fileName: string;
    declaration: TSESTree.ClassDeclaration;
    ast: AST<TSESTreeOptions>;
    superClass?: GenericallyTyped<ClassLoaded>;
    implementsInterfaces?: GenericallyTyped<ClassReferenceLoadedClassOrInterface>[];
    abstract?: boolean;
    comment?: string;
    generics: GenericTypes;
}
/**
 * A hash of generic type name to its properties.
 */
export declare type GenericTypes = Record<string, {
    type?: TSESTree.TypeNode;
}>;
/**
 * Something (like a class or interface) that may have generic types assigned to it as instantiation.
 */
export interface GenericallyTyped<T> {
    value: T;
    genericTypeInstantiations?: TSESTree.TSTypeParameterInstantiation;
}
/**
 * A loaded interface with a full interface declaration.
 */
export interface InterfaceLoaded extends ClassReference {
    type: 'interface';
    localName: string;
    fileName: string;
    declaration: TSESTree.TSInterfaceDeclaration;
    ast: AST<TSESTreeOptions>;
    superInterfaces?: GenericallyTyped<InterfaceLoaded>[];
    comment?: string;
    generics: GenericTypes;
}
/**
 * A member field of a class or interface.
 */
export interface MemberField {
    name: string;
    range: TSESTree.TypeNode | undefined;
}
/**
 * A loaded type alias with a full type declaration.
 */
export interface TypeLoaded extends ClassReference {
    type: 'type';
    localName: string;
    fileName: string;
    declaration: TSESTree.TSTypeAliasDeclaration;
    ast: AST<TSESTreeOptions>;
    comment?: string;
    generics: GenericTypes;
}
/**
 * A loaded enum with a full type declaration.
 */
export interface EnumLoaded extends ClassReference {
    type: 'enum';
    localName: string;
    fileName: string;
    declaration: TSESTree.TSEnumDeclaration;
    ast: AST<TSESTreeOptions>;
    comment?: string;
}

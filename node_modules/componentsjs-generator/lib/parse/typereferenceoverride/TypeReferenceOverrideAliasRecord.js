"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeReferenceOverrideAliasRecord = void 0;
const typescript_estree_1 = require("@typescript-eslint/typescript-estree");
/**
 * Converts type aliases of the form `Record<K, V>` into `{[k: K]: V}`.
 */
class TypeReferenceOverrideAliasRecord {
    handle(typeNode) {
        if (typeNode.typeName.type === typescript_estree_1.AST_NODE_TYPES.Identifier &&
            typeNode.typeName.name === 'Record' &&
            typeNode.typeParameters &&
            typeNode.typeParameters.params.length === 2) {
            const loc = { start: { line: 0, column: 0 }, end: { line: 0, column: 7 } };
            const range = [0, 0];
            const typeLiteral = {
                type: typescript_estree_1.AST_NODE_TYPES.TSTypeLiteral,
                members: [
                    {
                        type: typescript_estree_1.AST_NODE_TYPES.TSIndexSignature,
                        parameters: [
                            {
                                type: typescript_estree_1.AST_NODE_TYPES.Identifier,
                                name: 'key',
                                typeAnnotation: {
                                    type: typescript_estree_1.AST_NODE_TYPES.TSTypeAnnotation,
                                    typeAnnotation: typeNode.typeParameters.params[0],
                                    loc,
                                    range,
                                },
                                loc,
                                range,
                            },
                        ],
                        typeAnnotation: {
                            type: typescript_estree_1.AST_NODE_TYPES.TSTypeAnnotation,
                            typeAnnotation: typeNode.typeParameters.params[1],
                            loc,
                            range,
                        },
                        loc,
                        range,
                    },
                ],
                loc,
                range,
            };
            return { type: 'hash', value: typeLiteral };
        }
    }
}
exports.TypeReferenceOverrideAliasRecord = TypeReferenceOverrideAliasRecord;
//# sourceMappingURL=TypeReferenceOverrideAliasRecord.js.map
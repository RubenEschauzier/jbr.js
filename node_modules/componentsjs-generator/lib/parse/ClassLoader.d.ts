import type { AST, TSESTreeOptions, TSESTree } from '@typescript-eslint/typescript-estree';
import type { Logger } from 'winston';
import type { ResolutionContext } from '../resolution/ResolutionContext';
import type { ClassLoaded, ClassReference, ClassReferenceLoaded, EnumLoaded, GenericTypes, InterfaceLoaded, TypeLoaded, GenericallyTyped } from './ClassIndex';
import type { CommentLoader } from './CommentLoader';
/**
 * Loads typescript classes from class references.
 */
export declare class ClassLoader {
    private readonly resolutionContext;
    private readonly logger;
    private readonly commentLoader;
    constructor(args: ClassLoaderArgs);
    /**
     * Find the super class of the given class.
     * Throws an error for super class definitions that could not be interpreted.
     * @param declaration A class declaration.
     * @param fileName The file name of the current class.
     */
    getSuperClassName(declaration: TSESTree.ClassDeclaration, fileName: string): GenericallyTyped<string> | undefined;
    /**
     * Find the super interfaces of the given interface.
     * Throws an error for interface definitions that could not be interpreted.
     * @param declaration An interface declaration.
     * @param fileName The file name of the current class.
     */
    getSuperInterfaceNames(declaration: TSESTree.TSInterfaceDeclaration, fileName: string): GenericallyTyped<string>[];
    /**
     * Find the interface names of the given class.
     * @param declaration A class declaration.
     * @param fileName The file name of the current class.
     */
    getClassInterfaceNames(declaration: TSESTree.ClassDeclaration, fileName: string): GenericallyTyped<string>[];
    /**
     * Load the referenced class, and obtain its full class declaration.
     * Classes can either be defined in this file (exported or not), or imported from another file.
     * @param classReference The reference to a class.
     * @param considerInterfaces If the class reference is allows to refer to an interface, as well as a class.
     * @param considerOthers If the class reference is allows to refer to refer to other things,
     *                       such as a type alias or enum.
     */
    loadClassDeclaration<CI extends boolean, CT extends boolean>(classReference: ClassReference, considerInterfaces: CI, considerOthers: CT): Promise<CI extends true ? (CT extends true ? (ClassLoaded | InterfaceLoaded | TypeLoaded | EnumLoaded) : (ClassLoaded | InterfaceLoaded)) : (CT extends true ? (ClassLoaded | TypeLoaded | EnumLoaded) : (ClassLoaded))>;
    /**
     * Load the referenced class, and obtain its full class declaration.
     * Classes can either be defined in this file (exported or not), or imported from another file.
     * @param ast An abstract syntax tree.
     * @param targetString A string for error reporting on the considered scope.
     * @param classReference The reference to a class.
     * @param considerInterfaces If the class reference is allows to refer to an interface, as well as a class.
     * @param considerOthers If the class reference is allows to refer to refer to other things,
     *                       such as a type alias or enum.
     */
    loadClassDeclarationFromAst<CI extends boolean, CT extends boolean>(ast: AST<TSESTreeOptions> | TSESTree.TSModuleBlock, targetString: string, classReference: ClassReference, considerInterfaces: CI, considerOthers: CT): Promise<CI extends true ? (CT extends true ? (ClassLoaded | InterfaceLoaded | TypeLoaded | EnumLoaded) : (ClassLoaded | InterfaceLoaded)) : (CT extends true ? (ClassLoaded | TypeLoaded | EnumLoaded) : (ClassLoaded))>;
    /**
     * Create a hash of generic types in the given class declaration.
     * @param classDeclaration A class or interface declaration.
     */
    collectGenericTypes(classDeclaration: TSESTree.ClassDeclaration | TSESTree.TSInterfaceDeclaration | TSESTree.TSTypeAliasDeclaration): GenericTypes;
    /**
     * Annotate the given loaded class or interface with a comment if it is present on the declaration.
     * @param classLoaded A loaded class or interface.
     */
    enhanceLoadedWithComment(classLoaded: ClassReferenceLoaded): ClassReferenceLoaded;
    /**
     * Load a class, and get all class elements from it.
     * @param packageName Package name we are importing from.
     * @param filePath A file path.
     * @returns {Promise<ClassElements & { resolvedPath: string }>} Promise of the class elements along with
     * the resolved file path that was used to load these class elements.
     */
    loadClassElements(packageName: string, filePath: string): Promise<ClassElements & {
        resolvedPath: string;
    }>;
    /**
     * Convert the given import path to an absolute file path, coupled with the module it is part of.
     * Result is `undefined` if there was an error resolving the package.
     * @param currentPackageName Package name we are importing from.
     * @param currentFilePath Absolute path to a file in which the import path occurs.
     * @param importPath Possibly relative path that is being imported.
     */
    importTargetToAbsolutePath(currentPackageName: string, currentFilePath: string, importPath: string): {
        packageName: string;
        fileName: string;
        fileNameReferenced: string;
    } | undefined;
    /**
     * Get all class elements in a file.
     * @param packageName Package name we are importing from.
     * @param fileName A file path.
     * @param ast The parsed file.
     */
    getClassElements(packageName: string, fileName: string, ast: AST<TSESTreeOptions> | TSESTree.TSModuleBlock): ClassElements;
}
export interface ClassLoaderArgs {
    resolutionContext: ResolutionContext;
    logger: Logger;
    commentLoader: CommentLoader;
}
/**
 * Holder for all available classes in a file.
 */
export interface ClassElements {
    exportedClasses: Record<string, TSESTree.ClassDeclaration>;
    exportedInterfaces: Record<string, TSESTree.TSInterfaceDeclaration>;
    exportedTypes: Record<string, TSESTree.TSTypeAliasDeclaration>;
    exportedEnums: Record<string, TSESTree.TSEnumDeclaration>;
    exportedNamespaces: Record<string, TSESTree.TSModuleDeclaration>;
    exportedImportedElements: Record<string, ClassReference>;
    exportedImportedAll: {
        packageName: string;
        fileName: string;
        fileNameReferenced: string;
    }[];
    exportedImportedAllNamed: Record<string, {
        packageName: string;
        fileName: string;
        fileNameReferenced: string;
    }>;
    exportedUnknowns: Record<string, string>;
    declaredClasses: Record<string, TSESTree.ClassDeclaration>;
    declaredInterfaces: Record<string, TSESTree.TSInterfaceDeclaration>;
    declaredTypes: Record<string, TSESTree.TSTypeAliasDeclaration>;
    declaredEnums: Record<string, TSESTree.TSEnumDeclaration>;
    declaredNamespaces: Record<string, TSESTree.TSModuleDeclaration>;
    importedElements: Record<string, ClassReference>;
    importedElementsAllNamed: Record<string, {
        packageName: string;
        fileName: string;
        fileNameReferenced: string;
    }>;
    exportAssignment: string | TSESTree.ClassDeclaration | undefined;
}

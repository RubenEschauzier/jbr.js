import type { TSESTree } from '@typescript-eslint/typescript-estree';
import type { Logger } from 'winston';
import type { ClassReferenceLoaded, InterfaceLoaded, ClassReference, ClassReferenceLoadedClassOrInterface, ClassIndex } from './ClassIndex';
import type { CommentData, ConstructorCommentData, CommentLoader } from './CommentLoader';
import type { ConstructorData, ConstructorHolder } from './ConstructorLoader';
import type { GenericsData } from './GenericsLoader';
/**
 * Interprets class parameters of a given class.
 */
export declare class ParameterLoader {
    private static readonly typeReferenceOverrides;
    private readonly commentLoader;
    private readonly hardErrorUnsupported;
    private readonly logger;
    constructor(args: ParameterLoaderArgs);
    /**
     * Create a class index containing all constructor data from the classes in the given index.
     * @param classIndex An index of loaded classes.
     */
    loadAllExtensionData(classIndex: ClassIndex<ClassReferenceLoaded>): ClassIndex<ExtensionData<ParameterRangeUnresolved>[]>;
    /**
     * Load the extension data of the given class or interface.
     * @param classReference A loaded class or interface reference.
     */
    loadExtensionData(classReference: ClassReferenceLoadedClassOrInterface): ExtensionData<ParameterRangeUnresolved>[];
    /**
     * Load all parameter data from all fields in the given constructor inheritance chain.
     * @param constructorChain An array of constructors within the class inheritance chain.
     */
    loadConstructorFields(constructorChain: ConstructorHolder[]): ConstructorData<ParameterRangeUnresolved>;
    /**
     * Load generics types from the given class.
     * @param classLoaded A loaded class.
     */
    loadClassGenerics(classLoaded: ClassReferenceLoadedClassOrInterface): GenericsData<ParameterRangeUnresolved>;
    /**
     * Load the generic type parameter data from the given generic in a class.
     * @param classLoaded The loaded class in which the field is defined.
     * @param genericTypeParameters The array of generic type parameters that will be appended to.
     * @param genericName The generic type name.
     * @param genericType The optional generic type range.
     */
    loadClassGeneric(classLoaded: ClassReferenceLoaded, genericTypeParameters: GenericTypeParameterData<ParameterRangeUnresolved>[], genericName: string, genericType: TSESTree.TypeNode | undefined): void;
    /**
     * Load the parameter data from the given field in a constructor.
     * @param classLoaded The loaded class in which the field is defined.
     * @param parameters The array of parameters that will be appended to.
     * @param constructorCommentData Comment data from the constructor.
     * @param field The field to load.
     */
    loadConstructorField(classLoaded: ClassReferenceLoaded, parameters: ParameterDataField<ParameterRangeUnresolved>[], constructorCommentData: ConstructorCommentData, field: TSESTree.Parameter): void;
    /**
     * Load all parameter data from all fields in the given interface.
     * If methods are found in the interface, an error is thrown.
     * @param iface An interface
     */
    loadInterfaceFields(iface: InterfaceLoaded): ParameterData<ParameterRangeUnresolved>[];
    /**
     * Load all parameter data from all fields in the given hash.
     * @param classLoaded The loaded class in which the field is defined.
     * @param hash An hash element.
     */
    loadHashFields(classLoaded: ClassReferenceLoaded, hash: TSESTree.TSTypeLiteral): ParameterData<ParameterRangeUnresolved>[];
    /**
     * Load the parameter data from the given type element.
     * @param classLoaded The loaded class in which the field is defined.
     * @param typeElement A type element, such as an interface or hash field.
     */
    loadTypeElementField(classLoaded: ClassReferenceLoaded, typeElement: TSESTree.TypeElement): ParameterData<ParameterRangeUnresolved> | undefined;
    /**
     * Load the parameter data from the given field.
     * @param classLoaded The loaded class in which the field is defined.
     * @param field A field.
     * @param commentData Comment data about the given field.
     */
    loadField(classLoaded: ClassReferenceLoaded, field: TSESTree.Identifier | TSESTree.TSPropertySignature, commentData: CommentData): ParameterDataField<ParameterRangeUnresolved>;
    getFieldName(classLoaded: ClassReferenceLoaded, field: TSESTree.Identifier | TSESTree.TSPropertySignature): string;
    getErrorIdentifierGeneric(classLoaded: ClassReferenceLoaded, genericName: string): string;
    getErrorIdentifierField(classLoaded: ClassReferenceLoaded, field: TSESTree.Identifier | TSESTree.TSPropertySignature): string;
    getErrorIdentifierIndex(): string;
    getRangeFromTypeNode(classLoaded: ClassReferenceLoaded, typeNode: TSESTree.TypeNode, errorIdentifier: string): ParameterRangeUnresolved;
    protected getGenericTypeParameterInstantiations(typeParameters: TSESTree.TSTypeParameterInstantiation, classLoaded: ClassReferenceLoaded): ParameterRangeUnresolved[];
    protected getQualifiedPath(qualifiedEntity: TSESTree.EntityName): string[];
    getFieldRange(classLoaded: ClassReferenceLoaded, field: TSESTree.Identifier | TSESTree.TSPropertySignature, commentData: CommentData): ParameterRangeUnresolved;
    /**
     * Apply a range override on the given range
     * @param range The range to override in.
     * @param override The range set set.
     */
    overrideRawRange(range: ParameterRangeUnresolved, override: ParameterRangeUnresolved): ParameterRangeUnresolved;
    getFieldComment(commentData: CommentData): string | undefined;
    /**
     * Load the parameter data from the given index signature.
     * @param classLoaded The loaded class in which the field is defined.
     * @param indexSignature An index signature.
     * @param commentData Comment data about the given field.
     */
    loadIndex(classLoaded: ClassReferenceLoaded, indexSignature: TSESTree.TSIndexSignature, commentData: CommentData): ParameterDataIndex<ParameterRangeUnresolved>;
    getIndexDomain(classLoaded: ClassReferenceLoaded, indexSignature: TSESTree.TSIndexSignature): 'string' | 'number' | 'boolean';
    getIndexRange(classLoaded: ClassReferenceLoaded, indexSignature: TSESTree.TSIndexSignature, commentData: CommentData): ParameterRangeUnresolved;
    /**
     * Iterate over all type reference override handler to see if one of them overrides the given type.
     * @param typeNode A type reference node.
     */
    handleTypeOverride(typeNode: TSESTree.TSTypeReference): ParameterRangeUnresolved | undefined;
    protected throwOrWarn(error: Error): void;
}
export interface ParameterLoaderArgs {
    commentLoader: CommentLoader;
    hardErrorUnsupported: boolean;
    logger: Logger;
}
export declare type ParameterData<R> = ParameterDataField<R> | ParameterDataIndex<R>;
export interface ParameterDataField<R> {
    /**
     * The data type.
     */
    type: 'field';
    /**
     * The parameter name.
     */
    name: string;
    /**
     * The range of the parameter values.
     */
    range: R;
    /**
     * The default values.
     */
    defaults?: DefaultValue[];
    /**
     * The human-readable description of this parameter.
     */
    comment?: string;
    /**
     * The nested default values on parameters.
     */
    defaultNested?: DefaultNested[];
}
export interface ParameterDataIndex<R> {
    /**
     * The data type.
     */
    type: 'index';
    /**
     * The domain of the parameter keys.
     */
    domain: 'string' | 'number' | 'boolean';
    /**
     * The range of the parameter values.
     */
    range: R;
    /**
     * The default values.
     */
    defaults?: DefaultValue[];
    /**
     * The human-readable description of this parameter.
     */
    comment?: string;
}
export interface GenericTypeParameterData<R> {
    /**
     * The generic type parameter name.
     */
    name: string;
    /**
     * The range of the generic type parameter.
     */
    range?: R;
    /**
     * The human-readable description of this parameter.
     */
    comment?: string;
}
export interface MemberParameterData<R> {
    /**
     * The member name.
     */
    name: string;
    /**
     * The range of the member parameter.
     */
    range?: R;
    /**
     * The human-readable description of this member.
     */
    comment?: string;
}
/**
 * Extension information
 */
export interface ExtensionData<R> {
    classLoaded: ClassReferenceLoaded;
    genericTypeInstantiations: R[];
}
export declare type ParameterRangeUnresolved = {
    type: 'raw';
    value: 'boolean' | 'number' | 'string';
} | {
    type: 'literal';
    value: boolean | number | string;
} | {
    type: 'override';
    value: string;
} | {
    type: 'interface';
    value: string;
    /**
     * For qualified names, this array contains the path segments.
     */
    qualifiedPath?: string[];
    genericTypeParameterInstantiations: ParameterRangeUnresolved[] | undefined;
    /**
     * The place from which the interface was referenced.
     */
    origin: ClassReferenceLoaded;
} | {
    type: 'hash';
    value: TSESTree.TSTypeLiteral;
} | {
    type: 'undefined';
} | {
    type: 'wildcard';
} | {
    type: 'union';
    elements: ParameterRangeUnresolved[];
} | {
    type: 'intersection';
    elements: ParameterRangeUnresolved[];
} | {
    type: 'tuple';
    elements: ParameterRangeUnresolved[];
} | {
    type: 'rest';
    value: ParameterRangeUnresolved;
} | {
    type: 'array';
    value: ParameterRangeUnresolved;
} | {
    type: 'keyof';
    value: ParameterRangeUnresolved;
} | {
    type: 'genericTypeReference';
    value: string;
} | {
    type: 'typeof';
    value: string;
    /**
     * For qualified names, this array contains the path segments.
     */
    qualifiedPath?: string[];
    /**
     * The place from which the interface was referenced.
     */
    origin: ClassReferenceLoaded;
} | {
    type: 'indexed';
    object: ParameterRangeUnresolved;
    index: ParameterRangeUnresolved;
};
export declare type ParameterRangeResolved = {
    type: 'raw';
    value: 'boolean' | 'number' | 'string';
} | {
    type: 'literal';
    value: boolean | number | string;
} | {
    type: 'override';
    value: string;
} | {
    type: 'class';
    value: ClassReferenceLoaded;
    genericTypeParameterInstances: ParameterRangeResolved[] | undefined;
} | {
    type: 'nested';
    value: ParameterData<ParameterRangeResolved>[];
} | {
    type: 'undefined';
} | {
    type: 'wildcard';
} | {
    type: 'union';
    elements: ParameterRangeResolved[];
} | {
    type: 'intersection';
    elements: ParameterRangeResolved[];
} | {
    type: 'tuple';
    elements: ParameterRangeResolved[];
} | {
    type: 'rest';
    value: ParameterRangeResolved;
} | {
    type: 'array';
    value: ParameterRangeResolved;
} | {
    type: 'keyof';
    value: ParameterRangeResolved;
} | {
    type: 'genericTypeReference';
    value: string;
    /**
     * The place in which the generic type was defined.
     */
    origin: ClassReferenceLoaded;
} | {
    type: 'typeof';
    value: ParameterRangeResolved;
} | {
    type: 'indexed';
    object: ParameterRangeResolved;
    index: ParameterRangeResolved;
};
/**
 * Represents a default value that is to be set on a nested parameter,
 * indicated by a path of parameter keys.
 */
export interface DefaultNested {
    /**
     * The path of parameter keys in which the default value applies.
     */
    paramPath: string[];
    /**
     * A default value for the path.
     */
    value: DefaultValue;
}
/**
 * A default value
 */
export declare type DefaultValue = {
    type: 'raw';
    value: string;
} | {
    type: 'iri';
    value?: string;
    typeIri?: string;
    /**
     * The component reference for relative IRIs.
     */
    baseComponent: ClassReference;
};
